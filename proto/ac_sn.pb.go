// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.26.1
// source: ac_sn.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 客户端发起的存储请求
type ClientStorageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Dsno     string `protobuf:"bytes,3,opt,name=dsno,proto3" json:"dsno,omitempty"`         //该存储节点待存储的分片号
}

func (x *ClientStorageRequest) Reset() {
	*x = ClientStorageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ac_sn_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientStorageRequest) ProtoMessage() {}

func (x *ClientStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ac_sn_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientStorageRequest.ProtoReflect.Descriptor instead.
func (*ClientStorageRequest) Descriptor() ([]byte, []int) {
	return file_ac_sn_proto_rawDescGZIP(), []int{0}
}

func (x *ClientStorageRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ClientStorageRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ClientStorageRequest) GetDsno() string {
	if x != nil {
		return x.Dsno
	}
	return ""
}

// 存储节点对存储请求的回复
type ClientStorageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId  string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`   //客户端ID
	Filename  string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`   //待存储的文件名
	Dsno      string `protobuf:"bytes,3,opt,name=dsno,proto3" json:"dsno,omitempty"`           //该存储节点已存储的分片号
	Version   int32  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`    //分片对应的版本号
	Timestamp string `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"` //分片对应的时间戳
	Message   string `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`     //附加信息
}

func (x *ClientStorageResponse) Reset() {
	*x = ClientStorageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ac_sn_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientStorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientStorageResponse) ProtoMessage() {}

func (x *ClientStorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ac_sn_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientStorageResponse.ProtoReflect.Descriptor instead.
func (*ClientStorageResponse) Descriptor() ([]byte, []int) {
	return file_ac_sn_proto_rawDescGZIP(), []int{1}
}

func (x *ClientStorageResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ClientStorageResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ClientStorageResponse) GetDsno() string {
	if x != nil {
		return x.Dsno
	}
	return ""
}

func (x *ClientStorageResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ClientStorageResponse) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *ClientStorageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 客户端发起的更新数据分片请求
type ClientUpdDSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Dsno     string `protobuf:"bytes,3,opt,name=dsno,proto3" json:"dsno,omitempty"`         //该存储节点待更新的分片号
}

func (x *ClientUpdDSRequest) Reset() {
	*x = ClientUpdDSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ac_sn_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientUpdDSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientUpdDSRequest) ProtoMessage() {}

func (x *ClientUpdDSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ac_sn_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientUpdDSRequest.ProtoReflect.Descriptor instead.
func (*ClientUpdDSRequest) Descriptor() ([]byte, []int) {
	return file_ac_sn_proto_rawDescGZIP(), []int{2}
}

func (x *ClientUpdDSRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ClientUpdDSRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ClientUpdDSRequest) GetDsno() string {
	if x != nil {
		return x.Dsno
	}
	return ""
}

// 存储节点对更新数据分片请求的回复
type ClientUpdDSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId  string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`   //客户端ID
	Filename  string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`   //已更新的文件名
	Dsno      string `protobuf:"bytes,3,opt,name=dsno,proto3" json:"dsno,omitempty"`           //该存储节点已更新的分片号
	Version   int32  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`    //分片更新后的版本号
	Timestamp string `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"` //分片更新后的时间戳
	Message   string `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`     //附加信息
}

func (x *ClientUpdDSResponse) Reset() {
	*x = ClientUpdDSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ac_sn_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientUpdDSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientUpdDSResponse) ProtoMessage() {}

func (x *ClientUpdDSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ac_sn_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientUpdDSResponse.ProtoReflect.Descriptor instead.
func (*ClientUpdDSResponse) Descriptor() ([]byte, []int) {
	return file_ac_sn_proto_rawDescGZIP(), []int{3}
}

func (x *ClientUpdDSResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ClientUpdDSResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ClientUpdDSResponse) GetDsno() string {
	if x != nil {
		return x.Dsno
	}
	return ""
}

func (x *ClientUpdDSResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ClientUpdDSResponse) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *ClientUpdDSResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 审计方发起的注册请求
type ACRegistSNRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params string `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"` //用于构造pairing的参数
	G      []byte `protobuf:"bytes,2,opt,name=G,proto3" json:"G,omitempty"`           // 字节切片类型的G字段
}

func (x *ACRegistSNRequest) Reset() {
	*x = ACRegistSNRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ac_sn_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACRegistSNRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACRegistSNRequest) ProtoMessage() {}

func (x *ACRegistSNRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ac_sn_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACRegistSNRequest.ProtoReflect.Descriptor instead.
func (*ACRegistSNRequest) Descriptor() ([]byte, []int) {
	return file_ac_sn_proto_rawDescGZIP(), []int{4}
}

func (x *ACRegistSNRequest) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

func (x *ACRegistSNRequest) GetG() []byte {
	if x != nil {
		return x.G
	}
	return nil
}

// 存储节点对审计方注册请求的回复
type ACRegistSNResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` //回复信息
}

func (x *ACRegistSNResponse) Reset() {
	*x = ACRegistSNResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ac_sn_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACRegistSNResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACRegistSNResponse) ProtoMessage() {}

func (x *ACRegistSNResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ac_sn_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACRegistSNResponse.ProtoReflect.Descriptor instead.
func (*ACRegistSNResponse) Descriptor() ([]byte, []int) {
	return file_ac_sn_proto_rawDescGZIP(), []int{5}
}

func (x *ACRegistSNResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 审计方发起的预审计请求
type PASNRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auditno   string           `protobuf:"bytes,1,opt,name=auditno,proto3" json:"auditno,omitempty"`                                                                                              //审计代号:audit1,audit2...
	Snid      string           `protobuf:"bytes,2,opt,name=snid,proto3" json:"snid,omitempty"`                                                                                                    //请求的存储节点id
	Dsversion map[string]int32 `protobuf:"bytes,3,rep,name=dsversion,proto3" json:"dsversion,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //挑战的分片及其版本，key:clientId-filename-dsno,value:版本号
}

func (x *PASNRequest) Reset() {
	*x = PASNRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ac_sn_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PASNRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PASNRequest) ProtoMessage() {}

func (x *PASNRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ac_sn_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PASNRequest.ProtoReflect.Descriptor instead.
func (*PASNRequest) Descriptor() ([]byte, []int) {
	return file_ac_sn_proto_rawDescGZIP(), []int{6}
}

func (x *PASNRequest) GetAuditno() string {
	if x != nil {
		return x.Auditno
	}
	return ""
}

func (x *PASNRequest) GetSnid() string {
	if x != nil {
		return x.Snid
	}
	return ""
}

func (x *PASNRequest) GetDsversion() map[string]int32 {
	if x != nil {
		return x.Dsversion
	}
	return nil
}

// 存储节点对审计方预审计请求的回复
type PASNResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Isready   bool             `protobuf:"varint,1,opt,name=isready,proto3" json:"isready,omitempty"`                                                                                             //是否准备好审计，即可以预留快照
	Dsversion map[string]int32 `protobuf:"bytes,2,rep,name=dsversion,proto3" json:"dsversion,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //如果不能预留，告知审计方哪些分片的版本已过时，否则为空
}

func (x *PASNResponse) Reset() {
	*x = PASNResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ac_sn_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PASNResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PASNResponse) ProtoMessage() {}

func (x *PASNResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ac_sn_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PASNResponse.ProtoReflect.Descriptor instead.
func (*PASNResponse) Descriptor() ([]byte, []int) {
	return file_ac_sn_proto_rawDescGZIP(), []int{7}
}

func (x *PASNResponse) GetIsready() bool {
	if x != nil {
		return x.Isready
	}
	return false
}

func (x *PASNResponse) GetDsversion() map[string]int32 {
	if x != nil {
		return x.Dsversion
	}
	return nil
}

// 获取存储节点上所有存储分片的聚合存储证明的请求
type GAPSNRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auditno string `protobuf:"bytes,1,opt,name=auditno,proto3" json:"auditno,omitempty"` //审计代号
	Random  int32  `protobuf:"varint,2,opt,name=random,proto3" json:"random,omitempty"`  //挑战的随机数
}

func (x *GAPSNRequest) Reset() {
	*x = GAPSNRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ac_sn_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GAPSNRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GAPSNRequest) ProtoMessage() {}

func (x *GAPSNRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ac_sn_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GAPSNRequest.ProtoReflect.Descriptor instead.
func (*GAPSNRequest) Descriptor() ([]byte, []int) {
	return file_ac_sn_proto_rawDescGZIP(), []int{8}
}

func (x *GAPSNRequest) GetAuditno() string {
	if x != nil {
		return x.Auditno
	}
	return ""
}

func (x *GAPSNRequest) GetRandom() int32 {
	if x != nil {
		return x.Random
	}
	return 0
}

// 存储节点对所有存储分片的聚合存储证明请求的回复
type GAPSNResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aggpos []byte `protobuf:"bytes,1,opt,name=aggpos,proto3" json:"aggpos,omitempty"` //聚合存储证明
}

func (x *GAPSNResponse) Reset() {
	*x = GAPSNResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ac_sn_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GAPSNResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GAPSNResponse) ProtoMessage() {}

func (x *GAPSNResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ac_sn_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GAPSNResponse.ProtoReflect.Descriptor instead.
func (*GAPSNResponse) Descriptor() ([]byte, []int) {
	return file_ac_sn_proto_rawDescGZIP(), []int{9}
}

func (x *GAPSNResponse) GetAggpos() []byte {
	if x != nil {
		return x.Aggpos
	}
	return nil
}

var File_ac_sn_proto protoreflect.FileDescriptor

var file_ac_sn_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x63, 0x5f, 0x73, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x62, 0x0a, 0x14, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x73, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x73, 0x6e, 0x6f, 0x22, 0xb5, 0x01, 0x0a, 0x15, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x73,
	0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x73, 0x6e, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x60, 0x0a, 0x12, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x44, 0x53, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x73, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x73,
	0x6e, 0x6f, 0x22, 0xb3, 0x01, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64,
	0x44, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x73, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x73, 0x6e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x39, 0x0a, 0x11, 0x41, 0x43, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x53, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x47, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x01, 0x47, 0x22, 0x2e, 0x0a, 0x12, 0x41, 0x43, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x53,
	0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x0b, 0x50, 0x41, 0x53, 0x4e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6e, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6e, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6e, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x41, 0x53,
	0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x64, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x1a, 0x3c, 0x0a, 0x0e, 0x44, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xa8, 0x01, 0x0a, 0x0c, 0x50, 0x41, 0x53, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x40, 0x0a, 0x09, 0x64,
	0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x41, 0x53, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x44, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x64, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x3c, 0x0a,
	0x0e, 0x44, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x40, 0x0a, 0x0c, 0x47,
	0x41, 0x50, 0x53, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x6e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x22, 0x27, 0x0a,
	0x0d, 0x47, 0x41, 0x50, 0x53, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x67, 0x67, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x61, 0x67, 0x67, 0x70, 0x6f, 0x73, 0x32, 0xe4, 0x02, 0x0a, 0x0b, 0x53, 0x4e, 0x41, 0x43, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x12, 0x50, 0x75, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55,
	0x70, 0x64, 0x44, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x44, 0x53, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x41, 0x43, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x4e, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x43, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x53, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x43, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x53, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0a,
	0x50, 0x72, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x4e, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x41, 0x53, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x41, 0x53, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x50, 0x6f, 0x73,
	0x53, 0x4e, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x41, 0x50, 0x53, 0x4e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x41, 0x50, 0x53, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x04, 0x5a,
	0x02, 0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ac_sn_proto_rawDescOnce sync.Once
	file_ac_sn_proto_rawDescData = file_ac_sn_proto_rawDesc
)

func file_ac_sn_proto_rawDescGZIP() []byte {
	file_ac_sn_proto_rawDescOnce.Do(func() {
		file_ac_sn_proto_rawDescData = protoimpl.X.CompressGZIP(file_ac_sn_proto_rawDescData)
	})
	return file_ac_sn_proto_rawDescData
}

var file_ac_sn_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_ac_sn_proto_goTypes = []any{
	(*ClientStorageRequest)(nil),  // 0: proto.ClientStorageRequest
	(*ClientStorageResponse)(nil), // 1: proto.ClientStorageResponse
	(*ClientUpdDSRequest)(nil),    // 2: proto.ClientUpdDSRequest
	(*ClientUpdDSResponse)(nil),   // 3: proto.ClientUpdDSResponse
	(*ACRegistSNRequest)(nil),     // 4: proto.ACRegistSNRequest
	(*ACRegistSNResponse)(nil),    // 5: proto.ACRegistSNResponse
	(*PASNRequest)(nil),           // 6: proto.PASNRequest
	(*PASNResponse)(nil),          // 7: proto.PASNResponse
	(*GAPSNRequest)(nil),          // 8: proto.GAPSNRequest
	(*GAPSNResponse)(nil),         // 9: proto.GAPSNResponse
	nil,                           // 10: proto.PASNRequest.DsversionEntry
	nil,                           // 11: proto.PASNResponse.DsversionEntry
}
var file_ac_sn_proto_depIdxs = []int32{
	10, // 0: proto.PASNRequest.dsversion:type_name -> proto.PASNRequest.DsversionEntry
	11, // 1: proto.PASNResponse.dsversion:type_name -> proto.PASNResponse.DsversionEntry
	0,  // 2: proto.SNACService.PutDataShardNotice:input_type -> proto.ClientStorageRequest
	2,  // 3: proto.SNACService.UpdateDataShardNotice:input_type -> proto.ClientUpdDSRequest
	4,  // 4: proto.SNACService.ACRegisterSN:input_type -> proto.ACRegistSNRequest
	6,  // 5: proto.SNACService.PreAuditSN:input_type -> proto.PASNRequest
	8,  // 6: proto.SNACService.GetAggPosSN:input_type -> proto.GAPSNRequest
	1,  // 7: proto.SNACService.PutDataShardNotice:output_type -> proto.ClientStorageResponse
	3,  // 8: proto.SNACService.UpdateDataShardNotice:output_type -> proto.ClientUpdDSResponse
	5,  // 9: proto.SNACService.ACRegisterSN:output_type -> proto.ACRegistSNResponse
	7,  // 10: proto.SNACService.PreAuditSN:output_type -> proto.PASNResponse
	9,  // 11: proto.SNACService.GetAggPosSN:output_type -> proto.GAPSNResponse
	7,  // [7:12] is the sub-list for method output_type
	2,  // [2:7] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_ac_sn_proto_init() }
func file_ac_sn_proto_init() {
	if File_ac_sn_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ac_sn_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ClientStorageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ac_sn_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ClientStorageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ac_sn_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ClientUpdDSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ac_sn_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ClientUpdDSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ac_sn_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ACRegistSNRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ac_sn_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ACRegistSNResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ac_sn_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*PASNRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ac_sn_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*PASNResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ac_sn_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GAPSNRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ac_sn_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GAPSNResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ac_sn_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ac_sn_proto_goTypes,
		DependencyIndexes: file_ac_sn_proto_depIdxs,
		MessageInfos:      file_ac_sn_proto_msgTypes,
	}.Build()
	File_ac_sn_proto = out.File
	file_ac_sn_proto_rawDesc = nil
	file_ac_sn_proto_goTypes = nil
	file_ac_sn_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.26.1
// source: ac_sn.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 客户端发起的存储请求
type ClientStorageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Dsno          string                 `protobuf:"bytes,3,opt,name=dsno,proto3" json:"dsno,omitempty"`         //该存储节点待存储的分片号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientStorageRequest) Reset() {
	*x = ClientStorageRequest{}
	mi := &file_ac_sn_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientStorageRequest) ProtoMessage() {}

func (x *ClientStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ac_sn_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientStorageRequest.ProtoReflect.Descriptor instead.
func (*ClientStorageRequest) Descriptor() ([]byte, []int) {
	return file_ac_sn_proto_rawDescGZIP(), []int{0}
}

func (x *ClientStorageRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ClientStorageRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ClientStorageRequest) GetDsno() string {
	if x != nil {
		return x.Dsno
	}
	return ""
}

// 存储节点对存储请求的回复
type ClientStorageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`   //客户端ID
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`   //待存储的文件名
	Dsno          string                 `protobuf:"bytes,3,opt,name=dsno,proto3" json:"dsno,omitempty"`           //该存储节点已存储的分片号
	Version       int32                  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`    //分片对应的版本号
	Timestamp     string                 `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"` //分片对应的时间戳
	Message       string                 `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`     //附加信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientStorageResponse) Reset() {
	*x = ClientStorageResponse{}
	mi := &file_ac_sn_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientStorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientStorageResponse) ProtoMessage() {}

func (x *ClientStorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ac_sn_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientStorageResponse.ProtoReflect.Descriptor instead.
func (*ClientStorageResponse) Descriptor() ([]byte, []int) {
	return file_ac_sn_proto_rawDescGZIP(), []int{1}
}

func (x *ClientStorageResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ClientStorageResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ClientStorageResponse) GetDsno() string {
	if x != nil {
		return x.Dsno
	}
	return ""
}

func (x *ClientStorageResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ClientStorageResponse) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *ClientStorageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 客户端发起的更新数据分片请求
type ClientUpdDSRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Dsno          string                 `protobuf:"bytes,3,opt,name=dsno,proto3" json:"dsno,omitempty"`         //该存储节点待更新的分片号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientUpdDSRequest) Reset() {
	*x = ClientUpdDSRequest{}
	mi := &file_ac_sn_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientUpdDSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientUpdDSRequest) ProtoMessage() {}

func (x *ClientUpdDSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ac_sn_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientUpdDSRequest.ProtoReflect.Descriptor instead.
func (*ClientUpdDSRequest) Descriptor() ([]byte, []int) {
	return file_ac_sn_proto_rawDescGZIP(), []int{2}
}

func (x *ClientUpdDSRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ClientUpdDSRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ClientUpdDSRequest) GetDsno() string {
	if x != nil {
		return x.Dsno
	}
	return ""
}

// 存储节点对更新数据分片请求的回复
type ClientUpdDSResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`   //客户端ID
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`   //已更新的文件名
	Dsno          string                 `protobuf:"bytes,3,opt,name=dsno,proto3" json:"dsno,omitempty"`           //该存储节点已更新的分片号
	Version       int32                  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`    //分片更新后的版本号
	Timestamp     string                 `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"` //分片更新后的时间戳
	Message       string                 `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`     //附加信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientUpdDSResponse) Reset() {
	*x = ClientUpdDSResponse{}
	mi := &file_ac_sn_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientUpdDSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientUpdDSResponse) ProtoMessage() {}

func (x *ClientUpdDSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ac_sn_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientUpdDSResponse.ProtoReflect.Descriptor instead.
func (*ClientUpdDSResponse) Descriptor() ([]byte, []int) {
	return file_ac_sn_proto_rawDescGZIP(), []int{3}
}

func (x *ClientUpdDSResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ClientUpdDSResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ClientUpdDSResponse) GetDsno() string {
	if x != nil {
		return x.Dsno
	}
	return ""
}

func (x *ClientUpdDSResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ClientUpdDSResponse) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *ClientUpdDSResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 审计方发起的注册请求
type ACRegistSNRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Params        string                 `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"` //用于构造pairing的参数
	G             []byte                 `protobuf:"bytes,2,opt,name=G,proto3" json:"G,omitempty"`           // 字节切片类型的G字段
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ACRegistSNRequest) Reset() {
	*x = ACRegistSNRequest{}
	mi := &file_ac_sn_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ACRegistSNRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACRegistSNRequest) ProtoMessage() {}

func (x *ACRegistSNRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ac_sn_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACRegistSNRequest.ProtoReflect.Descriptor instead.
func (*ACRegistSNRequest) Descriptor() ([]byte, []int) {
	return file_ac_sn_proto_rawDescGZIP(), []int{4}
}

func (x *ACRegistSNRequest) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

func (x *ACRegistSNRequest) GetG() []byte {
	if x != nil {
		return x.G
	}
	return nil
}

// 存储节点对审计方注册请求的回复
type ACRegistSNResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` //回复信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ACRegistSNResponse) Reset() {
	*x = ACRegistSNResponse{}
	mi := &file_ac_sn_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ACRegistSNResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACRegistSNResponse) ProtoMessage() {}

func (x *ACRegistSNResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ac_sn_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACRegistSNResponse.ProtoReflect.Descriptor instead.
func (*ACRegistSNResponse) Descriptor() ([]byte, []int) {
	return file_ac_sn_proto_rawDescGZIP(), []int{5}
}

func (x *ACRegistSNResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 审计方发起的预审计请求
type PASNRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Auditno       string                 `protobuf:"bytes,1,opt,name=auditno,proto3" json:"auditno,omitempty"`                                                                                //审计代号:audit1,audit2...
	Snid          string                 `protobuf:"bytes,2,opt,name=snid,proto3" json:"snid,omitempty"`                                                                                      //请求的存储节点id
	Dsversion     map[string]int32       `protobuf:"bytes,3,rep,name=dsversion,proto3" json:"dsversion,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` //挑战的分片及其版本，key:clientId-filename-dsno,value:版本号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PASNRequest) Reset() {
	*x = PASNRequest{}
	mi := &file_ac_sn_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PASNRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PASNRequest) ProtoMessage() {}

func (x *PASNRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ac_sn_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PASNRequest.ProtoReflect.Descriptor instead.
func (*PASNRequest) Descriptor() ([]byte, []int) {
	return file_ac_sn_proto_rawDescGZIP(), []int{6}
}

func (x *PASNRequest) GetAuditno() string {
	if x != nil {
		return x.Auditno
	}
	return ""
}

func (x *PASNRequest) GetSnid() string {
	if x != nil {
		return x.Snid
	}
	return ""
}

func (x *PASNRequest) GetDsversion() map[string]int32 {
	if x != nil {
		return x.Dsversion
	}
	return nil
}

// 存储节点对审计方预审计请求的回复
type PASNResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Isready       bool                   `protobuf:"varint,1,opt,name=isready,proto3" json:"isready,omitempty"`                                                                               //是否准备好审计，即可以预留快照
	Dsversion     map[string]int32       `protobuf:"bytes,2,rep,name=dsversion,proto3" json:"dsversion,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` //如果不能预留，告知审计方哪些分片的版本已过时，否则为空
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PASNResponse) Reset() {
	*x = PASNResponse{}
	mi := &file_ac_sn_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PASNResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PASNResponse) ProtoMessage() {}

func (x *PASNResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ac_sn_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PASNResponse.ProtoReflect.Descriptor instead.
func (*PASNResponse) Descriptor() ([]byte, []int) {
	return file_ac_sn_proto_rawDescGZIP(), []int{7}
}

func (x *PASNResponse) GetIsready() bool {
	if x != nil {
		return x.Isready
	}
	return false
}

func (x *PASNResponse) GetDsversion() map[string]int32 {
	if x != nil {
		return x.Dsversion
	}
	return nil
}

// 获取存储节点上所有存储分片的聚合存储证明的请求
type GAPSNRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Auditno       string                 `protobuf:"bytes,1,opt,name=auditno,proto3" json:"auditno,omitempty"` //审计代号
	Random        int32                  `protobuf:"varint,2,opt,name=random,proto3" json:"random,omitempty"`  //挑战的随机数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GAPSNRequest) Reset() {
	*x = GAPSNRequest{}
	mi := &file_ac_sn_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GAPSNRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GAPSNRequest) ProtoMessage() {}

func (x *GAPSNRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ac_sn_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GAPSNRequest.ProtoReflect.Descriptor instead.
func (*GAPSNRequest) Descriptor() ([]byte, []int) {
	return file_ac_sn_proto_rawDescGZIP(), []int{8}
}

func (x *GAPSNRequest) GetAuditno() string {
	if x != nil {
		return x.Auditno
	}
	return ""
}

func (x *GAPSNRequest) GetRandom() int32 {
	if x != nil {
		return x.Random
	}
	return 0
}

// 存储节点对所有存储分片的聚合存储证明请求的回复
type GAPSNResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Aggpos        []byte                 `protobuf:"bytes,1,opt,name=aggpos,proto3" json:"aggpos,omitempty"` //聚合存储证明
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GAPSNResponse) Reset() {
	*x = GAPSNResponse{}
	mi := &file_ac_sn_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GAPSNResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GAPSNResponse) ProtoMessage() {}

func (x *GAPSNResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ac_sn_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GAPSNResponse.ProtoReflect.Descriptor instead.
func (*GAPSNResponse) Descriptor() ([]byte, []int) {
	return file_ac_sn_proto_rawDescGZIP(), []int{9}
}

func (x *GAPSNResponse) GetAggpos() []byte {
	if x != nil {
		return x.Aggpos
	}
	return nil
}

var File_ac_sn_proto protoreflect.FileDescriptor

const file_ac_sn_proto_rawDesc = "" +
	"\n" +
	"\vac_sn.proto\x12\x05proto\"b\n" +
	"\x14ClientStorageRequest\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12\x12\n" +
	"\x04dsno\x18\x03 \x01(\tR\x04dsno\"\xb5\x01\n" +
	"\x15ClientStorageResponse\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12\x12\n" +
	"\x04dsno\x18\x03 \x01(\tR\x04dsno\x12\x18\n" +
	"\aversion\x18\x04 \x01(\x05R\aversion\x12\x1c\n" +
	"\ttimestamp\x18\x05 \x01(\tR\ttimestamp\x12\x18\n" +
	"\amessage\x18\x06 \x01(\tR\amessage\"`\n" +
	"\x12ClientUpdDSRequest\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12\x12\n" +
	"\x04dsno\x18\x03 \x01(\tR\x04dsno\"\xb3\x01\n" +
	"\x13ClientUpdDSResponse\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12\x12\n" +
	"\x04dsno\x18\x03 \x01(\tR\x04dsno\x12\x18\n" +
	"\aversion\x18\x04 \x01(\x05R\aversion\x12\x1c\n" +
	"\ttimestamp\x18\x05 \x01(\tR\ttimestamp\x12\x18\n" +
	"\amessage\x18\x06 \x01(\tR\amessage\"9\n" +
	"\x11ACRegistSNRequest\x12\x16\n" +
	"\x06params\x18\x01 \x01(\tR\x06params\x12\f\n" +
	"\x01G\x18\x02 \x01(\fR\x01G\".\n" +
	"\x12ACRegistSNResponse\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\"\xba\x01\n" +
	"\vPASNRequest\x12\x18\n" +
	"\aauditno\x18\x01 \x01(\tR\aauditno\x12\x12\n" +
	"\x04snid\x18\x02 \x01(\tR\x04snid\x12?\n" +
	"\tdsversion\x18\x03 \x03(\v2!.proto.PASNRequest.DsversionEntryR\tdsversion\x1a<\n" +
	"\x0eDsversionEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xa8\x01\n" +
	"\fPASNResponse\x12\x18\n" +
	"\aisready\x18\x01 \x01(\bR\aisready\x12@\n" +
	"\tdsversion\x18\x02 \x03(\v2\".proto.PASNResponse.DsversionEntryR\tdsversion\x1a<\n" +
	"\x0eDsversionEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"@\n" +
	"\fGAPSNRequest\x12\x18\n" +
	"\aauditno\x18\x01 \x01(\tR\aauditno\x12\x16\n" +
	"\x06random\x18\x02 \x01(\x05R\x06random\"'\n" +
	"\rGAPSNResponse\x12\x16\n" +
	"\x06aggpos\x18\x01 \x01(\fR\x06aggpos2\xe4\x02\n" +
	"\vSNACService\x12O\n" +
	"\x12PutDataShardNotice\x12\x1b.proto.ClientStorageRequest\x1a\x1c.proto.ClientStorageResponse\x12N\n" +
	"\x15UpdateDataShardNotice\x12\x19.proto.ClientUpdDSRequest\x1a\x1a.proto.ClientUpdDSResponse\x12C\n" +
	"\fACRegisterSN\x12\x18.proto.ACRegistSNRequest\x1a\x19.proto.ACRegistSNResponse\x125\n" +
	"\n" +
	"PreAuditSN\x12\x12.proto.PASNRequest\x1a\x13.proto.PASNResponse\x128\n" +
	"\vGetAggPosSN\x12\x13.proto.GAPSNRequest\x1a\x14.proto.GAPSNResponseB\x04Z\x02./b\x06proto3"

var (
	file_ac_sn_proto_rawDescOnce sync.Once
	file_ac_sn_proto_rawDescData []byte
)

func file_ac_sn_proto_rawDescGZIP() []byte {
	file_ac_sn_proto_rawDescOnce.Do(func() {
		file_ac_sn_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ac_sn_proto_rawDesc), len(file_ac_sn_proto_rawDesc)))
	})
	return file_ac_sn_proto_rawDescData
}

var file_ac_sn_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_ac_sn_proto_goTypes = []any{
	(*ClientStorageRequest)(nil),  // 0: proto.ClientStorageRequest
	(*ClientStorageResponse)(nil), // 1: proto.ClientStorageResponse
	(*ClientUpdDSRequest)(nil),    // 2: proto.ClientUpdDSRequest
	(*ClientUpdDSResponse)(nil),   // 3: proto.ClientUpdDSResponse
	(*ACRegistSNRequest)(nil),     // 4: proto.ACRegistSNRequest
	(*ACRegistSNResponse)(nil),    // 5: proto.ACRegistSNResponse
	(*PASNRequest)(nil),           // 6: proto.PASNRequest
	(*PASNResponse)(nil),          // 7: proto.PASNResponse
	(*GAPSNRequest)(nil),          // 8: proto.GAPSNRequest
	(*GAPSNResponse)(nil),         // 9: proto.GAPSNResponse
	nil,                           // 10: proto.PASNRequest.DsversionEntry
	nil,                           // 11: proto.PASNResponse.DsversionEntry
}
var file_ac_sn_proto_depIdxs = []int32{
	10, // 0: proto.PASNRequest.dsversion:type_name -> proto.PASNRequest.DsversionEntry
	11, // 1: proto.PASNResponse.dsversion:type_name -> proto.PASNResponse.DsversionEntry
	0,  // 2: proto.SNACService.PutDataShardNotice:input_type -> proto.ClientStorageRequest
	2,  // 3: proto.SNACService.UpdateDataShardNotice:input_type -> proto.ClientUpdDSRequest
	4,  // 4: proto.SNACService.ACRegisterSN:input_type -> proto.ACRegistSNRequest
	6,  // 5: proto.SNACService.PreAuditSN:input_type -> proto.PASNRequest
	8,  // 6: proto.SNACService.GetAggPosSN:input_type -> proto.GAPSNRequest
	1,  // 7: proto.SNACService.PutDataShardNotice:output_type -> proto.ClientStorageResponse
	3,  // 8: proto.SNACService.UpdateDataShardNotice:output_type -> proto.ClientUpdDSResponse
	5,  // 9: proto.SNACService.ACRegisterSN:output_type -> proto.ACRegistSNResponse
	7,  // 10: proto.SNACService.PreAuditSN:output_type -> proto.PASNResponse
	9,  // 11: proto.SNACService.GetAggPosSN:output_type -> proto.GAPSNResponse
	7,  // [7:12] is the sub-list for method output_type
	2,  // [2:7] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_ac_sn_proto_init() }
func file_ac_sn_proto_init() {
	if File_ac_sn_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ac_sn_proto_rawDesc), len(file_ac_sn_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ac_sn_proto_goTypes,
		DependencyIndexes: file_ac_sn_proto_depIdxs,
		MessageInfos:      file_ac_sn_proto_msgTypes,
	}.Build()
	File_ac_sn_proto = out.File
	file_ac_sn_proto_goTypes = nil
	file_ac_sn_proto_depIdxs = nil
}

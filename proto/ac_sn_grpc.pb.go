// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: ac_sn.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SNACService_PutDataShardNotice_FullMethodName = "/proto.SNACService/PutDataShardNotice"
)

// SNACServiceClient is the client API for SNACService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SNACServiceClient interface {
	PutDataShardNotice(ctx context.Context, in *ClientStorageRequest, opts ...grpc.CallOption) (*ClientStorageResponse, error)
}

type sNACServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSNACServiceClient(cc grpc.ClientConnInterface) SNACServiceClient {
	return &sNACServiceClient{cc}
}

func (c *sNACServiceClient) PutDataShardNotice(ctx context.Context, in *ClientStorageRequest, opts ...grpc.CallOption) (*ClientStorageResponse, error) {
	out := new(ClientStorageResponse)
	err := c.cc.Invoke(ctx, SNACService_PutDataShardNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SNACServiceServer is the server API for SNACService service.
// All implementations must embed UnimplementedSNACServiceServer
// for forward compatibility
type SNACServiceServer interface {
	PutDataShardNotice(context.Context, *ClientStorageRequest) (*ClientStorageResponse, error)
	mustEmbedUnimplementedSNACServiceServer()
}

// UnimplementedSNACServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSNACServiceServer struct {
}

func (UnimplementedSNACServiceServer) PutDataShardNotice(context.Context, *ClientStorageRequest) (*ClientStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutDataShardNotice not implemented")
}
func (UnimplementedSNACServiceServer) mustEmbedUnimplementedSNACServiceServer() {}

// UnsafeSNACServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SNACServiceServer will
// result in compilation errors.
type UnsafeSNACServiceServer interface {
	mustEmbedUnimplementedSNACServiceServer()
}

func RegisterSNACServiceServer(s grpc.ServiceRegistrar, srv SNACServiceServer) {
	s.RegisterService(&SNACService_ServiceDesc, srv)
}

func _SNACService_PutDataShardNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SNACServiceServer).PutDataShardNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SNACService_PutDataShardNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SNACServiceServer).PutDataShardNotice(ctx, req.(*ClientStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SNACService_ServiceDesc is the grpc.ServiceDesc for SNACService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SNACService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SNACService",
	HandlerType: (*SNACServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutDataShardNotice",
			Handler:    _SNACService_PutDataShardNotice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ac_sn.proto",
}

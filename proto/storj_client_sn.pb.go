// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v5.26.1
// source: storj_client_sn.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Int32ArraySN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []int32 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *Int32ArraySN) Reset() {
	*x = Int32ArraySN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_client_sn_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int32ArraySN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32ArraySN) ProtoMessage() {}

func (x *Int32ArraySN) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_sn_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32ArraySN.ProtoReflect.Descriptor instead.
func (*Int32ArraySN) Descriptor() ([]byte, []int) {
	return file_storj_client_sn_proto_rawDescGZIP(), []int{0}
}

func (x *Int32ArraySN) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// 客户端发起的向存储节点放置数据分片的请求
type StorjPutFRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     string          `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`                             //客户端ID
	Filename     string          `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`                             //待存储的文件名
	Repno        int32           `protobuf:"varint,3,opt,name=repno,proto3" json:"repno,omitempty"`                                  //文件副本号
	DataShards   []*Int32ArraySN `protobuf:"bytes,4,rep,name=dataShards,proto3" json:"dataShards,omitempty"`                         //序列化后的数据分片
	MerkleLeaves [][]byte        `protobuf:"bytes,5,rep,name=merkle_leaves,json=merkleLeaves,proto3" json:"merkle_leaves,omitempty"` //所有叶子节点
}

func (x *StorjPutFRequest) Reset() {
	*x = StorjPutFRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_client_sn_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjPutFRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjPutFRequest) ProtoMessage() {}

func (x *StorjPutFRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_sn_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjPutFRequest.ProtoReflect.Descriptor instead.
func (*StorjPutFRequest) Descriptor() ([]byte, []int) {
	return file_storj_client_sn_proto_rawDescGZIP(), []int{1}
}

func (x *StorjPutFRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *StorjPutFRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjPutFRequest) GetRepno() int32 {
	if x != nil {
		return x.Repno
	}
	return 0
}

func (x *StorjPutFRequest) GetDataShards() []*Int32ArraySN {
	if x != nil {
		return x.DataShards
	}
	return nil
}

func (x *StorjPutFRequest) GetMerkleLeaves() [][]byte {
	if x != nil {
		return x.MerkleLeaves
	}
	return nil
}

// 存储节点对请求的回复
type StorjPutFResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Repno    int32  `protobuf:"varint,2,opt,name=repno,proto3" json:"repno,omitempty"`      //文件副本号
	Root     []byte `protobuf:"bytes,3,opt,name=root,proto3" json:"root,omitempty"`         //存储节点计算得到的根哈希
	Message  string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`   //是否已通过验证并存储等信息
}

func (x *StorjPutFResponse) Reset() {
	*x = StorjPutFResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_client_sn_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjPutFResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjPutFResponse) ProtoMessage() {}

func (x *StorjPutFResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_sn_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjPutFResponse.ProtoReflect.Descriptor instead.
func (*StorjPutFResponse) Descriptor() ([]byte, []int) {
	return file_storj_client_sn_proto_rawDescGZIP(), []int{2}
}

func (x *StorjPutFResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjPutFResponse) GetRepno() int32 {
	if x != nil {
		return x.Repno
	}
	return 0
}

func (x *StorjPutFResponse) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *StorjPutFResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 客户端发起的向存储节点获取数据分片的请求
type StorjGetDSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Dsno     string `protobuf:"bytes,3,opt,name=dsno,proto3" json:"dsno,omitempty"`         //请求的分片序号
}

func (x *StorjGetDSRequest) Reset() {
	*x = StorjGetDSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_client_sn_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjGetDSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjGetDSRequest) ProtoMessage() {}

func (x *StorjGetDSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_sn_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjGetDSRequest.ProtoReflect.Descriptor instead.
func (*StorjGetDSRequest) Descriptor() ([]byte, []int) {
	return file_storj_client_sn_proto_rawDescGZIP(), []int{3}
}

func (x *StorjGetDSRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *StorjGetDSRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjGetDSRequest) GetDsno() string {
	if x != nil {
		return x.Dsno
	}
	return ""
}

// 存储节点对请求的回复
type StorjGetDSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename            string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`                                                  //待存储的文件名
	DatashardSerialized []byte `protobuf:"bytes,2,opt,name=datashard_serialized,json=datashardSerialized,proto3" json:"datashard_serialized,omitempty"` //序列化后的数据分片
}

func (x *StorjGetDSResponse) Reset() {
	*x = StorjGetDSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_client_sn_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjGetDSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjGetDSResponse) ProtoMessage() {}

func (x *StorjGetDSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_sn_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjGetDSResponse.ProtoReflect.Descriptor instead.
func (*StorjGetDSResponse) Descriptor() ([]byte, []int) {
	return file_storj_client_sn_proto_rawDescGZIP(), []int{4}
}

func (x *StorjGetDSResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjGetDSResponse) GetDatashardSerialized() []byte {
	if x != nil {
		return x.DatashardSerialized
	}
	return nil
}

// 客户端发起的向存储节点更新数据分片的请求
type StorjUpdDSsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId             string   `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`                                                     //客户端ID
	Filename             string   `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`                                                     //待更新的文件名
	Dsnos                []string `protobuf:"bytes,3,rep,name=dsnos,proto3" json:"dsnos,omitempty"`                                                           //文件分片的序号，数据分片为d-0,d-1,...，校验分片为p-0,p-1,...
	DatashardsSerialized [][]byte `protobuf:"bytes,4,rep,name=datashards_serialized,json=datashardsSerialized,proto3" json:"datashards_serialized,omitempty"` //序列化后的数据分片
}

func (x *StorjUpdDSsRequest) Reset() {
	*x = StorjUpdDSsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_client_sn_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjUpdDSsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjUpdDSsRequest) ProtoMessage() {}

func (x *StorjUpdDSsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_sn_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjUpdDSsRequest.ProtoReflect.Descriptor instead.
func (*StorjUpdDSsRequest) Descriptor() ([]byte, []int) {
	return file_storj_client_sn_proto_rawDescGZIP(), []int{5}
}

func (x *StorjUpdDSsRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *StorjUpdDSsRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjUpdDSsRequest) GetDsnos() []string {
	if x != nil {
		return x.Dsnos
	}
	return nil
}

func (x *StorjUpdDSsRequest) GetDatashardsSerialized() [][]byte {
	if x != nil {
		return x.DatashardsSerialized
	}
	return nil
}

// 存储节点对请求的回复
type StorjUpdDSsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string   `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"` //待更新的文件名
	Dsnos    []string `protobuf:"bytes,2,rep,name=dsnos,proto3" json:"dsnos,omitempty"`       //待更新的分片序号
	Message  string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`   //是否已通过验证并完成更新等信息
}

func (x *StorjUpdDSsResponse) Reset() {
	*x = StorjUpdDSsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_client_sn_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjUpdDSsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjUpdDSsResponse) ProtoMessage() {}

func (x *StorjUpdDSsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_sn_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjUpdDSsResponse.ProtoReflect.Descriptor instead.
func (*StorjUpdDSsResponse) Descriptor() ([]byte, []int) {
	return file_storj_client_sn_proto_rawDescGZIP(), []int{6}
}

func (x *StorjUpdDSsResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjUpdDSsResponse) GetDsnos() []string {
	if x != nil {
		return x.Dsnos
	}
	return nil
}

func (x *StorjUpdDSsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 客户端发起的向存储节点放置校验分片增量的请求
type StorjPutIPSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId             string   `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`                                                     //客户端ID
	Filename             string   `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`                                                     //待存储的文件名
	Psno                 string   `protobuf:"bytes,3,opt,name=psno,proto3" json:"psno,omitempty"`                                                             //校验分片的序号
	DatashardsSerialized [][]byte `protobuf:"bytes,4,rep,name=datashards_serialized,json=datashardsSerialized,proto3" json:"datashards_serialized,omitempty"` //序列化后的校验分片增量
	Randomnum            int32    `protobuf:"varint,5,opt,name=randomnum,proto3" json:"randomnum,omitempty"`                                                  //一个随机数，用于生成存储证明
}

func (x *StorjPutIPSRequest) Reset() {
	*x = StorjPutIPSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_client_sn_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjPutIPSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjPutIPSRequest) ProtoMessage() {}

func (x *StorjPutIPSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_sn_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjPutIPSRequest.ProtoReflect.Descriptor instead.
func (*StorjPutIPSRequest) Descriptor() ([]byte, []int) {
	return file_storj_client_sn_proto_rawDescGZIP(), []int{7}
}

func (x *StorjPutIPSRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *StorjPutIPSRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjPutIPSRequest) GetPsno() string {
	if x != nil {
		return x.Psno
	}
	return ""
}

func (x *StorjPutIPSRequest) GetDatashardsSerialized() [][]byte {
	if x != nil {
		return x.DatashardsSerialized
	}
	return nil
}

func (x *StorjPutIPSRequest) GetRandomnum() int32 {
	if x != nil {
		return x.Randomnum
	}
	return 0
}

// 存储节点对请求的回复
type StorjPutIPSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename      string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`                                //文件名
	Psno          string `protobuf:"bytes,2,opt,name=psno,proto3" json:"psno,omitempty"`                                        //已更新的校验分片序号
	PosSerialized []byte `protobuf:"bytes,3,opt,name=pos_serialized,json=posSerialized,proto3" json:"pos_serialized,omitempty"` //序列化后的校验块存储证明
}

func (x *StorjPutIPSResponse) Reset() {
	*x = StorjPutIPSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_client_sn_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjPutIPSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjPutIPSResponse) ProtoMessage() {}

func (x *StorjPutIPSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_sn_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjPutIPSResponse.ProtoReflect.Descriptor instead.
func (*StorjPutIPSResponse) Descriptor() ([]byte, []int) {
	return file_storj_client_sn_proto_rawDescGZIP(), []int{8}
}

func (x *StorjPutIPSResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjPutIPSResponse) GetPsno() string {
	if x != nil {
		return x.Psno
	}
	return ""
}

func (x *StorjPutIPSResponse) GetPosSerialized() []byte {
	if x != nil {
		return x.PosSerialized
	}
	return nil
}

var File_storj_client_sn_proto protoreflect.FileDescriptor

var file_storj_client_sn_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x6a, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x26,
	0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x4e, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x6a,
	0x50, 0x75, 0x74, 0x46, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6e, 0x6f, 0x12, 0x33, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x53, 0x4e, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x73, 0x22, 0x73, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x50, 0x75, 0x74, 0x46,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6e, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f,
	0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5f, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x72,
	0x6a, 0x47, 0x65, 0x74, 0x44, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x73, 0x6e, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x73, 0x6e, 0x6f, 0x22, 0x63, 0x0a, 0x12, 0x53, 0x74, 0x6f,
	0x72, 0x6a, 0x47, 0x65, 0x74, 0x44, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x22, 0x97,
	0x01, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x55, 0x70, 0x64, 0x44, 0x53, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x73, 0x6e, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x64, 0x73,
	0x6e, 0x6f, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x64, 0x61, 0x74, 0x61, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x14, 0x64, 0x61, 0x74, 0x61, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x22, 0x61, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72,
	0x6a, 0x55, 0x70, 0x64, 0x44, 0x53, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x73, 0x6e, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x64, 0x73, 0x6e, 0x6f,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x12,
	0x53, 0x74, 0x6f, 0x72, 0x6a, 0x50, 0x75, 0x74, 0x49, 0x50, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x73,
	0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x73, 0x6e, 0x6f, 0x12, 0x33,
	0x0a, 0x15, 0x64, 0x61, 0x74, 0x61, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x14, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6e, 0x75, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6e, 0x75,
	0x6d, 0x22, 0x6c, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x50, 0x75, 0x74, 0x49, 0x50, 0x53,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x73, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x73, 0x6e, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x70, 0x6f, 0x73, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x32,
	0xbf, 0x02, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x53, 0x4e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x50, 0x75, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a,
	0x50, 0x75, 0x74, 0x46, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x50, 0x75, 0x74, 0x46, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x47, 0x65, 0x74, 0x44, 0x53, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x6a, 0x47, 0x65, 0x74, 0x44, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4e, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x55, 0x70, 0x64, 0x44, 0x53, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x6a, 0x55, 0x70, 0x64, 0x44, 0x53, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x50, 0x0a, 0x17, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x63, 0x50, 0x61,
	0x72, 0x69, 0x74, 0x79, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x50, 0x75, 0x74, 0x49, 0x50, 0x53, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x6a, 0x50, 0x75, 0x74, 0x49, 0x50, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_storj_client_sn_proto_rawDescOnce sync.Once
	file_storj_client_sn_proto_rawDescData = file_storj_client_sn_proto_rawDesc
)

func file_storj_client_sn_proto_rawDescGZIP() []byte {
	file_storj_client_sn_proto_rawDescOnce.Do(func() {
		file_storj_client_sn_proto_rawDescData = protoimpl.X.CompressGZIP(file_storj_client_sn_proto_rawDescData)
	})
	return file_storj_client_sn_proto_rawDescData
}

var file_storj_client_sn_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_storj_client_sn_proto_goTypes = []interface{}{
	(*Int32ArraySN)(nil),        // 0: proto.Int32ArraySN
	(*StorjPutFRequest)(nil),    // 1: proto.StorjPutFRequest
	(*StorjPutFResponse)(nil),   // 2: proto.StorjPutFResponse
	(*StorjGetDSRequest)(nil),   // 3: proto.StorjGetDSRequest
	(*StorjGetDSResponse)(nil),  // 4: proto.StorjGetDSResponse
	(*StorjUpdDSsRequest)(nil),  // 5: proto.StorjUpdDSsRequest
	(*StorjUpdDSsResponse)(nil), // 6: proto.StorjUpdDSsResponse
	(*StorjPutIPSRequest)(nil),  // 7: proto.StorjPutIPSRequest
	(*StorjPutIPSResponse)(nil), // 8: proto.StorjPutIPSResponse
}
var file_storj_client_sn_proto_depIdxs = []int32{
	0, // 0: proto.StorjPutFRequest.dataShards:type_name -> proto.Int32ArraySN
	1, // 1: proto.StorjSNService.StorjPutFile:input_type -> proto.StorjPutFRequest
	3, // 2: proto.StorjSNService.StorjGetDataShard:input_type -> proto.StorjGetDSRequest
	5, // 3: proto.StorjSNService.StorjUpdateDataShards:input_type -> proto.StorjUpdDSsRequest
	7, // 4: proto.StorjSNService.StorjPutIncParityShards:input_type -> proto.StorjPutIPSRequest
	2, // 5: proto.StorjSNService.StorjPutFile:output_type -> proto.StorjPutFResponse
	4, // 6: proto.StorjSNService.StorjGetDataShard:output_type -> proto.StorjGetDSResponse
	6, // 7: proto.StorjSNService.StorjUpdateDataShards:output_type -> proto.StorjUpdDSsResponse
	8, // 8: proto.StorjSNService.StorjPutIncParityShards:output_type -> proto.StorjPutIPSResponse
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_storj_client_sn_proto_init() }
func file_storj_client_sn_proto_init() {
	if File_storj_client_sn_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_storj_client_sn_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int32ArraySN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_client_sn_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjPutFRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_client_sn_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjPutFResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_client_sn_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjGetDSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_client_sn_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjGetDSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_client_sn_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjUpdDSsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_client_sn_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjUpdDSsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_client_sn_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjPutIPSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_client_sn_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjPutIPSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_storj_client_sn_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_storj_client_sn_proto_goTypes,
		DependencyIndexes: file_storj_client_sn_proto_depIdxs,
		MessageInfos:      file_storj_client_sn_proto_msgTypes,
	}.Build()
	File_storj_client_sn_proto = out.File
	file_storj_client_sn_proto_rawDesc = nil
	file_storj_client_sn_proto_goTypes = nil
	file_storj_client_sn_proto_depIdxs = nil
}

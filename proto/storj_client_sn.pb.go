// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.26.1
// source: storj_client_sn.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Int32ArraySN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []int32 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *Int32ArraySN) Reset() {
	*x = Int32ArraySN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_client_sn_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int32ArraySN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32ArraySN) ProtoMessage() {}

func (x *Int32ArraySN) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_sn_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32ArraySN.ProtoReflect.Descriptor instead.
func (*Int32ArraySN) Descriptor() ([]byte, []int) {
	return file_storj_client_sn_proto_rawDescGZIP(), []int{0}
}

func (x *Int32ArraySN) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// 客户端发起的向存储节点放置数据分片的请求
type StorjPutFRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     string          `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`                             //客户端ID
	Filename     string          `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`                             //待存储的文件名
	Repno        int32           `protobuf:"varint,3,opt,name=repno,proto3" json:"repno,omitempty"`                                  //文件副本号
	Version      int32           `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`                              //文件版本号
	DataShards   []*Int32ArraySN `protobuf:"bytes,5,rep,name=dataShards,proto3" json:"dataShards,omitempty"`                         //序列化后的数据分片
	MerkleLeaves [][]byte        `protobuf:"bytes,6,rep,name=merkle_leaves,json=merkleLeaves,proto3" json:"merkle_leaves,omitempty"` //所有叶子节点
}

func (x *StorjPutFRequest) Reset() {
	*x = StorjPutFRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_client_sn_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjPutFRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjPutFRequest) ProtoMessage() {}

func (x *StorjPutFRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_sn_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjPutFRequest.ProtoReflect.Descriptor instead.
func (*StorjPutFRequest) Descriptor() ([]byte, []int) {
	return file_storj_client_sn_proto_rawDescGZIP(), []int{1}
}

func (x *StorjPutFRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *StorjPutFRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjPutFRequest) GetRepno() int32 {
	if x != nil {
		return x.Repno
	}
	return 0
}

func (x *StorjPutFRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *StorjPutFRequest) GetDataShards() []*Int32ArraySN {
	if x != nil {
		return x.DataShards
	}
	return nil
}

func (x *StorjPutFRequest) GetMerkleLeaves() [][]byte {
	if x != nil {
		return x.MerkleLeaves
	}
	return nil
}

// 存储节点对请求的回复
type StorjPutFResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Repno    int32  `protobuf:"varint,2,opt,name=repno,proto3" json:"repno,omitempty"`      //文件副本号
	Root     []byte `protobuf:"bytes,3,opt,name=root,proto3" json:"root,omitempty"`         //存储节点计算得到的根哈希
	Message  string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`   //是否已通过验证并存储等信息
}

func (x *StorjPutFResponse) Reset() {
	*x = StorjPutFResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_client_sn_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjPutFResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjPutFResponse) ProtoMessage() {}

func (x *StorjPutFResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_sn_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjPutFResponse.ProtoReflect.Descriptor instead.
func (*StorjPutFResponse) Descriptor() ([]byte, []int) {
	return file_storj_client_sn_proto_rawDescGZIP(), []int{2}
}

func (x *StorjPutFResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjPutFResponse) GetRepno() int32 {
	if x != nil {
		return x.Repno
	}
	return 0
}

func (x *StorjPutFResponse) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *StorjPutFResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 客户端发起的向存储节点获取数据分片的请求
type StorjGetFRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Rep      string `protobuf:"bytes,3,opt,name=rep,proto3" json:"rep,omitempty"`           //请求的副本号
	Dsnum    int32  `protobuf:"varint,4,opt,name=dsnum,proto3" json:"dsnum,omitempty"`      //数据分片的数量
}

func (x *StorjGetFRequest) Reset() {
	*x = StorjGetFRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_client_sn_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjGetFRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjGetFRequest) ProtoMessage() {}

func (x *StorjGetFRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_sn_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjGetFRequest.ProtoReflect.Descriptor instead.
func (*StorjGetFRequest) Descriptor() ([]byte, []int) {
	return file_storj_client_sn_proto_rawDescGZIP(), []int{3}
}

func (x *StorjGetFRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *StorjGetFRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjGetFRequest) GetRep() string {
	if x != nil {
		return x.Rep
	}
	return ""
}

func (x *StorjGetFRequest) GetDsnum() int32 {
	if x != nil {
		return x.Dsnum
	}
	return 0
}

// 存储节点对请求的回复
type StorjGetFResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename     string          `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`                             //文件名
	Version      int32           `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`                              //文件版本号
	DataShards   []*Int32ArraySN `protobuf:"bytes,3,rep,name=dataShards,proto3" json:"dataShards,omitempty"`                         //数据分片
	MerkleLeaves [][]byte        `protobuf:"bytes,4,rep,name=merkle_leaves,json=merkleLeaves,proto3" json:"merkle_leaves,omitempty"` //校验分片对应的叶节点
}

func (x *StorjGetFResponse) Reset() {
	*x = StorjGetFResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_client_sn_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjGetFResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjGetFResponse) ProtoMessage() {}

func (x *StorjGetFResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_sn_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjGetFResponse.ProtoReflect.Descriptor instead.
func (*StorjGetFResponse) Descriptor() ([]byte, []int) {
	return file_storj_client_sn_proto_rawDescGZIP(), []int{4}
}

func (x *StorjGetFResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjGetFResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *StorjGetFResponse) GetDataShards() []*Int32ArraySN {
	if x != nil {
		return x.DataShards
	}
	return nil
}

func (x *StorjGetFResponse) GetMerkleLeaves() [][]byte {
	if x != nil {
		return x.MerkleLeaves
	}
	return nil
}

// 客户端发起的向存储节点更新数据分片的请求
type StorjUpdFRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     string          `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`                             //客户端ID
	Filename     string          `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`                             //待更新的文件名
	Rep          int32           `protobuf:"varint,3,opt,name=rep,proto3" json:"rep,omitempty"`                                      //待更新的文件副本号
	DataShards   []*Int32ArraySN `protobuf:"bytes,4,rep,name=dataShards,proto3" json:"dataShards,omitempty"`                         //序列化后的数据分片
	MerkleLeaves [][]byte        `protobuf:"bytes,5,rep,name=merkle_leaves,json=merkleLeaves,proto3" json:"merkle_leaves,omitempty"` //所有叶子节点
}

func (x *StorjUpdFRequest) Reset() {
	*x = StorjUpdFRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_client_sn_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjUpdFRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjUpdFRequest) ProtoMessage() {}

func (x *StorjUpdFRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_sn_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjUpdFRequest.ProtoReflect.Descriptor instead.
func (*StorjUpdFRequest) Descriptor() ([]byte, []int) {
	return file_storj_client_sn_proto_rawDescGZIP(), []int{5}
}

func (x *StorjUpdFRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *StorjUpdFRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjUpdFRequest) GetRep() int32 {
	if x != nil {
		return x.Rep
	}
	return 0
}

func (x *StorjUpdFRequest) GetDataShards() []*Int32ArraySN {
	if x != nil {
		return x.DataShards
	}
	return nil
}

func (x *StorjUpdFRequest) GetMerkleLeaves() [][]byte {
	if x != nil {
		return x.MerkleLeaves
	}
	return nil
}

// 存储节点对请求的回复
type StorjUpdFResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Repno    int32  `protobuf:"varint,2,opt,name=repno,proto3" json:"repno,omitempty"`      //文件副本号
	Root     []byte `protobuf:"bytes,3,opt,name=root,proto3" json:"root,omitempty"`         //存储节点计算得到的根哈希
	Message  string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`   //是否已通过验证并存储等信息
}

func (x *StorjUpdFResponse) Reset() {
	*x = StorjUpdFResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_client_sn_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjUpdFResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjUpdFResponse) ProtoMessage() {}

func (x *StorjUpdFResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_sn_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjUpdFResponse.ProtoReflect.Descriptor instead.
func (*StorjUpdFResponse) Descriptor() ([]byte, []int) {
	return file_storj_client_sn_proto_rawDescGZIP(), []int{6}
}

func (x *StorjUpdFResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjUpdFResponse) GetRepno() int32 {
	if x != nil {
		return x.Repno
	}
	return 0
}

func (x *StorjUpdFResponse) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *StorjUpdFResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_storj_client_sn_proto protoreflect.FileDescriptor

var file_storj_client_sn_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x6a, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x26,
	0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x4e, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x6a,
	0x50, 0x75, 0x74, 0x46, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x4e, 0x52, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x6b,
	0x6c, 0x65, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0c, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x22, 0x73, 0x0a,
	0x11, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x50, 0x75, 0x74, 0x46, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x65, 0x70, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72,
	0x65, 0x70, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x72, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x47, 0x65, 0x74, 0x46, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x73, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x64, 0x73, 0x6e, 0x75, 0x6d, 0x22, 0xa3, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x72, 0x6a,
	0x47, 0x65, 0x74, 0x46, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x4e, 0x52, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x6b, 0x6c,
	0x65, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c,
	0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x22, 0xb6, 0x01, 0x0a,
	0x10, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x55, 0x70, 0x64, 0x46, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x70, 0x12, 0x33, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x53, 0x4e, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x4c,
	0x65, 0x61, 0x76, 0x65, 0x73, 0x22, 0x73, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x55, 0x70,
	0x64, 0x46, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xdc, 0x01, 0x0a, 0x0e, 0x53,
	0x74, 0x6f, 0x72, 0x6a, 0x53, 0x4e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a,
	0x0c, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x50, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x50, 0x75, 0x74, 0x46, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x6a, 0x50, 0x75, 0x74, 0x46, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x47, 0x65,
	0x74, 0x46, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x47, 0x65, 0x74, 0x46, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x6a, 0x55, 0x70, 0x64, 0x46, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x55, 0x70, 0x64,
	0x46, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_storj_client_sn_proto_rawDescOnce sync.Once
	file_storj_client_sn_proto_rawDescData = file_storj_client_sn_proto_rawDesc
)

func file_storj_client_sn_proto_rawDescGZIP() []byte {
	file_storj_client_sn_proto_rawDescOnce.Do(func() {
		file_storj_client_sn_proto_rawDescData = protoimpl.X.CompressGZIP(file_storj_client_sn_proto_rawDescData)
	})
	return file_storj_client_sn_proto_rawDescData
}

var file_storj_client_sn_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_storj_client_sn_proto_goTypes = []any{
	(*Int32ArraySN)(nil),      // 0: proto.Int32ArraySN
	(*StorjPutFRequest)(nil),  // 1: proto.StorjPutFRequest
	(*StorjPutFResponse)(nil), // 2: proto.StorjPutFResponse
	(*StorjGetFRequest)(nil),  // 3: proto.StorjGetFRequest
	(*StorjGetFResponse)(nil), // 4: proto.StorjGetFResponse
	(*StorjUpdFRequest)(nil),  // 5: proto.StorjUpdFRequest
	(*StorjUpdFResponse)(nil), // 6: proto.StorjUpdFResponse
}
var file_storj_client_sn_proto_depIdxs = []int32{
	0, // 0: proto.StorjPutFRequest.dataShards:type_name -> proto.Int32ArraySN
	0, // 1: proto.StorjGetFResponse.dataShards:type_name -> proto.Int32ArraySN
	0, // 2: proto.StorjUpdFRequest.dataShards:type_name -> proto.Int32ArraySN
	1, // 3: proto.StorjSNService.StorjPutFile:input_type -> proto.StorjPutFRequest
	3, // 4: proto.StorjSNService.StorjGetFile:input_type -> proto.StorjGetFRequest
	5, // 5: proto.StorjSNService.StorjUpdateFile:input_type -> proto.StorjUpdFRequest
	2, // 6: proto.StorjSNService.StorjPutFile:output_type -> proto.StorjPutFResponse
	4, // 7: proto.StorjSNService.StorjGetFile:output_type -> proto.StorjGetFResponse
	6, // 8: proto.StorjSNService.StorjUpdateFile:output_type -> proto.StorjUpdFResponse
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_storj_client_sn_proto_init() }
func file_storj_client_sn_proto_init() {
	if File_storj_client_sn_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_storj_client_sn_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Int32ArraySN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_client_sn_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*StorjPutFRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_client_sn_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*StorjPutFResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_client_sn_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*StorjGetFRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_client_sn_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*StorjGetFResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_client_sn_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*StorjUpdFRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_client_sn_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*StorjUpdFResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_storj_client_sn_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_storj_client_sn_proto_goTypes,
		DependencyIndexes: file_storj_client_sn_proto_depIdxs,
		MessageInfos:      file_storj_client_sn_proto_msgTypes,
	}.Build()
	File_storj_client_sn_proto = out.File
	file_storj_client_sn_proto_rawDesc = nil
	file_storj_client_sn_proto_goTypes = nil
	file_storj_client_sn_proto_depIdxs = nil
}

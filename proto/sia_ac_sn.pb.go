// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.26.1
// source: sia_ac_sn.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 客户端发起的存储请求
type SiaClientStorageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Dsno          string                 `protobuf:"bytes,3,opt,name=dsno,proto3" json:"dsno,omitempty"`         //该存储节点待存储的分片号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SiaClientStorageRequest) Reset() {
	*x = SiaClientStorageRequest{}
	mi := &file_sia_ac_sn_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SiaClientStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiaClientStorageRequest) ProtoMessage() {}

func (x *SiaClientStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sia_ac_sn_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiaClientStorageRequest.ProtoReflect.Descriptor instead.
func (*SiaClientStorageRequest) Descriptor() ([]byte, []int) {
	return file_sia_ac_sn_proto_rawDescGZIP(), []int{0}
}

func (x *SiaClientStorageRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SiaClientStorageRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *SiaClientStorageRequest) GetDsno() string {
	if x != nil {
		return x.Dsno
	}
	return ""
}

// 存储节点对存储请求的回复
type SiaClientStorageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`     //客户端ID
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`     //待存储的文件名
	Dsno          string                 `protobuf:"bytes,3,opt,name=dsno,proto3" json:"dsno,omitempty"`             //该存储节点已存储的分片号
	Version       int32                  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`      //分片对应的版本号
	Merklepath    [][]byte               `protobuf:"bytes,5,rep,name=merklepath,proto3" json:"merklepath,omitempty"` //存储节点对存储分片的可验证存储路径
	Root          []byte                 `protobuf:"bytes,6,opt,name=root,proto3" json:"root,omitempty"`             //存储分片所在默克尔树的根节点哈希
	Index         int32                  `protobuf:"varint,7,opt,name=index,proto3" json:"index,omitempty"`          //存储分片所在叶子列表中的索引
	Timestamp     int32                  `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`  //生成根节点哈希值的时间戳
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SiaClientStorageResponse) Reset() {
	*x = SiaClientStorageResponse{}
	mi := &file_sia_ac_sn_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SiaClientStorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiaClientStorageResponse) ProtoMessage() {}

func (x *SiaClientStorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sia_ac_sn_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiaClientStorageResponse.ProtoReflect.Descriptor instead.
func (*SiaClientStorageResponse) Descriptor() ([]byte, []int) {
	return file_sia_ac_sn_proto_rawDescGZIP(), []int{1}
}

func (x *SiaClientStorageResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SiaClientStorageResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *SiaClientStorageResponse) GetDsno() string {
	if x != nil {
		return x.Dsno
	}
	return ""
}

func (x *SiaClientStorageResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SiaClientStorageResponse) GetMerklepath() [][]byte {
	if x != nil {
		return x.Merklepath
	}
	return nil
}

func (x *SiaClientStorageResponse) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *SiaClientStorageResponse) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SiaClientStorageResponse) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// 客户端发起的更新数据分片请求
type SiaClientUpdDSRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Dsno          string                 `protobuf:"bytes,3,opt,name=dsno,proto3" json:"dsno,omitempty"`         //该存储节点待更新的分片号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SiaClientUpdDSRequest) Reset() {
	*x = SiaClientUpdDSRequest{}
	mi := &file_sia_ac_sn_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SiaClientUpdDSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiaClientUpdDSRequest) ProtoMessage() {}

func (x *SiaClientUpdDSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sia_ac_sn_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiaClientUpdDSRequest.ProtoReflect.Descriptor instead.
func (*SiaClientUpdDSRequest) Descriptor() ([]byte, []int) {
	return file_sia_ac_sn_proto_rawDescGZIP(), []int{2}
}

func (x *SiaClientUpdDSRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SiaClientUpdDSRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *SiaClientUpdDSRequest) GetDsno() string {
	if x != nil {
		return x.Dsno
	}
	return ""
}

// 存储节点对更新数据分片请求的回复
type SiaClientUpdDSResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`     //客户端ID
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`     //待存储的文件名
	Dsno          string                 `protobuf:"bytes,3,opt,name=dsno,proto3" json:"dsno,omitempty"`             //该存储节点已更新的分片号
	Version       int32                  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`      //分片对应的版本号
	Merklepath    [][]byte               `protobuf:"bytes,5,rep,name=merklepath,proto3" json:"merklepath,omitempty"` //存储节点对存储分片的可验证存储路径
	Root          []byte                 `protobuf:"bytes,6,opt,name=root,proto3" json:"root,omitempty"`             //存储分片所在默克尔树的根节点哈希
	Index         int32                  `protobuf:"varint,7,opt,name=index,proto3" json:"index,omitempty"`          //存储分片所在叶子列表中的索引
	Timestamp     int32                  `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`  //生成根节点哈希值的时间戳
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SiaClientUpdDSResponse) Reset() {
	*x = SiaClientUpdDSResponse{}
	mi := &file_sia_ac_sn_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SiaClientUpdDSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiaClientUpdDSResponse) ProtoMessage() {}

func (x *SiaClientUpdDSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sia_ac_sn_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiaClientUpdDSResponse.ProtoReflect.Descriptor instead.
func (*SiaClientUpdDSResponse) Descriptor() ([]byte, []int) {
	return file_sia_ac_sn_proto_rawDescGZIP(), []int{3}
}

func (x *SiaClientUpdDSResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SiaClientUpdDSResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *SiaClientUpdDSResponse) GetDsno() string {
	if x != nil {
		return x.Dsno
	}
	return ""
}

func (x *SiaClientUpdDSResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SiaClientUpdDSResponse) GetMerklepath() [][]byte {
	if x != nil {
		return x.Merklepath
	}
	return nil
}

func (x *SiaClientUpdDSResponse) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *SiaClientUpdDSResponse) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SiaClientUpdDSResponse) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// 审计方发起的预审计请求
type SiaPASNRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Auditno       string                 `protobuf:"bytes,1,opt,name=auditno,proto3" json:"auditno,omitempty"`                                                                                //审计代号:audit1,audit2...
	Snid          string                 `protobuf:"bytes,2,opt,name=snid,proto3" json:"snid,omitempty"`                                                                                      //请求的存储节点id
	Dsversion     map[string]int32       `protobuf:"bytes,3,rep,name=dsversion,proto3" json:"dsversion,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` //挑战的分片及其版本，key:clientId-filename-dsno,value:版本号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SiaPASNRequest) Reset() {
	*x = SiaPASNRequest{}
	mi := &file_sia_ac_sn_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SiaPASNRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiaPASNRequest) ProtoMessage() {}

func (x *SiaPASNRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sia_ac_sn_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiaPASNRequest.ProtoReflect.Descriptor instead.
func (*SiaPASNRequest) Descriptor() ([]byte, []int) {
	return file_sia_ac_sn_proto_rawDescGZIP(), []int{4}
}

func (x *SiaPASNRequest) GetAuditno() string {
	if x != nil {
		return x.Auditno
	}
	return ""
}

func (x *SiaPASNRequest) GetSnid() string {
	if x != nil {
		return x.Snid
	}
	return ""
}

func (x *SiaPASNRequest) GetDsversion() map[string]int32 {
	if x != nil {
		return x.Dsversion
	}
	return nil
}

// 存储节点对审计方预审计请求的回复
type SiaPASNResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Isready       bool                   `protobuf:"varint,1,opt,name=isready,proto3" json:"isready,omitempty"`                                                                               //是否准备好审计，即可以预留快照
	Dsversion     map[string]int32       `protobuf:"bytes,2,rep,name=dsversion,proto3" json:"dsversion,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` //如果不能预留，告知审计方哪些分片的版本已过时，否则为空
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SiaPASNResponse) Reset() {
	*x = SiaPASNResponse{}
	mi := &file_sia_ac_sn_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SiaPASNResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiaPASNResponse) ProtoMessage() {}

func (x *SiaPASNResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sia_ac_sn_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiaPASNResponse.ProtoReflect.Descriptor instead.
func (*SiaPASNResponse) Descriptor() ([]byte, []int) {
	return file_sia_ac_sn_proto_rawDescGZIP(), []int{5}
}

func (x *SiaPASNResponse) GetIsready() bool {
	if x != nil {
		return x.Isready
	}
	return false
}

func (x *SiaPASNResponse) GetDsversion() map[string]int32 {
	if x != nil {
		return x.Dsversion
	}
	return nil
}

// 获取存储节点上所有存储分片的聚合存储证明的请求
type SiaGAPSNRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Auditno       string                 `protobuf:"bytes,1,opt,name=auditno,proto3" json:"auditno,omitempty"` //审计代号
	Cidfni        string                 `protobuf:"bytes,2,opt,name=cidfni,proto3" json:"cidfni,omitempty"`   //审计分片
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SiaGAPSNRequest) Reset() {
	*x = SiaGAPSNRequest{}
	mi := &file_sia_ac_sn_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SiaGAPSNRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiaGAPSNRequest) ProtoMessage() {}

func (x *SiaGAPSNRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sia_ac_sn_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiaGAPSNRequest.ProtoReflect.Descriptor instead.
func (*SiaGAPSNRequest) Descriptor() ([]byte, []int) {
	return file_sia_ac_sn_proto_rawDescGZIP(), []int{6}
}

func (x *SiaGAPSNRequest) GetAuditno() string {
	if x != nil {
		return x.Auditno
	}
	return ""
}

func (x *SiaGAPSNRequest) GetCidfni() string {
	if x != nil {
		return x.Cidfni
	}
	return ""
}

// 存储节点对所有存储分片的聚合存储证明请求的回复
type SiaGAPSNResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cidfni        string                 `protobuf:"bytes,1,opt,name=cidfni,proto3" json:"cidfni,omitempty"`                //分片id
	Data          []int32                `protobuf:"varint,2,rep,packed,name=data,proto3" json:"data,omitempty"`            //分片数据
	Version       int32                  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`             //分片对应的版本号
	Roothash      []byte                 `protobuf:"bytes,4,opt,name=roothash,proto3" json:"roothash,omitempty"`            //根节点哈希
	Roottimestamp int32                  `protobuf:"varint,5,opt,name=roottimestamp,proto3" json:"roottimestamp,omitempty"` //根节点哈希时间戳
	Path          [][]byte               `protobuf:"bytes,6,rep,name=path,proto3" json:"path,omitempty"`                    //验证路径
	Index         int32                  `protobuf:"varint,7,opt,name=index,proto3" json:"index,omitempty"`                 //分片哈希索引号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SiaGAPSNResponse) Reset() {
	*x = SiaGAPSNResponse{}
	mi := &file_sia_ac_sn_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SiaGAPSNResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiaGAPSNResponse) ProtoMessage() {}

func (x *SiaGAPSNResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sia_ac_sn_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiaGAPSNResponse.ProtoReflect.Descriptor instead.
func (*SiaGAPSNResponse) Descriptor() ([]byte, []int) {
	return file_sia_ac_sn_proto_rawDescGZIP(), []int{7}
}

func (x *SiaGAPSNResponse) GetCidfni() string {
	if x != nil {
		return x.Cidfni
	}
	return ""
}

func (x *SiaGAPSNResponse) GetData() []int32 {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SiaGAPSNResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SiaGAPSNResponse) GetRoothash() []byte {
	if x != nil {
		return x.Roothash
	}
	return nil
}

func (x *SiaGAPSNResponse) GetRoottimestamp() int32 {
	if x != nil {
		return x.Roottimestamp
	}
	return 0
}

func (x *SiaGAPSNResponse) GetPath() [][]byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *SiaGAPSNResponse) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

var File_sia_ac_sn_proto protoreflect.FileDescriptor

const file_sia_ac_sn_proto_rawDesc = "" +
	"\n" +
	"\x0fsia_ac_sn.proto\x12\x05proto\"e\n" +
	"\x17SiaClientStorageRequest\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12\x12\n" +
	"\x04dsno\x18\x03 \x01(\tR\x04dsno\"\xe8\x01\n" +
	"\x18SiaClientStorageResponse\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12\x12\n" +
	"\x04dsno\x18\x03 \x01(\tR\x04dsno\x12\x18\n" +
	"\aversion\x18\x04 \x01(\x05R\aversion\x12\x1e\n" +
	"\n" +
	"merklepath\x18\x05 \x03(\fR\n" +
	"merklepath\x12\x12\n" +
	"\x04root\x18\x06 \x01(\fR\x04root\x12\x14\n" +
	"\x05index\x18\a \x01(\x05R\x05index\x12\x1c\n" +
	"\ttimestamp\x18\b \x01(\x05R\ttimestamp\"c\n" +
	"\x15SiaClientUpdDSRequest\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12\x12\n" +
	"\x04dsno\x18\x03 \x01(\tR\x04dsno\"\xe6\x01\n" +
	"\x16SiaClientUpdDSResponse\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12\x12\n" +
	"\x04dsno\x18\x03 \x01(\tR\x04dsno\x12\x18\n" +
	"\aversion\x18\x04 \x01(\x05R\aversion\x12\x1e\n" +
	"\n" +
	"merklepath\x18\x05 \x03(\fR\n" +
	"merklepath\x12\x12\n" +
	"\x04root\x18\x06 \x01(\fR\x04root\x12\x14\n" +
	"\x05index\x18\a \x01(\x05R\x05index\x12\x1c\n" +
	"\ttimestamp\x18\b \x01(\x05R\ttimestamp\"\xc0\x01\n" +
	"\x0eSiaPASNRequest\x12\x18\n" +
	"\aauditno\x18\x01 \x01(\tR\aauditno\x12\x12\n" +
	"\x04snid\x18\x02 \x01(\tR\x04snid\x12B\n" +
	"\tdsversion\x18\x03 \x03(\v2$.proto.SiaPASNRequest.DsversionEntryR\tdsversion\x1a<\n" +
	"\x0eDsversionEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xae\x01\n" +
	"\x0fSiaPASNResponse\x12\x18\n" +
	"\aisready\x18\x01 \x01(\bR\aisready\x12C\n" +
	"\tdsversion\x18\x02 \x03(\v2%.proto.SiaPASNResponse.DsversionEntryR\tdsversion\x1a<\n" +
	"\x0eDsversionEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"C\n" +
	"\x0fSiaGAPSNRequest\x12\x18\n" +
	"\aauditno\x18\x01 \x01(\tR\aauditno\x12\x16\n" +
	"\x06cidfni\x18\x02 \x01(\tR\x06cidfni\"\xc4\x01\n" +
	"\x10SiaGAPSNResponse\x12\x16\n" +
	"\x06cidfni\x18\x01 \x01(\tR\x06cidfni\x12\x12\n" +
	"\x04data\x18\x02 \x03(\x05R\x04data\x12\x18\n" +
	"\aversion\x18\x03 \x01(\x05R\aversion\x12\x1a\n" +
	"\broothash\x18\x04 \x01(\fR\broothash\x12$\n" +
	"\rroottimestamp\x18\x05 \x01(\x05R\rroottimestamp\x12\x12\n" +
	"\x04path\x18\x06 \x03(\fR\x04path\x12\x14\n" +
	"\x05index\x18\a \x01(\x05R\x05index2\xbe\x02\n" +
	"\x0eSiaSNACService\x12S\n" +
	"\x10SiaPutFileNotice\x12\x1e.proto.SiaClientStorageRequest\x1a\x1f.proto.SiaClientStorageResponse\x12W\n" +
	"\x18SiaUpdateDataShardNotice\x12\x1c.proto.SiaClientUpdDSRequest\x1a\x1d.proto.SiaClientUpdDSResponse\x12>\n" +
	"\rSiaPreAuditSN\x12\x15.proto.SiaPASNRequest\x1a\x16.proto.SiaPASNResponse\x12>\n" +
	"\vSiaGetPosSN\x12\x16.proto.SiaGAPSNRequest\x1a\x17.proto.SiaGAPSNResponseB\x04Z\x02./b\x06proto3"

var (
	file_sia_ac_sn_proto_rawDescOnce sync.Once
	file_sia_ac_sn_proto_rawDescData []byte
)

func file_sia_ac_sn_proto_rawDescGZIP() []byte {
	file_sia_ac_sn_proto_rawDescOnce.Do(func() {
		file_sia_ac_sn_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sia_ac_sn_proto_rawDesc), len(file_sia_ac_sn_proto_rawDesc)))
	})
	return file_sia_ac_sn_proto_rawDescData
}

var file_sia_ac_sn_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_sia_ac_sn_proto_goTypes = []any{
	(*SiaClientStorageRequest)(nil),  // 0: proto.SiaClientStorageRequest
	(*SiaClientStorageResponse)(nil), // 1: proto.SiaClientStorageResponse
	(*SiaClientUpdDSRequest)(nil),    // 2: proto.SiaClientUpdDSRequest
	(*SiaClientUpdDSResponse)(nil),   // 3: proto.SiaClientUpdDSResponse
	(*SiaPASNRequest)(nil),           // 4: proto.SiaPASNRequest
	(*SiaPASNResponse)(nil),          // 5: proto.SiaPASNResponse
	(*SiaGAPSNRequest)(nil),          // 6: proto.SiaGAPSNRequest
	(*SiaGAPSNResponse)(nil),         // 7: proto.SiaGAPSNResponse
	nil,                              // 8: proto.SiaPASNRequest.DsversionEntry
	nil,                              // 9: proto.SiaPASNResponse.DsversionEntry
}
var file_sia_ac_sn_proto_depIdxs = []int32{
	8, // 0: proto.SiaPASNRequest.dsversion:type_name -> proto.SiaPASNRequest.DsversionEntry
	9, // 1: proto.SiaPASNResponse.dsversion:type_name -> proto.SiaPASNResponse.DsversionEntry
	0, // 2: proto.SiaSNACService.SiaPutFileNotice:input_type -> proto.SiaClientStorageRequest
	2, // 3: proto.SiaSNACService.SiaUpdateDataShardNotice:input_type -> proto.SiaClientUpdDSRequest
	4, // 4: proto.SiaSNACService.SiaPreAuditSN:input_type -> proto.SiaPASNRequest
	6, // 5: proto.SiaSNACService.SiaGetPosSN:input_type -> proto.SiaGAPSNRequest
	1, // 6: proto.SiaSNACService.SiaPutFileNotice:output_type -> proto.SiaClientStorageResponse
	3, // 7: proto.SiaSNACService.SiaUpdateDataShardNotice:output_type -> proto.SiaClientUpdDSResponse
	5, // 8: proto.SiaSNACService.SiaPreAuditSN:output_type -> proto.SiaPASNResponse
	7, // 9: proto.SiaSNACService.SiaGetPosSN:output_type -> proto.SiaGAPSNResponse
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_sia_ac_sn_proto_init() }
func file_sia_ac_sn_proto_init() {
	if File_sia_ac_sn_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sia_ac_sn_proto_rawDesc), len(file_sia_ac_sn_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sia_ac_sn_proto_goTypes,
		DependencyIndexes: file_sia_ac_sn_proto_depIdxs,
		MessageInfos:      file_sia_ac_sn_proto_msgTypes,
	}.Build()
	File_sia_ac_sn_proto = out.File
	file_sia_ac_sn_proto_goTypes = nil
	file_sia_ac_sn_proto_depIdxs = nil
}

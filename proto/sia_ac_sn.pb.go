// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.26.1
// source: sia_ac_sn.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 客户端发起的存储请求
type SiaClientStorageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Dsno     string `protobuf:"bytes,3,opt,name=dsno,proto3" json:"dsno,omitempty"`         //该存储节点待存储的分片号
}

func (x *SiaClientStorageRequest) Reset() {
	*x = SiaClientStorageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sia_ac_sn_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SiaClientStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiaClientStorageRequest) ProtoMessage() {}

func (x *SiaClientStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sia_ac_sn_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiaClientStorageRequest.ProtoReflect.Descriptor instead.
func (*SiaClientStorageRequest) Descriptor() ([]byte, []int) {
	return file_sia_ac_sn_proto_rawDescGZIP(), []int{0}
}

func (x *SiaClientStorageRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SiaClientStorageRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *SiaClientStorageRequest) GetDsno() string {
	if x != nil {
		return x.Dsno
	}
	return ""
}

// 存储节点对存储请求的回复
type SiaClientStorageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId   string   `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`     //客户端ID
	Filename   string   `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`     //待存储的文件名
	Dsno       string   `protobuf:"bytes,3,opt,name=dsno,proto3" json:"dsno,omitempty"`             //该存储节点已存储的分片号
	Version    int32    `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`      //分片对应的版本号
	Merklepath [][]byte `protobuf:"bytes,5,rep,name=merklepath,proto3" json:"merklepath,omitempty"` //存储节点对存储分片的可验证存储路径
	Root       []byte   `protobuf:"bytes,6,opt,name=root,proto3" json:"root,omitempty"`             //存储分片所在默克尔树的根节点哈希
	Index      int32    `protobuf:"varint,7,opt,name=index,proto3" json:"index,omitempty"`          //存储分片所在叶子列表中的索引
	Timestamp  int32    `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`  //生成根节点哈希值的时间戳
}

func (x *SiaClientStorageResponse) Reset() {
	*x = SiaClientStorageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sia_ac_sn_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SiaClientStorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiaClientStorageResponse) ProtoMessage() {}

func (x *SiaClientStorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sia_ac_sn_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiaClientStorageResponse.ProtoReflect.Descriptor instead.
func (*SiaClientStorageResponse) Descriptor() ([]byte, []int) {
	return file_sia_ac_sn_proto_rawDescGZIP(), []int{1}
}

func (x *SiaClientStorageResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SiaClientStorageResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *SiaClientStorageResponse) GetDsno() string {
	if x != nil {
		return x.Dsno
	}
	return ""
}

func (x *SiaClientStorageResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SiaClientStorageResponse) GetMerklepath() [][]byte {
	if x != nil {
		return x.Merklepath
	}
	return nil
}

func (x *SiaClientStorageResponse) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *SiaClientStorageResponse) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SiaClientStorageResponse) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// 客户端发起的更新数据分片请求
type SiaClientUpdDSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Dsno     string `protobuf:"bytes,3,opt,name=dsno,proto3" json:"dsno,omitempty"`         //该存储节点待更新的分片号
}

func (x *SiaClientUpdDSRequest) Reset() {
	*x = SiaClientUpdDSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sia_ac_sn_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SiaClientUpdDSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiaClientUpdDSRequest) ProtoMessage() {}

func (x *SiaClientUpdDSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sia_ac_sn_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiaClientUpdDSRequest.ProtoReflect.Descriptor instead.
func (*SiaClientUpdDSRequest) Descriptor() ([]byte, []int) {
	return file_sia_ac_sn_proto_rawDescGZIP(), []int{2}
}

func (x *SiaClientUpdDSRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SiaClientUpdDSRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *SiaClientUpdDSRequest) GetDsno() string {
	if x != nil {
		return x.Dsno
	}
	return ""
}

// 存储节点对更新数据分片请求的回复
type SiaClientUpdDSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId   string   `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`     //客户端ID
	Filename   string   `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`     //待存储的文件名
	Dsno       string   `protobuf:"bytes,3,opt,name=dsno,proto3" json:"dsno,omitempty"`             //该存储节点已更新的分片号
	Version    int32    `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`      //分片对应的版本号
	Merklepath [][]byte `protobuf:"bytes,5,rep,name=merklepath,proto3" json:"merklepath,omitempty"` //存储节点对存储分片的可验证存储路径
	Root       []byte   `protobuf:"bytes,6,opt,name=root,proto3" json:"root,omitempty"`             //存储分片所在默克尔树的根节点哈希
	Index      int32    `protobuf:"varint,7,opt,name=index,proto3" json:"index,omitempty"`          //存储分片所在叶子列表中的索引
	Timestamp  int32    `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`  //生成根节点哈希值的时间戳
}

func (x *SiaClientUpdDSResponse) Reset() {
	*x = SiaClientUpdDSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sia_ac_sn_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SiaClientUpdDSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiaClientUpdDSResponse) ProtoMessage() {}

func (x *SiaClientUpdDSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sia_ac_sn_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiaClientUpdDSResponse.ProtoReflect.Descriptor instead.
func (*SiaClientUpdDSResponse) Descriptor() ([]byte, []int) {
	return file_sia_ac_sn_proto_rawDescGZIP(), []int{3}
}

func (x *SiaClientUpdDSResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SiaClientUpdDSResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *SiaClientUpdDSResponse) GetDsno() string {
	if x != nil {
		return x.Dsno
	}
	return ""
}

func (x *SiaClientUpdDSResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SiaClientUpdDSResponse) GetMerklepath() [][]byte {
	if x != nil {
		return x.Merklepath
	}
	return nil
}

func (x *SiaClientUpdDSResponse) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *SiaClientUpdDSResponse) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SiaClientUpdDSResponse) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// 审计方发起的预审计请求
type SiaPASNRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auditno   string           `protobuf:"bytes,1,opt,name=auditno,proto3" json:"auditno,omitempty"`                                                                                              //审计代号:audit1,audit2...
	Snid      string           `protobuf:"bytes,2,opt,name=snid,proto3" json:"snid,omitempty"`                                                                                                    //请求的存储节点id
	Dsversion map[string]int32 `protobuf:"bytes,3,rep,name=dsversion,proto3" json:"dsversion,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //挑战的分片及其版本，key:clientId-filename-dsno,value:版本号
}

func (x *SiaPASNRequest) Reset() {
	*x = SiaPASNRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sia_ac_sn_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SiaPASNRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiaPASNRequest) ProtoMessage() {}

func (x *SiaPASNRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sia_ac_sn_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiaPASNRequest.ProtoReflect.Descriptor instead.
func (*SiaPASNRequest) Descriptor() ([]byte, []int) {
	return file_sia_ac_sn_proto_rawDescGZIP(), []int{4}
}

func (x *SiaPASNRequest) GetAuditno() string {
	if x != nil {
		return x.Auditno
	}
	return ""
}

func (x *SiaPASNRequest) GetSnid() string {
	if x != nil {
		return x.Snid
	}
	return ""
}

func (x *SiaPASNRequest) GetDsversion() map[string]int32 {
	if x != nil {
		return x.Dsversion
	}
	return nil
}

// 存储节点对审计方预审计请求的回复
type SiaPASNResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Isready   bool             `protobuf:"varint,1,opt,name=isready,proto3" json:"isready,omitempty"`                                                                                             //是否准备好审计，即可以预留快照
	Dsversion map[string]int32 `protobuf:"bytes,2,rep,name=dsversion,proto3" json:"dsversion,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //如果不能预留，告知审计方哪些分片的版本已过时，否则为空
}

func (x *SiaPASNResponse) Reset() {
	*x = SiaPASNResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sia_ac_sn_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SiaPASNResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiaPASNResponse) ProtoMessage() {}

func (x *SiaPASNResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sia_ac_sn_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiaPASNResponse.ProtoReflect.Descriptor instead.
func (*SiaPASNResponse) Descriptor() ([]byte, []int) {
	return file_sia_ac_sn_proto_rawDescGZIP(), []int{5}
}

func (x *SiaPASNResponse) GetIsready() bool {
	if x != nil {
		return x.Isready
	}
	return false
}

func (x *SiaPASNResponse) GetDsversion() map[string]int32 {
	if x != nil {
		return x.Dsversion
	}
	return nil
}

// 获取存储节点上所有存储分片的聚合存储证明的请求
type SiaGAPSNRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auditno string `protobuf:"bytes,1,opt,name=auditno,proto3" json:"auditno,omitempty"` //审计代号
	Cidfni  string `protobuf:"bytes,2,opt,name=cidfni,proto3" json:"cidfni,omitempty"`   //审计分片
}

func (x *SiaGAPSNRequest) Reset() {
	*x = SiaGAPSNRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sia_ac_sn_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SiaGAPSNRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiaGAPSNRequest) ProtoMessage() {}

func (x *SiaGAPSNRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sia_ac_sn_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiaGAPSNRequest.ProtoReflect.Descriptor instead.
func (*SiaGAPSNRequest) Descriptor() ([]byte, []int) {
	return file_sia_ac_sn_proto_rawDescGZIP(), []int{6}
}

func (x *SiaGAPSNRequest) GetAuditno() string {
	if x != nil {
		return x.Auditno
	}
	return ""
}

func (x *SiaGAPSNRequest) GetCidfni() string {
	if x != nil {
		return x.Cidfni
	}
	return ""
}

// 存储节点对所有存储分片的聚合存储证明请求的回复
type SiaGAPSNResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cidfni        string   `protobuf:"bytes,1,opt,name=cidfni,proto3" json:"cidfni,omitempty"`                //分片id
	Data          []int32  `protobuf:"varint,2,rep,packed,name=data,proto3" json:"data,omitempty"`            //分片数据
	Version       int32    `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`             //分片对应的版本号
	Roothash      []byte   `protobuf:"bytes,4,opt,name=roothash,proto3" json:"roothash,omitempty"`            //根节点哈希
	Roottimestamp int32    `protobuf:"varint,5,opt,name=roottimestamp,proto3" json:"roottimestamp,omitempty"` //根节点哈希时间戳
	Path          [][]byte `protobuf:"bytes,6,rep,name=path,proto3" json:"path,omitempty"`                    //验证路径
	Index         int32    `protobuf:"varint,7,opt,name=index,proto3" json:"index,omitempty"`                 //分片哈希索引号
}

func (x *SiaGAPSNResponse) Reset() {
	*x = SiaGAPSNResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sia_ac_sn_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SiaGAPSNResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiaGAPSNResponse) ProtoMessage() {}

func (x *SiaGAPSNResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sia_ac_sn_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiaGAPSNResponse.ProtoReflect.Descriptor instead.
func (*SiaGAPSNResponse) Descriptor() ([]byte, []int) {
	return file_sia_ac_sn_proto_rawDescGZIP(), []int{7}
}

func (x *SiaGAPSNResponse) GetCidfni() string {
	if x != nil {
		return x.Cidfni
	}
	return ""
}

func (x *SiaGAPSNResponse) GetData() []int32 {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SiaGAPSNResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SiaGAPSNResponse) GetRoothash() []byte {
	if x != nil {
		return x.Roothash
	}
	return nil
}

func (x *SiaGAPSNResponse) GetRoottimestamp() int32 {
	if x != nil {
		return x.Roottimestamp
	}
	return 0
}

func (x *SiaGAPSNResponse) GetPath() [][]byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *SiaGAPSNResponse) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

var File_sia_ac_sn_proto protoreflect.FileDescriptor

var file_sia_ac_sn_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x73, 0x69, 0x61, 0x5f, 0x61, 0x63, 0x5f, 0x73, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x65, 0x0a, 0x17, 0x53, 0x69, 0x61, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x73, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x73, 0x6e, 0x6f, 0x22,
	0xe8, 0x01, 0x0a, 0x18, 0x53, 0x69, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x73, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x73, 0x6e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x63, 0x0a, 0x15, 0x53, 0x69,
	0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x44, 0x53, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x73, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x73, 0x6e, 0x6f, 0x22,
	0xe6, 0x01, 0x0a, 0x16, 0x53, 0x69, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64,
	0x44, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x73, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x73, 0x6e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x72, 0x6f, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xc0, 0x01, 0x0a, 0x0e, 0x53, 0x69, 0x61,
	0x50, 0x41, 0x53, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6e, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x09, 0x64, 0x73, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x61, 0x50, 0x41, 0x53, 0x4e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x44, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x64, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x3c, 0x0a,
	0x0e, 0x44, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xae, 0x01, 0x0a, 0x0f,
	0x53, 0x69, 0x61, 0x50, 0x41, 0x53, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x73, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x43, 0x0a, 0x09, 0x64, 0x73, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x61, 0x50, 0x41, 0x53, 0x4e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x64, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x3c,
	0x0a, 0x0e, 0x44, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x43, 0x0a, 0x0f,
	0x53, 0x69, 0x61, 0x47, 0x41, 0x50, 0x53, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x64,
	0x66, 0x6e, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x69, 0x64, 0x66, 0x6e,
	0x69, 0x22, 0xc4, 0x01, 0x0a, 0x10, 0x53, 0x69, 0x61, 0x47, 0x41, 0x50, 0x53, 0x4e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x64, 0x66, 0x6e, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x69, 0x64, 0x66, 0x6e, 0x69, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x6f, 0x6f, 0x74, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x72, 0x6f, 0x6f, 0x74, 0x68, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x6f, 0x6f, 0x74,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x32, 0xbe, 0x02, 0x0a, 0x0e, 0x53, 0x69, 0x61,
	0x53, 0x4e, 0x41, 0x43, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x53,
	0x69, 0x61, 0x50, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x57, 0x0a, 0x18, 0x53, 0x69, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70,
	0x64, 0x44, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x69, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x44,
	0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x53, 0x69, 0x61,
	0x50, 0x72, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x4e, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x69, 0x61, 0x50, 0x41, 0x53, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x61, 0x50, 0x41, 0x53,
	0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x53, 0x69, 0x61,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x53, 0x4e, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x69, 0x61, 0x47, 0x41, 0x50, 0x53, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x61, 0x47, 0x41, 0x50, 0x53,
	0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sia_ac_sn_proto_rawDescOnce sync.Once
	file_sia_ac_sn_proto_rawDescData = file_sia_ac_sn_proto_rawDesc
)

func file_sia_ac_sn_proto_rawDescGZIP() []byte {
	file_sia_ac_sn_proto_rawDescOnce.Do(func() {
		file_sia_ac_sn_proto_rawDescData = protoimpl.X.CompressGZIP(file_sia_ac_sn_proto_rawDescData)
	})
	return file_sia_ac_sn_proto_rawDescData
}

var file_sia_ac_sn_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_sia_ac_sn_proto_goTypes = []any{
	(*SiaClientStorageRequest)(nil),  // 0: proto.SiaClientStorageRequest
	(*SiaClientStorageResponse)(nil), // 1: proto.SiaClientStorageResponse
	(*SiaClientUpdDSRequest)(nil),    // 2: proto.SiaClientUpdDSRequest
	(*SiaClientUpdDSResponse)(nil),   // 3: proto.SiaClientUpdDSResponse
	(*SiaPASNRequest)(nil),           // 4: proto.SiaPASNRequest
	(*SiaPASNResponse)(nil),          // 5: proto.SiaPASNResponse
	(*SiaGAPSNRequest)(nil),          // 6: proto.SiaGAPSNRequest
	(*SiaGAPSNResponse)(nil),         // 7: proto.SiaGAPSNResponse
	nil,                              // 8: proto.SiaPASNRequest.DsversionEntry
	nil,                              // 9: proto.SiaPASNResponse.DsversionEntry
}
var file_sia_ac_sn_proto_depIdxs = []int32{
	8, // 0: proto.SiaPASNRequest.dsversion:type_name -> proto.SiaPASNRequest.DsversionEntry
	9, // 1: proto.SiaPASNResponse.dsversion:type_name -> proto.SiaPASNResponse.DsversionEntry
	0, // 2: proto.SiaSNACService.SiaPutFileNotice:input_type -> proto.SiaClientStorageRequest
	2, // 3: proto.SiaSNACService.SiaUpdateDataShardNotice:input_type -> proto.SiaClientUpdDSRequest
	4, // 4: proto.SiaSNACService.SiaPreAuditSN:input_type -> proto.SiaPASNRequest
	6, // 5: proto.SiaSNACService.SiaGetPosSN:input_type -> proto.SiaGAPSNRequest
	1, // 6: proto.SiaSNACService.SiaPutFileNotice:output_type -> proto.SiaClientStorageResponse
	3, // 7: proto.SiaSNACService.SiaUpdateDataShardNotice:output_type -> proto.SiaClientUpdDSResponse
	5, // 8: proto.SiaSNACService.SiaPreAuditSN:output_type -> proto.SiaPASNResponse
	7, // 9: proto.SiaSNACService.SiaGetPosSN:output_type -> proto.SiaGAPSNResponse
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_sia_ac_sn_proto_init() }
func file_sia_ac_sn_proto_init() {
	if File_sia_ac_sn_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sia_ac_sn_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SiaClientStorageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sia_ac_sn_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*SiaClientStorageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sia_ac_sn_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SiaClientUpdDSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sia_ac_sn_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SiaClientUpdDSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sia_ac_sn_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*SiaPASNRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sia_ac_sn_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*SiaPASNResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sia_ac_sn_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*SiaGAPSNRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sia_ac_sn_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*SiaGAPSNResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sia_ac_sn_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sia_ac_sn_proto_goTypes,
		DependencyIndexes: file_sia_ac_sn_proto_depIdxs,
		MessageInfos:      file_sia_ac_sn_proto_msgTypes,
	}.Build()
	File_sia_ac_sn_proto = out.File
	file_sia_ac_sn_proto_rawDesc = nil
	file_sia_ac_sn_proto_goTypes = nil
	file_sia_ac_sn_proto_depIdxs = nil
}

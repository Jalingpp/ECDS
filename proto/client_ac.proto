syntax = "proto3";

package proto;

option go_package = "./";

service ACService {
    rpc GetParamsG(GetPGRequest) returns (GetPGResponse);         //客户端向AC请求Params和G
    rpc RegisterAC(RegistACRequest) returns (RegistACResponse);   //客户端向AC注册
    rpc SelectSNs(StorageRequest) returns (StorageResponse);      //客户端向AC申请存储文件，获取存储各分片的存储节点id
    rpc PutFileCommit(PFCRequest) returns (PFCResponse);          //客户端向AC确认完成文件存储
    rpc GetFileSNs(GFACRequest) returns (GFACResponse);           //客户端向AC请求存储文件数据分片的存储节点id
    rpc GetDSErrReport(GDSERequest) returns (GDSEResponse);       //客户端向AC报告存储分片获取有误，并申请校验分片
    rpc GetDSSn(GDSSNRequest) returns (GDSSNResponse);            //客户端向AC请求某个分片的存储节点
    rpc UpdateDSCommit(UDSCRequest) returns (UDSCResponse);       //客户端向AC确认完成数据分片更新（包括校验块更新）
}

//客户端发起的获取Params和G的请求
message GetPGRequest{
    string clientId = 1; //客户端ID
}

//审计方对客户端获取Params和G的回复
message GetPGResponse{
    string params = 1;  //用于构造pairing的参数
    bytes g = 2;        //用于计算的公钥G
}

//客户端发起的注册请求
message RegistACRequest{
    string clientId = 1; //客户端ID
    bytes PK = 2; // 字节切片类型的PK字段
}

//审计方对客户端注册请求的回复
message RegistACResponse{
    string clientId = 1; //客户端ID
    string message = 2;  //回复信息
}

//客户端发起的存储请求
message StorageRequest {
    string clientId = 1;   //客户端ID
    string filename = 2;   //待存储的文件名
}

//审计方对存储请求的回复
message StorageResponse {
    string filename = 1;  //待存储的文件名
    repeated string sns_for_ds = 2;  //用于存储数据分片的存储节点id，下标对应分片的序号
    repeated string sns_for_ps = 3;  //用于存储校验分片的存储节点id，下标对应分片的序号
}

//客户端发起的写元信息请求
message PFCRequest {
    string clientId = 1;   //客户端ID
    string filename = 2;   //文件名
    map<string, int32> versions = 3;  //各分片对应的版本号
    map<string, string> timestamps = 4; //各分片对应的时间戳
}

//审计方对写元信息请求的回复
message PFCResponse {
    string filename = 1;  //待存储的文件名
    string message = 2;  //附带信息
}

//客户端发起的获取文件请求
message GFACRequest {
    string clientId = 1;   //客户端ID
    string filename = 2;   //请求的文件名
}

//审计方对获取文件请求的回复
message GFACResponse {
    string filename = 1;  //请求的文件名
    map<string, string> snsds = 2;  //数据分片所在的存储节点id，key:dsno,value:snid
}

//客户端发起的获取分片错误仲裁请求
message GDSERequest {
    string clientId = 1;   //客户端ID
    string filename = 2;   //请求的文件名
    map<string,string> errdssn = 3;  //发生错误的存储节点id,key:dsno,value:snid
    map<string,string> blacksns = 4;   //存储节点黑名单,key:snid,value:h-黑,b-白
}

//审计方对获取分片错误仲裁请求的回复
message GDSEResponse {
    string filename = 1;  //请求的文件名
    map<string, string> snsds = 2;  //校验分片所在的存储节点id，key:dsno,value:snid
}

//客户端发起的获取分片所在存储节点的请求
message GDSSNRequest {
    string clientId = 1;   //客户端ID
    string filename = 2;   //请求的文件名
    string dsno = 3;       //请求的分片序号
    bool isupdate = 4;     //后续是否更新
}

//审计方对获取分片所在存储节点请求的回复
message GDSSNResponse {
    string filename = 1;  //请求的文件名
    map<string, string> snsds = 2;  //请求分片所在的存储节点id，key:dsno,value:snid（分片可能包含dsnum个子分片）
    map<string, string> snsps = 3;  //校验分片所在的存储节点id，key:dsno,value:snid
}

//客户端发起的数据分片元信息更新请求
message UDSCRequest {
    string clientId = 1;   //客户端ID
    string filename = 2;   //文件名
    repeated string dsnos = 3;      //所有分片序号，包括数据分片和校验分片
    map<string, int32> versions = 4;  //各分片对应的版本号
    map<string, string> timestamps = 5; //各分片对应的时间戳
}

//审计方对数据分片元信息更新请求的回复
message UDSCResponse {
    string filename = 1;  //待存储的文件名
    map<string,string> dssnmap = 2;  //已完成元信息更新的分片列表,key:dsno,value:snid
    string message = 3;  //附带信息
}
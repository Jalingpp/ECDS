syntax = "proto3";

package proto;

option go_package = "./";

//存储节点为服务器，审计方为客户端
service StorjSNACService {
    rpc StorjPutFileNotice(StorjClientStorageRequest) returns (StorjClientStorageResponse);
    rpc StorjUpdateFileNotice(StorjClientUFRequest) returns (StorjClientUFResponse);
    rpc StorjPreAuditSN(StorjPASNRequest) returns (StorjPASNResponse);
    rpc StorjGetPosSN(StorjGAPSNRequest) returns (StorjGAPSNResponse);
}

//客户端发起的存储请求
message StorjClientStorageRequest {
    string clientId = 1;   //客户端ID
    string filename = 2;   //待存储的文件名
    int32 repno = 3;  //文件副本号
    int32 version = 4;   //文件版本号
}

//存储节点对存储请求的回复
message StorjClientStorageResponse {
    string clientId = 1;   //客户端ID
    string filename = 2;  //待存储的文件名
    int32 repno = 3;  //文件副本号
    bytes root = 4;   //文件根哈希
    string snid = 5;  //存储节点id
    string message = 6;  //附加信息
}

//客户端发起的更新数据分片请求
message StorjClientUFRequest {
    string clientId = 1;   //客户端ID
    string filename = 2;   //待存储的文件名
    int32 rep = 3;    //待更新的文件副本号
    int32 version = 4;  //待更新的文件版本号
}

//存储节点对更新数据分片请求的回复
message StorjClientUFResponse {
    string clientId = 1;   //客户端ID
    string filename = 2;  //待存储的文件名
    int32 repno = 3;  //文件副本号
    bytes root = 4;   //文件新的根哈希
    string snid = 5;  //存储节点id
    string message = 6;  //附加信息
}

//审计方发起的预审计请求
message StorjPASNRequest{
    string auditno = 1;  //审计代号:audit1,audit2...
    string snid = 2;   //请求的存储节点id
    repeated string cidfnis = 3;  //挑战的文件副本clientId-filename-i
    map<string,int32> cidfniv = 4;   //挑战的文件副本的版本，key:cid-fn-i,value:版本号
    int32 totalrpcs = 5;    //这组rpc的总数
    int32 currpcno = 6;     //当前RPC的id
}

//存储节点对审计方预审计请求的回复
message StorjPASNResponse{
    bool isready = 1;   //是否准备好审计，即可以预留快照
    map<string, int32> fversion = 2;  //如果不能预留，告知审计方哪些文件的版本已过时，否则为空
    int32 totalrpcs = 3;    //这组rpc的总数
    int32 currpcno = 4;     //当前RPC的id
}

message Int32Array {
    repeated int32 values = 1;
}

//获取存储节点上所有存储分片的聚合存储证明的请求
message StorjGAPSNRequest{
    string auditno = 1;   //审计代号
    map<string,Int32Array> cidfnirands = 2; //挑战的文件副本对应的随机数组
    int32 totalrpcs = 3;    //这组rpc的总数
    int32 currpcno = 4;     //当前RPC的id
}

message BytesArray{
    repeated bytes values = 1;
}

//存储节点对所有存储分片的聚合存储证明请求的回复
message StorjGAPSNResponse{
    map<string,BytesArray> preleafs = 1;  //每个文件副本对应的preleafs
    int32 totalrpcs = 2;    //这组rpc的总数
    int32 currpcno = 3;     //当前RPC的id
}
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: filecoin_client_ac.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FilecoinACServiceClient is the client API for FilecoinACService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilecoinACServiceClient interface {
	FilecoinSelectSNs(ctx context.Context, in *FilecoinStorageRequest, opts ...grpc.CallOption) (*FilecoinStorageResponse, error)
	FilecoinPutFileCommit(ctx context.Context, in *FilecoinPFCRequest, opts ...grpc.CallOption) (*FilecoinPFCResponse, error)
	FilecoinGetFileSNs(ctx context.Context, in *FilecoinGFACRequest, opts ...grpc.CallOption) (*FilecoinGFACResponse, error)
	FilecoinUpdateFileReq(ctx context.Context, in *FilecoinUFRequest, opts ...grpc.CallOption) (*FilecoinUFResponse, error)
	FilecoinUpdateFileCommit(ctx context.Context, in *FilecoinUFCRequest, opts ...grpc.CallOption) (*FilecoinUFCResponse, error)
}

type filecoinACServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFilecoinACServiceClient(cc grpc.ClientConnInterface) FilecoinACServiceClient {
	return &filecoinACServiceClient{cc}
}

func (c *filecoinACServiceClient) FilecoinSelectSNs(ctx context.Context, in *FilecoinStorageRequest, opts ...grpc.CallOption) (*FilecoinStorageResponse, error) {
	out := new(FilecoinStorageResponse)
	err := c.cc.Invoke(ctx, "/proto.FilecoinACService/FilecoinSelectSNs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecoinACServiceClient) FilecoinPutFileCommit(ctx context.Context, in *FilecoinPFCRequest, opts ...grpc.CallOption) (*FilecoinPFCResponse, error) {
	out := new(FilecoinPFCResponse)
	err := c.cc.Invoke(ctx, "/proto.FilecoinACService/FilecoinPutFileCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecoinACServiceClient) FilecoinGetFileSNs(ctx context.Context, in *FilecoinGFACRequest, opts ...grpc.CallOption) (*FilecoinGFACResponse, error) {
	out := new(FilecoinGFACResponse)
	err := c.cc.Invoke(ctx, "/proto.FilecoinACService/FilecoinGetFileSNs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecoinACServiceClient) FilecoinUpdateFileReq(ctx context.Context, in *FilecoinUFRequest, opts ...grpc.CallOption) (*FilecoinUFResponse, error) {
	out := new(FilecoinUFResponse)
	err := c.cc.Invoke(ctx, "/proto.FilecoinACService/FilecoinUpdateFileReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecoinACServiceClient) FilecoinUpdateFileCommit(ctx context.Context, in *FilecoinUFCRequest, opts ...grpc.CallOption) (*FilecoinUFCResponse, error) {
	out := new(FilecoinUFCResponse)
	err := c.cc.Invoke(ctx, "/proto.FilecoinACService/FilecoinUpdateFileCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilecoinACServiceServer is the server API for FilecoinACService service.
// All implementations must embed UnimplementedFilecoinACServiceServer
// for forward compatibility
type FilecoinACServiceServer interface {
	FilecoinSelectSNs(context.Context, *FilecoinStorageRequest) (*FilecoinStorageResponse, error)
	FilecoinPutFileCommit(context.Context, *FilecoinPFCRequest) (*FilecoinPFCResponse, error)
	FilecoinGetFileSNs(context.Context, *FilecoinGFACRequest) (*FilecoinGFACResponse, error)
	FilecoinUpdateFileReq(context.Context, *FilecoinUFRequest) (*FilecoinUFResponse, error)
	FilecoinUpdateFileCommit(context.Context, *FilecoinUFCRequest) (*FilecoinUFCResponse, error)
	mustEmbedUnimplementedFilecoinACServiceServer()
}

// UnimplementedFilecoinACServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFilecoinACServiceServer struct {
}

func (UnimplementedFilecoinACServiceServer) FilecoinSelectSNs(context.Context, *FilecoinStorageRequest) (*FilecoinStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilecoinSelectSNs not implemented")
}
func (UnimplementedFilecoinACServiceServer) FilecoinPutFileCommit(context.Context, *FilecoinPFCRequest) (*FilecoinPFCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilecoinPutFileCommit not implemented")
}
func (UnimplementedFilecoinACServiceServer) FilecoinGetFileSNs(context.Context, *FilecoinGFACRequest) (*FilecoinGFACResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilecoinGetFileSNs not implemented")
}
func (UnimplementedFilecoinACServiceServer) FilecoinUpdateFileReq(context.Context, *FilecoinUFRequest) (*FilecoinUFResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilecoinUpdateFileReq not implemented")
}
func (UnimplementedFilecoinACServiceServer) FilecoinUpdateFileCommit(context.Context, *FilecoinUFCRequest) (*FilecoinUFCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilecoinUpdateFileCommit not implemented")
}
func (UnimplementedFilecoinACServiceServer) mustEmbedUnimplementedFilecoinACServiceServer() {}

// UnsafeFilecoinACServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilecoinACServiceServer will
// result in compilation errors.
type UnsafeFilecoinACServiceServer interface {
	mustEmbedUnimplementedFilecoinACServiceServer()
}

func RegisterFilecoinACServiceServer(s grpc.ServiceRegistrar, srv FilecoinACServiceServer) {
	s.RegisterService(&FilecoinACService_ServiceDesc, srv)
}

func _FilecoinACService_FilecoinSelectSNs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilecoinStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecoinACServiceServer).FilecoinSelectSNs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilecoinACService/FilecoinSelectSNs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecoinACServiceServer).FilecoinSelectSNs(ctx, req.(*FilecoinStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilecoinACService_FilecoinPutFileCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilecoinPFCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecoinACServiceServer).FilecoinPutFileCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilecoinACService/FilecoinPutFileCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecoinACServiceServer).FilecoinPutFileCommit(ctx, req.(*FilecoinPFCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilecoinACService_FilecoinGetFileSNs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilecoinGFACRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecoinACServiceServer).FilecoinGetFileSNs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilecoinACService/FilecoinGetFileSNs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecoinACServiceServer).FilecoinGetFileSNs(ctx, req.(*FilecoinGFACRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilecoinACService_FilecoinUpdateFileReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilecoinUFRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecoinACServiceServer).FilecoinUpdateFileReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilecoinACService/FilecoinUpdateFileReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecoinACServiceServer).FilecoinUpdateFileReq(ctx, req.(*FilecoinUFRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilecoinACService_FilecoinUpdateFileCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilecoinUFCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecoinACServiceServer).FilecoinUpdateFileCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilecoinACService/FilecoinUpdateFileCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecoinACServiceServer).FilecoinUpdateFileCommit(ctx, req.(*FilecoinUFCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FilecoinACService_ServiceDesc is the grpc.ServiceDesc for FilecoinACService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilecoinACService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FilecoinACService",
	HandlerType: (*FilecoinACServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FilecoinSelectSNs",
			Handler:    _FilecoinACService_FilecoinSelectSNs_Handler,
		},
		{
			MethodName: "FilecoinPutFileCommit",
			Handler:    _FilecoinACService_FilecoinPutFileCommit_Handler,
		},
		{
			MethodName: "FilecoinGetFileSNs",
			Handler:    _FilecoinACService_FilecoinGetFileSNs_Handler,
		},
		{
			MethodName: "FilecoinUpdateFileReq",
			Handler:    _FilecoinACService_FilecoinUpdateFileReq_Handler,
		},
		{
			MethodName: "FilecoinUpdateFileCommit",
			Handler:    _FilecoinACService_FilecoinUpdateFileCommit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "filecoin_client_ac.proto",
}

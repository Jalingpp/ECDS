// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.26.1
// source: filecoin_ac_sn.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 客户端发起的存储请求
type FilecoinClientStorageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Repno         int32                  `protobuf:"varint,3,opt,name=repno,proto3" json:"repno,omitempty"`      //文件副本号
	Version       int32                  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`  //文件版本号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilecoinClientStorageRequest) Reset() {
	*x = FilecoinClientStorageRequest{}
	mi := &file_filecoin_ac_sn_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilecoinClientStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilecoinClientStorageRequest) ProtoMessage() {}

func (x *FilecoinClientStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_ac_sn_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilecoinClientStorageRequest.ProtoReflect.Descriptor instead.
func (*FilecoinClientStorageRequest) Descriptor() ([]byte, []int) {
	return file_filecoin_ac_sn_proto_rawDescGZIP(), []int{0}
}

func (x *FilecoinClientStorageRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *FilecoinClientStorageRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FilecoinClientStorageRequest) GetRepno() int32 {
	if x != nil {
		return x.Repno
	}
	return 0
}

func (x *FilecoinClientStorageRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// 存储节点对存储请求的回复
type FilecoinClientStorageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`           //客户端ID
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`           //待存储的文件名
	Repno         int32                  `protobuf:"varint,3,opt,name=repno,proto3" json:"repno,omitempty"`                //文件副本号
	Snid          string                 `protobuf:"bytes,4,opt,name=snid,proto3" json:"snid,omitempty"`                   //存储节点id
	MinerID       int32                  `protobuf:"varint,5,opt,name=minerID,proto3" json:"minerID,omitempty"`            //Filecoin存储证明矿工ID
	SectorNum     []int32                `protobuf:"varint,6,rep,packed,name=sectorNum,proto3" json:"sectorNum,omitempty"` //Filecoin存储证明扇区号
	SealedCID     []string               `protobuf:"bytes,7,rep,name=sealedCID,proto3" json:"sealedCID,omitempty"`         //Filecoin存储证明封装ID
	UnsealedCID   []string               `protobuf:"bytes,8,rep,name=unsealedCID,proto3" json:"unsealedCID,omitempty"`     //Filecoin存储证明未封装ID
	Proof         [][]byte               `protobuf:"bytes,9,rep,name=proof,proto3" json:"proof,omitempty"`                 //Filecoin存储证明封装证明
	Message       string                 `protobuf:"bytes,10,opt,name=message,proto3" json:"message,omitempty"`            //附加信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilecoinClientStorageResponse) Reset() {
	*x = FilecoinClientStorageResponse{}
	mi := &file_filecoin_ac_sn_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilecoinClientStorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilecoinClientStorageResponse) ProtoMessage() {}

func (x *FilecoinClientStorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_ac_sn_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilecoinClientStorageResponse.ProtoReflect.Descriptor instead.
func (*FilecoinClientStorageResponse) Descriptor() ([]byte, []int) {
	return file_filecoin_ac_sn_proto_rawDescGZIP(), []int{1}
}

func (x *FilecoinClientStorageResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *FilecoinClientStorageResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FilecoinClientStorageResponse) GetRepno() int32 {
	if x != nil {
		return x.Repno
	}
	return 0
}

func (x *FilecoinClientStorageResponse) GetSnid() string {
	if x != nil {
		return x.Snid
	}
	return ""
}

func (x *FilecoinClientStorageResponse) GetMinerID() int32 {
	if x != nil {
		return x.MinerID
	}
	return 0
}

func (x *FilecoinClientStorageResponse) GetSectorNum() []int32 {
	if x != nil {
		return x.SectorNum
	}
	return nil
}

func (x *FilecoinClientStorageResponse) GetSealedCID() []string {
	if x != nil {
		return x.SealedCID
	}
	return nil
}

func (x *FilecoinClientStorageResponse) GetUnsealedCID() []string {
	if x != nil {
		return x.UnsealedCID
	}
	return nil
}

func (x *FilecoinClientStorageResponse) GetProof() [][]byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *FilecoinClientStorageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 客户端发起的更新数据分片请求
type FilecoinClientUFRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Rep           int32                  `protobuf:"varint,3,opt,name=rep,proto3" json:"rep,omitempty"`          //待更新的文件副本号
	Version       int32                  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`  //待更新的文件新版本号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilecoinClientUFRequest) Reset() {
	*x = FilecoinClientUFRequest{}
	mi := &file_filecoin_ac_sn_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilecoinClientUFRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilecoinClientUFRequest) ProtoMessage() {}

func (x *FilecoinClientUFRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_ac_sn_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilecoinClientUFRequest.ProtoReflect.Descriptor instead.
func (*FilecoinClientUFRequest) Descriptor() ([]byte, []int) {
	return file_filecoin_ac_sn_proto_rawDescGZIP(), []int{2}
}

func (x *FilecoinClientUFRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *FilecoinClientUFRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FilecoinClientUFRequest) GetRep() int32 {
	if x != nil {
		return x.Rep
	}
	return 0
}

func (x *FilecoinClientUFRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// 存储节点对更新数据分片请求的回复
type FilecoinClientUFResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`           //客户端ID
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`           //待存储的文件名
	Repno         int32                  `protobuf:"varint,3,opt,name=repno,proto3" json:"repno,omitempty"`                //文件副本号
	Snid          string                 `protobuf:"bytes,4,opt,name=snid,proto3" json:"snid,omitempty"`                   //存储节点id
	MinerID       int32                  `protobuf:"varint,5,opt,name=minerID,proto3" json:"minerID,omitempty"`            //Filecoin存储证明矿工ID
	SectorNum     []int32                `protobuf:"varint,6,rep,packed,name=sectorNum,proto3" json:"sectorNum,omitempty"` //Filecoin存储证明扇区号
	SealedCID     []string               `protobuf:"bytes,7,rep,name=sealedCID,proto3" json:"sealedCID,omitempty"`         //Filecoin存储证明封装ID
	UnsealedCID   []string               `protobuf:"bytes,8,rep,name=unsealedCID,proto3" json:"unsealedCID,omitempty"`     //Filecoin存储证明未封装ID
	Proof         [][]byte               `protobuf:"bytes,9,rep,name=proof,proto3" json:"proof,omitempty"`                 //Filecoin存储证明封装证明
	Message       string                 `protobuf:"bytes,10,opt,name=message,proto3" json:"message,omitempty"`            //附加信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilecoinClientUFResponse) Reset() {
	*x = FilecoinClientUFResponse{}
	mi := &file_filecoin_ac_sn_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilecoinClientUFResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilecoinClientUFResponse) ProtoMessage() {}

func (x *FilecoinClientUFResponse) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_ac_sn_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilecoinClientUFResponse.ProtoReflect.Descriptor instead.
func (*FilecoinClientUFResponse) Descriptor() ([]byte, []int) {
	return file_filecoin_ac_sn_proto_rawDescGZIP(), []int{3}
}

func (x *FilecoinClientUFResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *FilecoinClientUFResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FilecoinClientUFResponse) GetRepno() int32 {
	if x != nil {
		return x.Repno
	}
	return 0
}

func (x *FilecoinClientUFResponse) GetSnid() string {
	if x != nil {
		return x.Snid
	}
	return ""
}

func (x *FilecoinClientUFResponse) GetMinerID() int32 {
	if x != nil {
		return x.MinerID
	}
	return 0
}

func (x *FilecoinClientUFResponse) GetSectorNum() []int32 {
	if x != nil {
		return x.SectorNum
	}
	return nil
}

func (x *FilecoinClientUFResponse) GetSealedCID() []string {
	if x != nil {
		return x.SealedCID
	}
	return nil
}

func (x *FilecoinClientUFResponse) GetUnsealedCID() []string {
	if x != nil {
		return x.UnsealedCID
	}
	return nil
}

func (x *FilecoinClientUFResponse) GetProof() [][]byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *FilecoinClientUFResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 审计方发起的预审计请求
type FilecoinPASNRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Auditno       string                 `protobuf:"bytes,1,opt,name=auditno,proto3" json:"auditno,omitempty"`                                                                            //审计代号:audit1,audit2...
	Snid          string                 `protobuf:"bytes,2,opt,name=snid,proto3" json:"snid,omitempty"`                                                                                  //请求的存储节点id
	Cidfnis       []string               `protobuf:"bytes,3,rep,name=cidfnis,proto3" json:"cidfnis,omitempty"`                                                                            //挑战的文件副本clientId-filename-i
	Cidfniv       map[string]int32       `protobuf:"bytes,4,rep,name=cidfniv,proto3" json:"cidfniv,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` //挑战的文件副本的版本，key:cid-fn-i,value:版本号
	Totalrpcs     int32                  `protobuf:"varint,5,opt,name=totalrpcs,proto3" json:"totalrpcs,omitempty"`                                                                       //这组rpc的总数
	Currpcno      int32                  `protobuf:"varint,6,opt,name=currpcno,proto3" json:"currpcno,omitempty"`                                                                         //当前RPC的id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilecoinPASNRequest) Reset() {
	*x = FilecoinPASNRequest{}
	mi := &file_filecoin_ac_sn_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilecoinPASNRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilecoinPASNRequest) ProtoMessage() {}

func (x *FilecoinPASNRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_ac_sn_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilecoinPASNRequest.ProtoReflect.Descriptor instead.
func (*FilecoinPASNRequest) Descriptor() ([]byte, []int) {
	return file_filecoin_ac_sn_proto_rawDescGZIP(), []int{4}
}

func (x *FilecoinPASNRequest) GetAuditno() string {
	if x != nil {
		return x.Auditno
	}
	return ""
}

func (x *FilecoinPASNRequest) GetSnid() string {
	if x != nil {
		return x.Snid
	}
	return ""
}

func (x *FilecoinPASNRequest) GetCidfnis() []string {
	if x != nil {
		return x.Cidfnis
	}
	return nil
}

func (x *FilecoinPASNRequest) GetCidfniv() map[string]int32 {
	if x != nil {
		return x.Cidfniv
	}
	return nil
}

func (x *FilecoinPASNRequest) GetTotalrpcs() int32 {
	if x != nil {
		return x.Totalrpcs
	}
	return 0
}

func (x *FilecoinPASNRequest) GetCurrpcno() int32 {
	if x != nil {
		return x.Currpcno
	}
	return 0
}

// 存储节点对审计方预审计请求的回复
type FilecoinPASNResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Isready       bool                   `protobuf:"varint,1,opt,name=isready,proto3" json:"isready,omitempty"`                                                                             //是否准备好审计，即可以预留快照
	Fversion      map[string]int32       `protobuf:"bytes,2,rep,name=fversion,proto3" json:"fversion,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` //如果不能预留，告知审计方哪些文件的版本已过时，否则为空
	Totalrpcs     int32                  `protobuf:"varint,3,opt,name=totalrpcs,proto3" json:"totalrpcs,omitempty"`                                                                         //这组rpc的总数
	Currpcno      int32                  `protobuf:"varint,4,opt,name=currpcno,proto3" json:"currpcno,omitempty"`                                                                           //当前RPC的id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilecoinPASNResponse) Reset() {
	*x = FilecoinPASNResponse{}
	mi := &file_filecoin_ac_sn_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilecoinPASNResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilecoinPASNResponse) ProtoMessage() {}

func (x *FilecoinPASNResponse) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_ac_sn_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilecoinPASNResponse.ProtoReflect.Descriptor instead.
func (*FilecoinPASNResponse) Descriptor() ([]byte, []int) {
	return file_filecoin_ac_sn_proto_rawDescGZIP(), []int{5}
}

func (x *FilecoinPASNResponse) GetIsready() bool {
	if x != nil {
		return x.Isready
	}
	return false
}

func (x *FilecoinPASNResponse) GetFversion() map[string]int32 {
	if x != nil {
		return x.Fversion
	}
	return nil
}

func (x *FilecoinPASNResponse) GetTotalrpcs() int32 {
	if x != nil {
		return x.Totalrpcs
	}
	return 0
}

func (x *FilecoinPASNResponse) GetCurrpcno() int32 {
	if x != nil {
		return x.Currpcno
	}
	return 0
}

type Int32ArrayFilecoin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []int32                `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Int32ArrayFilecoin) Reset() {
	*x = Int32ArrayFilecoin{}
	mi := &file_filecoin_ac_sn_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Int32ArrayFilecoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32ArrayFilecoin) ProtoMessage() {}

func (x *Int32ArrayFilecoin) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_ac_sn_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32ArrayFilecoin.ProtoReflect.Descriptor instead.
func (*Int32ArrayFilecoin) Descriptor() ([]byte, []int) {
	return file_filecoin_ac_sn_proto_rawDescGZIP(), []int{6}
}

func (x *Int32ArrayFilecoin) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// 获取存储节点上所有存储分片的聚合存储证明的请求
type FilecoinGAPSNRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Auditno       string                 `protobuf:"bytes,1,opt,name=auditno,proto3" json:"auditno,omitempty"`       //审计代号
	Randomness    []byte                 `protobuf:"bytes,2,opt,name=randomness,proto3" json:"randomness,omitempty"` //挑战随机数
	Totalrpcs     int32                  `protobuf:"varint,3,opt,name=totalrpcs,proto3" json:"totalrpcs,omitempty"`  //这组rpc的总数
	Currpcno      int32                  `protobuf:"varint,4,opt,name=currpcno,proto3" json:"currpcno,omitempty"`    //当前RPC的id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilecoinGAPSNRequest) Reset() {
	*x = FilecoinGAPSNRequest{}
	mi := &file_filecoin_ac_sn_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilecoinGAPSNRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilecoinGAPSNRequest) ProtoMessage() {}

func (x *FilecoinGAPSNRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_ac_sn_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilecoinGAPSNRequest.ProtoReflect.Descriptor instead.
func (*FilecoinGAPSNRequest) Descriptor() ([]byte, []int) {
	return file_filecoin_ac_sn_proto_rawDescGZIP(), []int{7}
}

func (x *FilecoinGAPSNRequest) GetAuditno() string {
	if x != nil {
		return x.Auditno
	}
	return ""
}

func (x *FilecoinGAPSNRequest) GetRandomness() []byte {
	if x != nil {
		return x.Randomness
	}
	return nil
}

func (x *FilecoinGAPSNRequest) GetTotalrpcs() int32 {
	if x != nil {
		return x.Totalrpcs
	}
	return 0
}

func (x *FilecoinGAPSNRequest) GetCurrpcno() int32 {
	if x != nil {
		return x.Currpcno
	}
	return 0
}

type FilecoinBytesArray struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        [][]byte               `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilecoinBytesArray) Reset() {
	*x = FilecoinBytesArray{}
	mi := &file_filecoin_ac_sn_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilecoinBytesArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilecoinBytesArray) ProtoMessage() {}

func (x *FilecoinBytesArray) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_ac_sn_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilecoinBytesArray.ProtoReflect.Descriptor instead.
func (*FilecoinBytesArray) Descriptor() ([]byte, []int) {
	return file_filecoin_ac_sn_proto_rawDescGZIP(), []int{8}
}

func (x *FilecoinBytesArray) GetValues() [][]byte {
	if x != nil {
		return x.Values
	}
	return nil
}

// 存储节点对所有存储分片的聚合存储证明请求的回复
type FilecoinGAPSNResponse struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Auditno       string                         `protobuf:"bytes,1,opt,name=auditno,proto3" json:"auditno,omitempty"`                                                                         //审计代号
	Proofs        map[string]*FilecoinBytesArray `protobuf:"bytes,2,rep,name=proofs,proto3" json:"proofs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` //存储证明，key:cid-fn-i-sectnum,value:proofs
	Totalrpcs     int32                          `protobuf:"varint,3,opt,name=totalrpcs,proto3" json:"totalrpcs,omitempty"`                                                                    //这组rpc的总数
	Currpcno      int32                          `protobuf:"varint,4,opt,name=currpcno,proto3" json:"currpcno,omitempty"`                                                                      //当前RPC的id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilecoinGAPSNResponse) Reset() {
	*x = FilecoinGAPSNResponse{}
	mi := &file_filecoin_ac_sn_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilecoinGAPSNResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilecoinGAPSNResponse) ProtoMessage() {}

func (x *FilecoinGAPSNResponse) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_ac_sn_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilecoinGAPSNResponse.ProtoReflect.Descriptor instead.
func (*FilecoinGAPSNResponse) Descriptor() ([]byte, []int) {
	return file_filecoin_ac_sn_proto_rawDescGZIP(), []int{9}
}

func (x *FilecoinGAPSNResponse) GetAuditno() string {
	if x != nil {
		return x.Auditno
	}
	return ""
}

func (x *FilecoinGAPSNResponse) GetProofs() map[string]*FilecoinBytesArray {
	if x != nil {
		return x.Proofs
	}
	return nil
}

func (x *FilecoinGAPSNResponse) GetTotalrpcs() int32 {
	if x != nil {
		return x.Totalrpcs
	}
	return 0
}

func (x *FilecoinGAPSNResponse) GetCurrpcno() int32 {
	if x != nil {
		return x.Currpcno
	}
	return 0
}

var File_filecoin_ac_sn_proto protoreflect.FileDescriptor

const file_filecoin_ac_sn_proto_rawDesc = "" +
	"\n" +
	"\x14filecoin_ac_sn.proto\x12\x05proto\"\x86\x01\n" +
	"\x1cFilecoinClientStorageRequest\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12\x14\n" +
	"\x05repno\x18\x03 \x01(\x05R\x05repno\x12\x18\n" +
	"\aversion\x18\x04 \x01(\x05R\aversion\"\xa9\x02\n" +
	"\x1dFilecoinClientStorageResponse\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12\x14\n" +
	"\x05repno\x18\x03 \x01(\x05R\x05repno\x12\x12\n" +
	"\x04snid\x18\x04 \x01(\tR\x04snid\x12\x18\n" +
	"\aminerID\x18\x05 \x01(\x05R\aminerID\x12\x1c\n" +
	"\tsectorNum\x18\x06 \x03(\x05R\tsectorNum\x12\x1c\n" +
	"\tsealedCID\x18\a \x03(\tR\tsealedCID\x12 \n" +
	"\vunsealedCID\x18\b \x03(\tR\vunsealedCID\x12\x14\n" +
	"\x05proof\x18\t \x03(\fR\x05proof\x12\x18\n" +
	"\amessage\x18\n" +
	" \x01(\tR\amessage\"}\n" +
	"\x17FilecoinClientUFRequest\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12\x10\n" +
	"\x03rep\x18\x03 \x01(\x05R\x03rep\x12\x18\n" +
	"\aversion\x18\x04 \x01(\x05R\aversion\"\xa4\x02\n" +
	"\x18FilecoinClientUFResponse\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12\x14\n" +
	"\x05repno\x18\x03 \x01(\x05R\x05repno\x12\x12\n" +
	"\x04snid\x18\x04 \x01(\tR\x04snid\x12\x18\n" +
	"\aminerID\x18\x05 \x01(\x05R\aminerID\x12\x1c\n" +
	"\tsectorNum\x18\x06 \x03(\x05R\tsectorNum\x12\x1c\n" +
	"\tsealedCID\x18\a \x03(\tR\tsealedCID\x12 \n" +
	"\vunsealedCID\x18\b \x03(\tR\vunsealedCID\x12\x14\n" +
	"\x05proof\x18\t \x03(\fR\x05proof\x12\x18\n" +
	"\amessage\x18\n" +
	" \x01(\tR\amessage\"\x96\x02\n" +
	"\x13FilecoinPASNRequest\x12\x18\n" +
	"\aauditno\x18\x01 \x01(\tR\aauditno\x12\x12\n" +
	"\x04snid\x18\x02 \x01(\tR\x04snid\x12\x18\n" +
	"\acidfnis\x18\x03 \x03(\tR\acidfnis\x12A\n" +
	"\acidfniv\x18\x04 \x03(\v2'.proto.FilecoinPASNRequest.CidfnivEntryR\acidfniv\x12\x1c\n" +
	"\ttotalrpcs\x18\x05 \x01(\x05R\ttotalrpcs\x12\x1a\n" +
	"\bcurrpcno\x18\x06 \x01(\x05R\bcurrpcno\x1a:\n" +
	"\fCidfnivEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xee\x01\n" +
	"\x14FilecoinPASNResponse\x12\x18\n" +
	"\aisready\x18\x01 \x01(\bR\aisready\x12E\n" +
	"\bfversion\x18\x02 \x03(\v2).proto.FilecoinPASNResponse.FversionEntryR\bfversion\x12\x1c\n" +
	"\ttotalrpcs\x18\x03 \x01(\x05R\ttotalrpcs\x12\x1a\n" +
	"\bcurrpcno\x18\x04 \x01(\x05R\bcurrpcno\x1a;\n" +
	"\rFversionEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\",\n" +
	"\x12Int32ArrayFilecoin\x12\x16\n" +
	"\x06values\x18\x01 \x03(\x05R\x06values\"\x8a\x01\n" +
	"\x14FilecoinGAPSNRequest\x12\x18\n" +
	"\aauditno\x18\x01 \x01(\tR\aauditno\x12\x1e\n" +
	"\n" +
	"randomness\x18\x02 \x01(\fR\n" +
	"randomness\x12\x1c\n" +
	"\ttotalrpcs\x18\x03 \x01(\x05R\ttotalrpcs\x12\x1a\n" +
	"\bcurrpcno\x18\x04 \x01(\x05R\bcurrpcno\",\n" +
	"\x12FilecoinBytesArray\x12\x16\n" +
	"\x06values\x18\x01 \x03(\fR\x06values\"\x83\x02\n" +
	"\x15FilecoinGAPSNResponse\x12\x18\n" +
	"\aauditno\x18\x01 \x01(\tR\aauditno\x12@\n" +
	"\x06proofs\x18\x02 \x03(\v2(.proto.FilecoinGAPSNResponse.ProofsEntryR\x06proofs\x12\x1c\n" +
	"\ttotalrpcs\x18\x03 \x01(\x05R\ttotalrpcs\x12\x1a\n" +
	"\bcurrpcno\x18\x04 \x01(\x05R\bcurrpcno\x1aT\n" +
	"\vProofsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12/\n" +
	"\x05value\x18\x02 \x01(\v2\x19.proto.FilecoinBytesArrayR\x05value:\x028\x012\xf4\x02\n" +
	"\x13FilecoinSNACService\x12b\n" +
	"\x15FilecoinPutFileNotice\x12#.proto.FilecoinClientStorageRequest\x1a$.proto.FilecoinClientStorageResponse\x12[\n" +
	"\x18FilecoinUpdateFileNotice\x12\x1e.proto.FilecoinClientUFRequest\x1a\x1f.proto.FilecoinClientUFResponse\x12M\n" +
	"\x12FilecoinPreAuditSN\x12\x1a.proto.FilecoinPASNRequest\x1a\x1b.proto.FilecoinPASNResponse\x12M\n" +
	"\x10FilecoinGetPosSN\x12\x1b.proto.FilecoinGAPSNRequest\x1a\x1c.proto.FilecoinGAPSNResponseB\x04Z\x02./b\x06proto3"

var (
	file_filecoin_ac_sn_proto_rawDescOnce sync.Once
	file_filecoin_ac_sn_proto_rawDescData []byte
)

func file_filecoin_ac_sn_proto_rawDescGZIP() []byte {
	file_filecoin_ac_sn_proto_rawDescOnce.Do(func() {
		file_filecoin_ac_sn_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_filecoin_ac_sn_proto_rawDesc), len(file_filecoin_ac_sn_proto_rawDesc)))
	})
	return file_filecoin_ac_sn_proto_rawDescData
}

var file_filecoin_ac_sn_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_filecoin_ac_sn_proto_goTypes = []any{
	(*FilecoinClientStorageRequest)(nil),  // 0: proto.FilecoinClientStorageRequest
	(*FilecoinClientStorageResponse)(nil), // 1: proto.FilecoinClientStorageResponse
	(*FilecoinClientUFRequest)(nil),       // 2: proto.FilecoinClientUFRequest
	(*FilecoinClientUFResponse)(nil),      // 3: proto.FilecoinClientUFResponse
	(*FilecoinPASNRequest)(nil),           // 4: proto.FilecoinPASNRequest
	(*FilecoinPASNResponse)(nil),          // 5: proto.FilecoinPASNResponse
	(*Int32ArrayFilecoin)(nil),            // 6: proto.Int32ArrayFilecoin
	(*FilecoinGAPSNRequest)(nil),          // 7: proto.FilecoinGAPSNRequest
	(*FilecoinBytesArray)(nil),            // 8: proto.FilecoinBytesArray
	(*FilecoinGAPSNResponse)(nil),         // 9: proto.FilecoinGAPSNResponse
	nil,                                   // 10: proto.FilecoinPASNRequest.CidfnivEntry
	nil,                                   // 11: proto.FilecoinPASNResponse.FversionEntry
	nil,                                   // 12: proto.FilecoinGAPSNResponse.ProofsEntry
}
var file_filecoin_ac_sn_proto_depIdxs = []int32{
	10, // 0: proto.FilecoinPASNRequest.cidfniv:type_name -> proto.FilecoinPASNRequest.CidfnivEntry
	11, // 1: proto.FilecoinPASNResponse.fversion:type_name -> proto.FilecoinPASNResponse.FversionEntry
	12, // 2: proto.FilecoinGAPSNResponse.proofs:type_name -> proto.FilecoinGAPSNResponse.ProofsEntry
	8,  // 3: proto.FilecoinGAPSNResponse.ProofsEntry.value:type_name -> proto.FilecoinBytesArray
	0,  // 4: proto.FilecoinSNACService.FilecoinPutFileNotice:input_type -> proto.FilecoinClientStorageRequest
	2,  // 5: proto.FilecoinSNACService.FilecoinUpdateFileNotice:input_type -> proto.FilecoinClientUFRequest
	4,  // 6: proto.FilecoinSNACService.FilecoinPreAuditSN:input_type -> proto.FilecoinPASNRequest
	7,  // 7: proto.FilecoinSNACService.FilecoinGetPosSN:input_type -> proto.FilecoinGAPSNRequest
	1,  // 8: proto.FilecoinSNACService.FilecoinPutFileNotice:output_type -> proto.FilecoinClientStorageResponse
	3,  // 9: proto.FilecoinSNACService.FilecoinUpdateFileNotice:output_type -> proto.FilecoinClientUFResponse
	5,  // 10: proto.FilecoinSNACService.FilecoinPreAuditSN:output_type -> proto.FilecoinPASNResponse
	9,  // 11: proto.FilecoinSNACService.FilecoinGetPosSN:output_type -> proto.FilecoinGAPSNResponse
	8,  // [8:12] is the sub-list for method output_type
	4,  // [4:8] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_filecoin_ac_sn_proto_init() }
func file_filecoin_ac_sn_proto_init() {
	if File_filecoin_ac_sn_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_filecoin_ac_sn_proto_rawDesc), len(file_filecoin_ac_sn_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_filecoin_ac_sn_proto_goTypes,
		DependencyIndexes: file_filecoin_ac_sn_proto_depIdxs,
		MessageInfos:      file_filecoin_ac_sn_proto_msgTypes,
	}.Build()
	File_filecoin_ac_sn_proto = out.File
	file_filecoin_ac_sn_proto_goTypes = nil
	file_filecoin_ac_sn_proto_depIdxs = nil
}

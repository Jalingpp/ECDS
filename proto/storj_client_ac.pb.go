// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.26.1
// source: storj_client_ac.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 客户端发起的存储请求
type StorjStorageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Version       int32                  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`  //待存储的文件版本号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StorjStorageRequest) Reset() {
	*x = StorjStorageRequest{}
	mi := &file_storj_client_ac_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorjStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjStorageRequest) ProtoMessage() {}

func (x *StorjStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_ac_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjStorageRequest.ProtoReflect.Descriptor instead.
func (*StorjStorageRequest) Descriptor() ([]byte, []int) {
	return file_storj_client_ac_proto_rawDescGZIP(), []int{0}
}

func (x *StorjStorageRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *StorjStorageRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjStorageRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// 审计方对存储请求的回复
type StorjStorageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`                   //待存储的文件名
	SnsForFd      []string               `protobuf:"bytes,2,rep,name=sns_for_fd,json=snsForFd,proto3" json:"sns_for_fd,omitempty"` //用于存储文件副本的存储节点id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StorjStorageResponse) Reset() {
	*x = StorjStorageResponse{}
	mi := &file_storj_client_ac_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorjStorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjStorageResponse) ProtoMessage() {}

func (x *StorjStorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_ac_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjStorageResponse.ProtoReflect.Descriptor instead.
func (*StorjStorageResponse) Descriptor() ([]byte, []int) {
	return file_storj_client_ac_proto_rawDescGZIP(), []int{1}
}

func (x *StorjStorageResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjStorageResponse) GetSnsForFd() []string {
	if x != nil {
		return x.SnsForFd
	}
	return nil
}

type Int32ArrayAC struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []int32                `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Int32ArrayAC) Reset() {
	*x = Int32ArrayAC{}
	mi := &file_storj_client_ac_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Int32ArrayAC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32ArrayAC) ProtoMessage() {}

func (x *Int32ArrayAC) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_ac_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32ArrayAC.ProtoReflect.Descriptor instead.
func (*Int32ArrayAC) Descriptor() ([]byte, []int) {
	return file_storj_client_ac_proto_rawDescGZIP(), []int{2}
}

func (x *Int32ArrayAC) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// 客户端发起的写元信息请求
type StorjPFCRequest struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	ClientId      string                   `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`                                                                         //客户端ID
	Filename      string                   `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`                                                                         //文件名
	Randmap       map[string]*Int32ArrayAC `protobuf:"bytes,3,rep,name=randmap,proto3" json:"randmap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` //各副本对应的随机数集
	Rootmap       map[string][]byte        `protobuf:"bytes,4,rep,name=rootmap,proto3" json:"rootmap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` //各副本对应的默克尔树根哈希
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StorjPFCRequest) Reset() {
	*x = StorjPFCRequest{}
	mi := &file_storj_client_ac_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorjPFCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjPFCRequest) ProtoMessage() {}

func (x *StorjPFCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_ac_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjPFCRequest.ProtoReflect.Descriptor instead.
func (*StorjPFCRequest) Descriptor() ([]byte, []int) {
	return file_storj_client_ac_proto_rawDescGZIP(), []int{3}
}

func (x *StorjPFCRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *StorjPFCRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjPFCRequest) GetRandmap() map[string]*Int32ArrayAC {
	if x != nil {
		return x.Randmap
	}
	return nil
}

func (x *StorjPFCRequest) GetRootmap() map[string][]byte {
	if x != nil {
		return x.Rootmap
	}
	return nil
}

// 审计方对写元信息请求的回复
type StorjPFCResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`   //附带信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StorjPFCResponse) Reset() {
	*x = StorjPFCResponse{}
	mi := &file_storj_client_ac_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorjPFCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjPFCResponse) ProtoMessage() {}

func (x *StorjPFCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_ac_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjPFCResponse.ProtoReflect.Descriptor instead.
func (*StorjPFCResponse) Descriptor() ([]byte, []int) {
	return file_storj_client_ac_proto_rawDescGZIP(), []int{4}
}

func (x *StorjPFCResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjPFCResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 客户端发起的获取文件请求
type StorjGFACRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //请求的文件名
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StorjGFACRequest) Reset() {
	*x = StorjGFACRequest{}
	mi := &file_storj_client_ac_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorjGFACRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjGFACRequest) ProtoMessage() {}

func (x *StorjGFACRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_ac_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjGFACRequest.ProtoReflect.Descriptor instead.
func (*StorjGFACRequest) Descriptor() ([]byte, []int) {
	return file_storj_client_ac_proto_rawDescGZIP(), []int{5}
}

func (x *StorjGFACRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *StorjGFACRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

// 审计方对获取文件请求的回复
type StorjGFACResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`                                                                     //请求的文件名
	Version       int32                  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`                                                                      //文件版本号
	Snsds         map[string]string      `protobuf:"bytes,3,rep,name=snsds,proto3" json:"snsds,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` //数据分片所在的存储节点id，key:filename-i,value:snid
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StorjGFACResponse) Reset() {
	*x = StorjGFACResponse{}
	mi := &file_storj_client_ac_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorjGFACResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjGFACResponse) ProtoMessage() {}

func (x *StorjGFACResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_ac_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjGFACResponse.ProtoReflect.Descriptor instead.
func (*StorjGFACResponse) Descriptor() ([]byte, []int) {
	return file_storj_client_ac_proto_rawDescGZIP(), []int{6}
}

func (x *StorjGFACResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjGFACResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *StorjGFACResponse) GetSnsds() map[string]string {
	if x != nil {
		return x.Snsds
	}
	return nil
}

// 客户端发起的获取文件请求
type StorjGRRRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //请求的文件名
	Rep           string                 `protobuf:"bytes,3,opt,name=rep,proto3" json:"rep,omitempty"`           //请求的文件副本号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StorjGRRRequest) Reset() {
	*x = StorjGRRRequest{}
	mi := &file_storj_client_ac_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorjGRRRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjGRRRequest) ProtoMessage() {}

func (x *StorjGRRRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_ac_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjGRRRequest.ProtoReflect.Descriptor instead.
func (*StorjGRRRequest) Descriptor() ([]byte, []int) {
	return file_storj_client_ac_proto_rawDescGZIP(), []int{7}
}

func (x *StorjGRRRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *StorjGRRRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjGRRRequest) GetRep() string {
	if x != nil {
		return x.Rep
	}
	return ""
}

// 审计方对获取文件请求的回复
type StorjGRRResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rands         *Int32ArrayAC          `protobuf:"bytes,1,opt,name=rands,proto3" json:"rands,omitempty"` //请求的副本对应的随机数集
	Root          []byte                 `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`   //请求的副本对应的默克尔树根
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StorjGRRResponse) Reset() {
	*x = StorjGRRResponse{}
	mi := &file_storj_client_ac_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorjGRRResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjGRRResponse) ProtoMessage() {}

func (x *StorjGRRResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_ac_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjGRRResponse.ProtoReflect.Descriptor instead.
func (*StorjGRRResponse) Descriptor() ([]byte, []int) {
	return file_storj_client_ac_proto_rawDescGZIP(), []int{8}
}

func (x *StorjGRRResponse) GetRands() *Int32ArrayAC {
	if x != nil {
		return x.Rands
	}
	return nil
}

func (x *StorjGRRResponse) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

// 客户端发起的文件数据更新请求
type StorjUFRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //文件名
	Version       int32                  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`  //文件版本号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StorjUFRequest) Reset() {
	*x = StorjUFRequest{}
	mi := &file_storj_client_ac_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorjUFRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjUFRequest) ProtoMessage() {}

func (x *StorjUFRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_ac_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjUFRequest.ProtoReflect.Descriptor instead.
func (*StorjUFRequest) Descriptor() ([]byte, []int) {
	return file_storj_client_ac_proto_rawDescGZIP(), []int{9}
}

func (x *StorjUFRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *StorjUFRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjUFRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// 审计方对数据分片元信息更新请求的回复
type StorjUFResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`                                                                     //待更新的文件名
	Snsds         map[string]string      `protobuf:"bytes,2,rep,name=snsds,proto3" json:"snsds,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` //数据分片所在的存储节点id，key:filename-i,value:snid
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StorjUFResponse) Reset() {
	*x = StorjUFResponse{}
	mi := &file_storj_client_ac_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorjUFResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjUFResponse) ProtoMessage() {}

func (x *StorjUFResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_ac_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjUFResponse.ProtoReflect.Descriptor instead.
func (*StorjUFResponse) Descriptor() ([]byte, []int) {
	return file_storj_client_ac_proto_rawDescGZIP(), []int{10}
}

func (x *StorjUFResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjUFResponse) GetSnsds() map[string]string {
	if x != nil {
		return x.Snsds
	}
	return nil
}

// 客户端发起的数据分片元信息更新请求
type StorjUFCRequest struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	ClientId      string                   `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`                                                                         //客户端ID
	Filename      string                   `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`                                                                         //文件名
	Randmap       map[string]*Int32ArrayAC `protobuf:"bytes,3,rep,name=randmap,proto3" json:"randmap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` //各副本对应的随机数集
	Rootmap       map[string][]byte        `protobuf:"bytes,4,rep,name=rootmap,proto3" json:"rootmap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` //各副本对应的默克尔树根哈希
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StorjUFCRequest) Reset() {
	*x = StorjUFCRequest{}
	mi := &file_storj_client_ac_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorjUFCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjUFCRequest) ProtoMessage() {}

func (x *StorjUFCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_ac_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjUFCRequest.ProtoReflect.Descriptor instead.
func (*StorjUFCRequest) Descriptor() ([]byte, []int) {
	return file_storj_client_ac_proto_rawDescGZIP(), []int{11}
}

func (x *StorjUFCRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *StorjUFCRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjUFCRequest) GetRandmap() map[string]*Int32ArrayAC {
	if x != nil {
		return x.Randmap
	}
	return nil
}

func (x *StorjUFCRequest) GetRootmap() map[string][]byte {
	if x != nil {
		return x.Rootmap
	}
	return nil
}

// 审计方对数据分片元信息更新请求的回复
type StorjUFCResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`   //附带信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StorjUFCResponse) Reset() {
	*x = StorjUFCResponse{}
	mi := &file_storj_client_ac_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorjUFCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjUFCResponse) ProtoMessage() {}

func (x *StorjUFCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_ac_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjUFCResponse.ProtoReflect.Descriptor instead.
func (*StorjUFCResponse) Descriptor() ([]byte, []int) {
	return file_storj_client_ac_proto_rawDescGZIP(), []int{12}
}

func (x *StorjUFCResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjUFCResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_storj_client_ac_proto protoreflect.FileDescriptor

const file_storj_client_ac_proto_rawDesc = "" +
	"\n" +
	"\x15storj_client_ac.proto\x12\x05proto\"g\n" +
	"\x13StorjStorageRequest\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12\x18\n" +
	"\aversion\x18\x03 \x01(\x05R\aversion\"P\n" +
	"\x14StorjStorageResponse\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x1c\n" +
	"\n" +
	"sns_for_fd\x18\x02 \x03(\tR\bsnsForFd\"&\n" +
	"\fInt32ArrayAC\x12\x16\n" +
	"\x06values\x18\x01 \x03(\x05R\x06values\"\xd4\x02\n" +
	"\x0fStorjPFCRequest\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12=\n" +
	"\arandmap\x18\x03 \x03(\v2#.proto.StorjPFCRequest.RandmapEntryR\arandmap\x12=\n" +
	"\arootmap\x18\x04 \x03(\v2#.proto.StorjPFCRequest.RootmapEntryR\arootmap\x1aO\n" +
	"\fRandmapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.proto.Int32ArrayACR\x05value:\x028\x01\x1a:\n" +
	"\fRootmapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\"H\n" +
	"\x10StorjPFCResponse\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"J\n" +
	"\x10StorjGFACRequest\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\"\xbe\x01\n" +
	"\x11StorjGFACResponse\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x18\n" +
	"\aversion\x18\x02 \x01(\x05R\aversion\x129\n" +
	"\x05snsds\x18\x03 \x03(\v2#.proto.StorjGFACResponse.SnsdsEntryR\x05snsds\x1a8\n" +
	"\n" +
	"SnsdsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"[\n" +
	"\x0fStorjGRRRequest\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12\x10\n" +
	"\x03rep\x18\x03 \x01(\tR\x03rep\"Q\n" +
	"\x10StorjGRRResponse\x12)\n" +
	"\x05rands\x18\x01 \x01(\v2\x13.proto.Int32ArrayACR\x05rands\x12\x12\n" +
	"\x04root\x18\x02 \x01(\fR\x04root\"b\n" +
	"\x0eStorjUFRequest\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12\x18\n" +
	"\aversion\x18\x03 \x01(\x05R\aversion\"\xa0\x01\n" +
	"\x0fStorjUFResponse\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x127\n" +
	"\x05snsds\x18\x02 \x03(\v2!.proto.StorjUFResponse.SnsdsEntryR\x05snsds\x1a8\n" +
	"\n" +
	"SnsdsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xd4\x02\n" +
	"\x0fStorjUFCRequest\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12=\n" +
	"\arandmap\x18\x03 \x03(\v2#.proto.StorjUFCRequest.RandmapEntryR\arandmap\x12=\n" +
	"\arootmap\x18\x04 \x03(\v2#.proto.StorjUFCRequest.RootmapEntryR\arootmap\x1aO\n" +
	"\fRandmapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.proto.Int32ArrayACR\x05value:\x028\x01\x1a:\n" +
	"\fRootmapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\"H\n" +
	"\x10StorjUFCResponse\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage2\xbc\x03\n" +
	"\x0eStorjACService\x12I\n" +
	"\x0eStorjSelectSNs\x12\x1a.proto.StorjStorageRequest\x1a\x1b.proto.StorjStorageResponse\x12E\n" +
	"\x12StorjPutFileCommit\x12\x16.proto.StorjPFCRequest\x1a\x17.proto.StorjPFCResponse\x12D\n" +
	"\x0fStorjGetFileSNs\x12\x17.proto.StorjGFACRequest\x1a\x18.proto.StorjGFACResponse\x12C\n" +
	"\x10StorjGetRandRoot\x12\x16.proto.StorjGRRRequest\x1a\x17.proto.StorjGRRResponse\x12C\n" +
	"\x12StorjUpdateFileReq\x12\x15.proto.StorjUFRequest\x1a\x16.proto.StorjUFResponse\x12H\n" +
	"\x15StorjUpdateFileCommit\x12\x16.proto.StorjUFCRequest\x1a\x17.proto.StorjUFCResponseB\x04Z\x02./b\x06proto3"

var (
	file_storj_client_ac_proto_rawDescOnce sync.Once
	file_storj_client_ac_proto_rawDescData []byte
)

func file_storj_client_ac_proto_rawDescGZIP() []byte {
	file_storj_client_ac_proto_rawDescOnce.Do(func() {
		file_storj_client_ac_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_storj_client_ac_proto_rawDesc), len(file_storj_client_ac_proto_rawDesc)))
	})
	return file_storj_client_ac_proto_rawDescData
}

var file_storj_client_ac_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_storj_client_ac_proto_goTypes = []any{
	(*StorjStorageRequest)(nil),  // 0: proto.StorjStorageRequest
	(*StorjStorageResponse)(nil), // 1: proto.StorjStorageResponse
	(*Int32ArrayAC)(nil),         // 2: proto.Int32ArrayAC
	(*StorjPFCRequest)(nil),      // 3: proto.StorjPFCRequest
	(*StorjPFCResponse)(nil),     // 4: proto.StorjPFCResponse
	(*StorjGFACRequest)(nil),     // 5: proto.StorjGFACRequest
	(*StorjGFACResponse)(nil),    // 6: proto.StorjGFACResponse
	(*StorjGRRRequest)(nil),      // 7: proto.StorjGRRRequest
	(*StorjGRRResponse)(nil),     // 8: proto.StorjGRRResponse
	(*StorjUFRequest)(nil),       // 9: proto.StorjUFRequest
	(*StorjUFResponse)(nil),      // 10: proto.StorjUFResponse
	(*StorjUFCRequest)(nil),      // 11: proto.StorjUFCRequest
	(*StorjUFCResponse)(nil),     // 12: proto.StorjUFCResponse
	nil,                          // 13: proto.StorjPFCRequest.RandmapEntry
	nil,                          // 14: proto.StorjPFCRequest.RootmapEntry
	nil,                          // 15: proto.StorjGFACResponse.SnsdsEntry
	nil,                          // 16: proto.StorjUFResponse.SnsdsEntry
	nil,                          // 17: proto.StorjUFCRequest.RandmapEntry
	nil,                          // 18: proto.StorjUFCRequest.RootmapEntry
}
var file_storj_client_ac_proto_depIdxs = []int32{
	13, // 0: proto.StorjPFCRequest.randmap:type_name -> proto.StorjPFCRequest.RandmapEntry
	14, // 1: proto.StorjPFCRequest.rootmap:type_name -> proto.StorjPFCRequest.RootmapEntry
	15, // 2: proto.StorjGFACResponse.snsds:type_name -> proto.StorjGFACResponse.SnsdsEntry
	2,  // 3: proto.StorjGRRResponse.rands:type_name -> proto.Int32ArrayAC
	16, // 4: proto.StorjUFResponse.snsds:type_name -> proto.StorjUFResponse.SnsdsEntry
	17, // 5: proto.StorjUFCRequest.randmap:type_name -> proto.StorjUFCRequest.RandmapEntry
	18, // 6: proto.StorjUFCRequest.rootmap:type_name -> proto.StorjUFCRequest.RootmapEntry
	2,  // 7: proto.StorjPFCRequest.RandmapEntry.value:type_name -> proto.Int32ArrayAC
	2,  // 8: proto.StorjUFCRequest.RandmapEntry.value:type_name -> proto.Int32ArrayAC
	0,  // 9: proto.StorjACService.StorjSelectSNs:input_type -> proto.StorjStorageRequest
	3,  // 10: proto.StorjACService.StorjPutFileCommit:input_type -> proto.StorjPFCRequest
	5,  // 11: proto.StorjACService.StorjGetFileSNs:input_type -> proto.StorjGFACRequest
	7,  // 12: proto.StorjACService.StorjGetRandRoot:input_type -> proto.StorjGRRRequest
	9,  // 13: proto.StorjACService.StorjUpdateFileReq:input_type -> proto.StorjUFRequest
	11, // 14: proto.StorjACService.StorjUpdateFileCommit:input_type -> proto.StorjUFCRequest
	1,  // 15: proto.StorjACService.StorjSelectSNs:output_type -> proto.StorjStorageResponse
	4,  // 16: proto.StorjACService.StorjPutFileCommit:output_type -> proto.StorjPFCResponse
	6,  // 17: proto.StorjACService.StorjGetFileSNs:output_type -> proto.StorjGFACResponse
	8,  // 18: proto.StorjACService.StorjGetRandRoot:output_type -> proto.StorjGRRResponse
	10, // 19: proto.StorjACService.StorjUpdateFileReq:output_type -> proto.StorjUFResponse
	12, // 20: proto.StorjACService.StorjUpdateFileCommit:output_type -> proto.StorjUFCResponse
	15, // [15:21] is the sub-list for method output_type
	9,  // [9:15] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_storj_client_ac_proto_init() }
func file_storj_client_ac_proto_init() {
	if File_storj_client_ac_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_storj_client_ac_proto_rawDesc), len(file_storj_client_ac_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_storj_client_ac_proto_goTypes,
		DependencyIndexes: file_storj_client_ac_proto_depIdxs,
		MessageInfos:      file_storj_client_ac_proto_msgTypes,
	}.Build()
	File_storj_client_ac_proto = out.File
	file_storj_client_ac_proto_goTypes = nil
	file_storj_client_ac_proto_depIdxs = nil
}

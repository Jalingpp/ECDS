// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v5.26.1
// source: storj_client_ac.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 客户端发起的存储请求
type StorjStorageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Version  int32  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`  //待存储的文件版本号
}

func (x *StorjStorageRequest) Reset() {
	*x = StorjStorageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_client_ac_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjStorageRequest) ProtoMessage() {}

func (x *StorjStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_ac_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjStorageRequest.ProtoReflect.Descriptor instead.
func (*StorjStorageRequest) Descriptor() ([]byte, []int) {
	return file_storj_client_ac_proto_rawDescGZIP(), []int{0}
}

func (x *StorjStorageRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *StorjStorageRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjStorageRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// 审计方对存储请求的回复
type StorjStorageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string   `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`                   //待存储的文件名
	SnsForFd []string `protobuf:"bytes,2,rep,name=sns_for_fd,json=snsForFd,proto3" json:"sns_for_fd,omitempty"` //用于存储文件副本的存储节点id
}

func (x *StorjStorageResponse) Reset() {
	*x = StorjStorageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_client_ac_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjStorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjStorageResponse) ProtoMessage() {}

func (x *StorjStorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_ac_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjStorageResponse.ProtoReflect.Descriptor instead.
func (*StorjStorageResponse) Descriptor() ([]byte, []int) {
	return file_storj_client_ac_proto_rawDescGZIP(), []int{1}
}

func (x *StorjStorageResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjStorageResponse) GetSnsForFd() []string {
	if x != nil {
		return x.SnsForFd
	}
	return nil
}

type Int32ArrayAC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []int32 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *Int32ArrayAC) Reset() {
	*x = Int32ArrayAC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_client_ac_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int32ArrayAC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32ArrayAC) ProtoMessage() {}

func (x *Int32ArrayAC) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_ac_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32ArrayAC.ProtoReflect.Descriptor instead.
func (*Int32ArrayAC) Descriptor() ([]byte, []int) {
	return file_storj_client_ac_proto_rawDescGZIP(), []int{2}
}

func (x *Int32ArrayAC) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// 客户端发起的写元信息请求
type StorjPFCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string                   `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`                                                                                       //客户端ID
	Filename string                   `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`                                                                                       //文件名
	Randmap  map[string]*Int32ArrayAC `protobuf:"bytes,3,rep,name=randmap,proto3" json:"randmap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //各副本对应的随机数集
	Rootmap  map[string][]byte        `protobuf:"bytes,4,rep,name=rootmap,proto3" json:"rootmap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //各副本对应的默克尔树根哈希
}

func (x *StorjPFCRequest) Reset() {
	*x = StorjPFCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_client_ac_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjPFCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjPFCRequest) ProtoMessage() {}

func (x *StorjPFCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_ac_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjPFCRequest.ProtoReflect.Descriptor instead.
func (*StorjPFCRequest) Descriptor() ([]byte, []int) {
	return file_storj_client_ac_proto_rawDescGZIP(), []int{3}
}

func (x *StorjPFCRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *StorjPFCRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjPFCRequest) GetRandmap() map[string]*Int32ArrayAC {
	if x != nil {
		return x.Randmap
	}
	return nil
}

func (x *StorjPFCRequest) GetRootmap() map[string][]byte {
	if x != nil {
		return x.Rootmap
	}
	return nil
}

// 审计方对写元信息请求的回复
type StorjPFCResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Message  string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`   //附带信息
}

func (x *StorjPFCResponse) Reset() {
	*x = StorjPFCResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_client_ac_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjPFCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjPFCResponse) ProtoMessage() {}

func (x *StorjPFCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_ac_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjPFCResponse.ProtoReflect.Descriptor instead.
func (*StorjPFCResponse) Descriptor() ([]byte, []int) {
	return file_storj_client_ac_proto_rawDescGZIP(), []int{4}
}

func (x *StorjPFCResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjPFCResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 客户端发起的获取文件请求
type StorjGFACRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //请求的文件名
}

func (x *StorjGFACRequest) Reset() {
	*x = StorjGFACRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_client_ac_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjGFACRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjGFACRequest) ProtoMessage() {}

func (x *StorjGFACRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_ac_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjGFACRequest.ProtoReflect.Descriptor instead.
func (*StorjGFACRequest) Descriptor() ([]byte, []int) {
	return file_storj_client_ac_proto_rawDescGZIP(), []int{5}
}

func (x *StorjGFACRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *StorjGFACRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

// 审计方对获取文件请求的回复
type StorjGFACResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string            `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`                                                                                   //请求的文件名
	Version  int32             `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`                                                                                    //文件版本号
	Snsds    map[string]string `protobuf:"bytes,3,rep,name=snsds,proto3" json:"snsds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //数据分片所在的存储节点id，key:filename-i,value:snid
}

func (x *StorjGFACResponse) Reset() {
	*x = StorjGFACResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_client_ac_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjGFACResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjGFACResponse) ProtoMessage() {}

func (x *StorjGFACResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_ac_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjGFACResponse.ProtoReflect.Descriptor instead.
func (*StorjGFACResponse) Descriptor() ([]byte, []int) {
	return file_storj_client_ac_proto_rawDescGZIP(), []int{6}
}

func (x *StorjGFACResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjGFACResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *StorjGFACResponse) GetSnsds() map[string]string {
	if x != nil {
		return x.Snsds
	}
	return nil
}

// 客户端发起的获取文件请求
type StorjGRRRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //请求的文件名
	Rep      string `protobuf:"bytes,3,opt,name=rep,proto3" json:"rep,omitempty"`           //请求的文件副本号
}

func (x *StorjGRRRequest) Reset() {
	*x = StorjGRRRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_client_ac_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjGRRRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjGRRRequest) ProtoMessage() {}

func (x *StorjGRRRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_ac_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjGRRRequest.ProtoReflect.Descriptor instead.
func (*StorjGRRRequest) Descriptor() ([]byte, []int) {
	return file_storj_client_ac_proto_rawDescGZIP(), []int{7}
}

func (x *StorjGRRRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *StorjGRRRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjGRRRequest) GetRep() string {
	if x != nil {
		return x.Rep
	}
	return ""
}

// 审计方对获取文件请求的回复
type StorjGRRResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rands *Int32ArrayAC `protobuf:"bytes,1,opt,name=rands,proto3" json:"rands,omitempty"` //请求的副本对应的随机数集
	Root  []byte        `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`   //请求的副本对应的默克尔树根
}

func (x *StorjGRRResponse) Reset() {
	*x = StorjGRRResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_client_ac_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjGRRResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjGRRResponse) ProtoMessage() {}

func (x *StorjGRRResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_ac_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjGRRResponse.ProtoReflect.Descriptor instead.
func (*StorjGRRResponse) Descriptor() ([]byte, []int) {
	return file_storj_client_ac_proto_rawDescGZIP(), []int{8}
}

func (x *StorjGRRResponse) GetRands() *Int32ArrayAC {
	if x != nil {
		return x.Rands
	}
	return nil
}

func (x *StorjGRRResponse) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

// 客户端发起的文件数据更新请求
type StorjUFRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //文件名
	Version  int32  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`  //文件版本号
}

func (x *StorjUFRequest) Reset() {
	*x = StorjUFRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_client_ac_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjUFRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjUFRequest) ProtoMessage() {}

func (x *StorjUFRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_ac_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjUFRequest.ProtoReflect.Descriptor instead.
func (*StorjUFRequest) Descriptor() ([]byte, []int) {
	return file_storj_client_ac_proto_rawDescGZIP(), []int{9}
}

func (x *StorjUFRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *StorjUFRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjUFRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// 审计方对数据分片元信息更新请求的回复
type StorjUFResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string            `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`                                                                                   //待更新的文件名
	Snsds    map[string]string `protobuf:"bytes,2,rep,name=snsds,proto3" json:"snsds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //数据分片所在的存储节点id，key:filename-i,value:snid
}

func (x *StorjUFResponse) Reset() {
	*x = StorjUFResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_client_ac_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjUFResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjUFResponse) ProtoMessage() {}

func (x *StorjUFResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_ac_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjUFResponse.ProtoReflect.Descriptor instead.
func (*StorjUFResponse) Descriptor() ([]byte, []int) {
	return file_storj_client_ac_proto_rawDescGZIP(), []int{10}
}

func (x *StorjUFResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjUFResponse) GetSnsds() map[string]string {
	if x != nil {
		return x.Snsds
	}
	return nil
}

// 客户端发起的数据分片元信息更新请求
type StorjUFCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string                   `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`                                                                                       //客户端ID
	Filename string                   `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`                                                                                       //文件名
	Randmap  map[string]*Int32ArrayAC `protobuf:"bytes,3,rep,name=randmap,proto3" json:"randmap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //各副本对应的随机数集
	Rootmap  map[string][]byte        `protobuf:"bytes,4,rep,name=rootmap,proto3" json:"rootmap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //各副本对应的默克尔树根哈希
}

func (x *StorjUFCRequest) Reset() {
	*x = StorjUFCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_client_ac_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjUFCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjUFCRequest) ProtoMessage() {}

func (x *StorjUFCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_ac_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjUFCRequest.ProtoReflect.Descriptor instead.
func (*StorjUFCRequest) Descriptor() ([]byte, []int) {
	return file_storj_client_ac_proto_rawDescGZIP(), []int{11}
}

func (x *StorjUFCRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *StorjUFCRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjUFCRequest) GetRandmap() map[string]*Int32ArrayAC {
	if x != nil {
		return x.Randmap
	}
	return nil
}

func (x *StorjUFCRequest) GetRootmap() map[string][]byte {
	if x != nil {
		return x.Rootmap
	}
	return nil
}

// 审计方对数据分片元信息更新请求的回复
type StorjUFCResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Message  string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`   //附带信息
}

func (x *StorjUFCResponse) Reset() {
	*x = StorjUFCResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_client_ac_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjUFCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjUFCResponse) ProtoMessage() {}

func (x *StorjUFCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storj_client_ac_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjUFCResponse.ProtoReflect.Descriptor instead.
func (*StorjUFCResponse) Descriptor() ([]byte, []int) {
	return file_storj_client_ac_proto_rawDescGZIP(), []int{12}
}

func (x *StorjUFCResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjUFCResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_storj_client_ac_proto protoreflect.FileDescriptor

var file_storj_client_ac_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x6a, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x67,
	0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x50, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x72, 0x6a,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x73,
	0x6e, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x66, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x46, 0x64, 0x22, 0x26, 0x0a, 0x0c, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x43, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0xd4, 0x02, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x50, 0x46, 0x43, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a,
	0x07, 0x72, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x50, 0x46, 0x43, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x70, 0x12, 0x3d, 0x0a, 0x07,
	0x72, 0x6f, 0x6f, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x50, 0x46, 0x43, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x6d, 0x61, 0x70, 0x1a, 0x4f, 0x0a, 0x0c, 0x52,
	0x61, 0x6e, 0x64, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41,
	0x43, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c,
	0x52, 0x6f, 0x6f, 0x74, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x48, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72,
	0x6a, 0x50, 0x46, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x4a, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x47, 0x46, 0x41, 0x43, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbe,
	0x01, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x47, 0x46, 0x41, 0x43, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x6e,
	0x73, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x47, 0x46, 0x41, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x6e, 0x73, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x73, 0x6e, 0x73, 0x64, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x53, 0x6e, 0x73, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x5b, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x47, 0x52, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x70, 0x22, 0x51, 0x0a, 0x10,
	0x53, 0x74, 0x6f, 0x72, 0x6a, 0x47, 0x52, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x29, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x41, 0x43, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x22,
	0x62, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x55, 0x46, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xa0, 0x01, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x55, 0x46, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x6e, 0x73, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a,
	0x55, 0x46, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x6e, 0x73, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x73, 0x6e, 0x73, 0x64, 0x73, 0x1a, 0x38, 0x0a, 0x0a,
	0x53, 0x6e, 0x73, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd4, 0x02, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72, 0x6a,
	0x55, 0x46, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x6a, 0x55, 0x46, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x61, 0x6e, 0x64,
	0x6d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x64, 0x6d, 0x61,
	0x70, 0x12, 0x3d, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a,
	0x55, 0x46, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x6d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x6d, 0x61, 0x70,
	0x1a, 0x4f, 0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x41, 0x43, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x52, 0x6f, 0x6f, 0x74, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x48, 0x0a,
	0x10, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x55, 0x46, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xbc, 0x03, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x72,
	0x6a, 0x41, 0x43, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x53, 0x74,
	0x6f, 0x72, 0x6a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x4e, 0x73, 0x12, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x50, 0x75,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x50, 0x46, 0x43, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x6a, 0x50, 0x46, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0f,
	0x53, 0x74, 0x6f, 0x72, 0x6a, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x4e, 0x73, 0x12,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x47, 0x46, 0x41,
	0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x47, 0x46, 0x41, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x6e, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x6a, 0x47, 0x52, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x47, 0x52, 0x52, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x72, 0x6a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x55, 0x46, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x6a, 0x55, 0x46, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x15,
	0x53, 0x74, 0x6f, 0x72, 0x6a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x6a, 0x55, 0x46, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x55, 0x46, 0x43, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_storj_client_ac_proto_rawDescOnce sync.Once
	file_storj_client_ac_proto_rawDescData = file_storj_client_ac_proto_rawDesc
)

func file_storj_client_ac_proto_rawDescGZIP() []byte {
	file_storj_client_ac_proto_rawDescOnce.Do(func() {
		file_storj_client_ac_proto_rawDescData = protoimpl.X.CompressGZIP(file_storj_client_ac_proto_rawDescData)
	})
	return file_storj_client_ac_proto_rawDescData
}

var file_storj_client_ac_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_storj_client_ac_proto_goTypes = []interface{}{
	(*StorjStorageRequest)(nil),  // 0: proto.StorjStorageRequest
	(*StorjStorageResponse)(nil), // 1: proto.StorjStorageResponse
	(*Int32ArrayAC)(nil),         // 2: proto.Int32ArrayAC
	(*StorjPFCRequest)(nil),      // 3: proto.StorjPFCRequest
	(*StorjPFCResponse)(nil),     // 4: proto.StorjPFCResponse
	(*StorjGFACRequest)(nil),     // 5: proto.StorjGFACRequest
	(*StorjGFACResponse)(nil),    // 6: proto.StorjGFACResponse
	(*StorjGRRRequest)(nil),      // 7: proto.StorjGRRRequest
	(*StorjGRRResponse)(nil),     // 8: proto.StorjGRRResponse
	(*StorjUFRequest)(nil),       // 9: proto.StorjUFRequest
	(*StorjUFResponse)(nil),      // 10: proto.StorjUFResponse
	(*StorjUFCRequest)(nil),      // 11: proto.StorjUFCRequest
	(*StorjUFCResponse)(nil),     // 12: proto.StorjUFCResponse
	nil,                          // 13: proto.StorjPFCRequest.RandmapEntry
	nil,                          // 14: proto.StorjPFCRequest.RootmapEntry
	nil,                          // 15: proto.StorjGFACResponse.SnsdsEntry
	nil,                          // 16: proto.StorjUFResponse.SnsdsEntry
	nil,                          // 17: proto.StorjUFCRequest.RandmapEntry
	nil,                          // 18: proto.StorjUFCRequest.RootmapEntry
}
var file_storj_client_ac_proto_depIdxs = []int32{
	13, // 0: proto.StorjPFCRequest.randmap:type_name -> proto.StorjPFCRequest.RandmapEntry
	14, // 1: proto.StorjPFCRequest.rootmap:type_name -> proto.StorjPFCRequest.RootmapEntry
	15, // 2: proto.StorjGFACResponse.snsds:type_name -> proto.StorjGFACResponse.SnsdsEntry
	2,  // 3: proto.StorjGRRResponse.rands:type_name -> proto.Int32ArrayAC
	16, // 4: proto.StorjUFResponse.snsds:type_name -> proto.StorjUFResponse.SnsdsEntry
	17, // 5: proto.StorjUFCRequest.randmap:type_name -> proto.StorjUFCRequest.RandmapEntry
	18, // 6: proto.StorjUFCRequest.rootmap:type_name -> proto.StorjUFCRequest.RootmapEntry
	2,  // 7: proto.StorjPFCRequest.RandmapEntry.value:type_name -> proto.Int32ArrayAC
	2,  // 8: proto.StorjUFCRequest.RandmapEntry.value:type_name -> proto.Int32ArrayAC
	0,  // 9: proto.StorjACService.StorjSelectSNs:input_type -> proto.StorjStorageRequest
	3,  // 10: proto.StorjACService.StorjPutFileCommit:input_type -> proto.StorjPFCRequest
	5,  // 11: proto.StorjACService.StorjGetFileSNs:input_type -> proto.StorjGFACRequest
	7,  // 12: proto.StorjACService.StorjGetRandRoot:input_type -> proto.StorjGRRRequest
	9,  // 13: proto.StorjACService.StorjUpdateFileReq:input_type -> proto.StorjUFRequest
	11, // 14: proto.StorjACService.StorjUpdateFileCommit:input_type -> proto.StorjUFCRequest
	1,  // 15: proto.StorjACService.StorjSelectSNs:output_type -> proto.StorjStorageResponse
	4,  // 16: proto.StorjACService.StorjPutFileCommit:output_type -> proto.StorjPFCResponse
	6,  // 17: proto.StorjACService.StorjGetFileSNs:output_type -> proto.StorjGFACResponse
	8,  // 18: proto.StorjACService.StorjGetRandRoot:output_type -> proto.StorjGRRResponse
	10, // 19: proto.StorjACService.StorjUpdateFileReq:output_type -> proto.StorjUFResponse
	12, // 20: proto.StorjACService.StorjUpdateFileCommit:output_type -> proto.StorjUFCResponse
	15, // [15:21] is the sub-list for method output_type
	9,  // [9:15] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_storj_client_ac_proto_init() }
func file_storj_client_ac_proto_init() {
	if File_storj_client_ac_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_storj_client_ac_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjStorageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_client_ac_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjStorageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_client_ac_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int32ArrayAC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_client_ac_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjPFCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_client_ac_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjPFCResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_client_ac_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjGFACRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_client_ac_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjGFACResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_client_ac_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjGRRRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_client_ac_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjGRRResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_client_ac_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjUFRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_client_ac_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjUFResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_client_ac_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjUFCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_client_ac_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjUFCResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_storj_client_ac_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_storj_client_ac_proto_goTypes,
		DependencyIndexes: file_storj_client_ac_proto_depIdxs,
		MessageInfos:      file_storj_client_ac_proto_msgTypes,
	}.Build()
	File_storj_client_ac_proto = out.File
	file_storj_client_ac_proto_rawDesc = nil
	file_storj_client_ac_proto_goTypes = nil
	file_storj_client_ac_proto_depIdxs = nil
}

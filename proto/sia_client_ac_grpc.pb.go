// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: sia_client_ac.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SiaACServiceClient is the client API for SiaACService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SiaACServiceClient interface {
	SiaSelectSNs(ctx context.Context, in *SiaStorageRequest, opts ...grpc.CallOption) (*SiaStorageResponse, error)
	SiaPutFileCommit(ctx context.Context, in *SiaPFCRequest, opts ...grpc.CallOption) (*SiaPFCResponse, error)
	SiaGetFileSNs(ctx context.Context, in *SiaGFACRequest, opts ...grpc.CallOption) (*SiaGFACResponse, error)
	SiaGetDSErrReport(ctx context.Context, in *SiaGDSERequest, opts ...grpc.CallOption) (*SiaGDSEResponse, error)
	SiaGetDSPSSNs(ctx context.Context, in *SiaGDSPSSNRequest, opts ...grpc.CallOption) (*SiaGDSPSSNResponse, error)
	SiaUpdateFileReq(ctx context.Context, in *SiaUFRequest, opts ...grpc.CallOption) (*SiaUFResponse, error)
	SiaUpdateFileCommit(ctx context.Context, in *SiaUFCRequest, opts ...grpc.CallOption) (*SiaUFCResponse, error)
}

type siaACServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSiaACServiceClient(cc grpc.ClientConnInterface) SiaACServiceClient {
	return &siaACServiceClient{cc}
}

func (c *siaACServiceClient) SiaSelectSNs(ctx context.Context, in *SiaStorageRequest, opts ...grpc.CallOption) (*SiaStorageResponse, error) {
	out := new(SiaStorageResponse)
	err := c.cc.Invoke(ctx, "/proto.SiaACService/SiaSelectSNs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siaACServiceClient) SiaPutFileCommit(ctx context.Context, in *SiaPFCRequest, opts ...grpc.CallOption) (*SiaPFCResponse, error) {
	out := new(SiaPFCResponse)
	err := c.cc.Invoke(ctx, "/proto.SiaACService/SiaPutFileCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siaACServiceClient) SiaGetFileSNs(ctx context.Context, in *SiaGFACRequest, opts ...grpc.CallOption) (*SiaGFACResponse, error) {
	out := new(SiaGFACResponse)
	err := c.cc.Invoke(ctx, "/proto.SiaACService/SiaGetFileSNs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siaACServiceClient) SiaGetDSErrReport(ctx context.Context, in *SiaGDSERequest, opts ...grpc.CallOption) (*SiaGDSEResponse, error) {
	out := new(SiaGDSEResponse)
	err := c.cc.Invoke(ctx, "/proto.SiaACService/SiaGetDSErrReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siaACServiceClient) SiaGetDSPSSNs(ctx context.Context, in *SiaGDSPSSNRequest, opts ...grpc.CallOption) (*SiaGDSPSSNResponse, error) {
	out := new(SiaGDSPSSNResponse)
	err := c.cc.Invoke(ctx, "/proto.SiaACService/SiaGetDSPSSNs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siaACServiceClient) SiaUpdateFileReq(ctx context.Context, in *SiaUFRequest, opts ...grpc.CallOption) (*SiaUFResponse, error) {
	out := new(SiaUFResponse)
	err := c.cc.Invoke(ctx, "/proto.SiaACService/SiaUpdateFileReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siaACServiceClient) SiaUpdateFileCommit(ctx context.Context, in *SiaUFCRequest, opts ...grpc.CallOption) (*SiaUFCResponse, error) {
	out := new(SiaUFCResponse)
	err := c.cc.Invoke(ctx, "/proto.SiaACService/SiaUpdateFileCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SiaACServiceServer is the server API for SiaACService service.
// All implementations must embed UnimplementedSiaACServiceServer
// for forward compatibility
type SiaACServiceServer interface {
	SiaSelectSNs(context.Context, *SiaStorageRequest) (*SiaStorageResponse, error)
	SiaPutFileCommit(context.Context, *SiaPFCRequest) (*SiaPFCResponse, error)
	SiaGetFileSNs(context.Context, *SiaGFACRequest) (*SiaGFACResponse, error)
	SiaGetDSErrReport(context.Context, *SiaGDSERequest) (*SiaGDSEResponse, error)
	SiaGetDSPSSNs(context.Context, *SiaGDSPSSNRequest) (*SiaGDSPSSNResponse, error)
	SiaUpdateFileReq(context.Context, *SiaUFRequest) (*SiaUFResponse, error)
	SiaUpdateFileCommit(context.Context, *SiaUFCRequest) (*SiaUFCResponse, error)
	mustEmbedUnimplementedSiaACServiceServer()
}

// UnimplementedSiaACServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSiaACServiceServer struct {
}

func (UnimplementedSiaACServiceServer) SiaSelectSNs(context.Context, *SiaStorageRequest) (*SiaStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SiaSelectSNs not implemented")
}
func (UnimplementedSiaACServiceServer) SiaPutFileCommit(context.Context, *SiaPFCRequest) (*SiaPFCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SiaPutFileCommit not implemented")
}
func (UnimplementedSiaACServiceServer) SiaGetFileSNs(context.Context, *SiaGFACRequest) (*SiaGFACResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SiaGetFileSNs not implemented")
}
func (UnimplementedSiaACServiceServer) SiaGetDSErrReport(context.Context, *SiaGDSERequest) (*SiaGDSEResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SiaGetDSErrReport not implemented")
}
func (UnimplementedSiaACServiceServer) SiaGetDSPSSNs(context.Context, *SiaGDSPSSNRequest) (*SiaGDSPSSNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SiaGetDSPSSNs not implemented")
}
func (UnimplementedSiaACServiceServer) SiaUpdateFileReq(context.Context, *SiaUFRequest) (*SiaUFResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SiaUpdateFileReq not implemented")
}
func (UnimplementedSiaACServiceServer) SiaUpdateFileCommit(context.Context, *SiaUFCRequest) (*SiaUFCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SiaUpdateFileCommit not implemented")
}
func (UnimplementedSiaACServiceServer) mustEmbedUnimplementedSiaACServiceServer() {}

// UnsafeSiaACServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SiaACServiceServer will
// result in compilation errors.
type UnsafeSiaACServiceServer interface {
	mustEmbedUnimplementedSiaACServiceServer()
}

func RegisterSiaACServiceServer(s grpc.ServiceRegistrar, srv SiaACServiceServer) {
	s.RegisterService(&SiaACService_ServiceDesc, srv)
}

func _SiaACService_SiaSelectSNs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiaStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiaACServiceServer).SiaSelectSNs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SiaACService/SiaSelectSNs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiaACServiceServer).SiaSelectSNs(ctx, req.(*SiaStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiaACService_SiaPutFileCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiaPFCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiaACServiceServer).SiaPutFileCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SiaACService/SiaPutFileCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiaACServiceServer).SiaPutFileCommit(ctx, req.(*SiaPFCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiaACService_SiaGetFileSNs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiaGFACRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiaACServiceServer).SiaGetFileSNs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SiaACService/SiaGetFileSNs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiaACServiceServer).SiaGetFileSNs(ctx, req.(*SiaGFACRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiaACService_SiaGetDSErrReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiaGDSERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiaACServiceServer).SiaGetDSErrReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SiaACService/SiaGetDSErrReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiaACServiceServer).SiaGetDSErrReport(ctx, req.(*SiaGDSERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiaACService_SiaGetDSPSSNs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiaGDSPSSNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiaACServiceServer).SiaGetDSPSSNs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SiaACService/SiaGetDSPSSNs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiaACServiceServer).SiaGetDSPSSNs(ctx, req.(*SiaGDSPSSNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiaACService_SiaUpdateFileReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiaUFRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiaACServiceServer).SiaUpdateFileReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SiaACService/SiaUpdateFileReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiaACServiceServer).SiaUpdateFileReq(ctx, req.(*SiaUFRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiaACService_SiaUpdateFileCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiaUFCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiaACServiceServer).SiaUpdateFileCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SiaACService/SiaUpdateFileCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiaACServiceServer).SiaUpdateFileCommit(ctx, req.(*SiaUFCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SiaACService_ServiceDesc is the grpc.ServiceDesc for SiaACService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SiaACService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SiaACService",
	HandlerType: (*SiaACServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SiaSelectSNs",
			Handler:    _SiaACService_SiaSelectSNs_Handler,
		},
		{
			MethodName: "SiaPutFileCommit",
			Handler:    _SiaACService_SiaPutFileCommit_Handler,
		},
		{
			MethodName: "SiaGetFileSNs",
			Handler:    _SiaACService_SiaGetFileSNs_Handler,
		},
		{
			MethodName: "SiaGetDSErrReport",
			Handler:    _SiaACService_SiaGetDSErrReport_Handler,
		},
		{
			MethodName: "SiaGetDSPSSNs",
			Handler:    _SiaACService_SiaGetDSPSSNs_Handler,
		},
		{
			MethodName: "SiaUpdateFileReq",
			Handler:    _SiaACService_SiaUpdateFileReq_Handler,
		},
		{
			MethodName: "SiaUpdateFileCommit",
			Handler:    _SiaACService_SiaUpdateFileCommit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sia_client_ac.proto",
}

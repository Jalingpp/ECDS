// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.26.1
// source: client_ac.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 客户端发起的获取Params和G的请求
type GetPGRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPGRequest) Reset() {
	*x = GetPGRequest{}
	mi := &file_client_ac_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPGRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPGRequest) ProtoMessage() {}

func (x *GetPGRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_ac_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPGRequest.ProtoReflect.Descriptor instead.
func (*GetPGRequest) Descriptor() ([]byte, []int) {
	return file_client_ac_proto_rawDescGZIP(), []int{0}
}

func (x *GetPGRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

// 审计方对客户端获取Params和G的回复
type GetPGResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Params        string                 `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"` //用于构造pairing的参数
	G             []byte                 `protobuf:"bytes,2,opt,name=g,proto3" json:"g,omitempty"`           //用于计算的公钥G
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPGResponse) Reset() {
	*x = GetPGResponse{}
	mi := &file_client_ac_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPGResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPGResponse) ProtoMessage() {}

func (x *GetPGResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_ac_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPGResponse.ProtoReflect.Descriptor instead.
func (*GetPGResponse) Descriptor() ([]byte, []int) {
	return file_client_ac_proto_rawDescGZIP(), []int{1}
}

func (x *GetPGResponse) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

func (x *GetPGResponse) GetG() []byte {
	if x != nil {
		return x.G
	}
	return nil
}

// 客户端发起的注册请求
type RegistACRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	PK            []byte                 `protobuf:"bytes,2,opt,name=PK,proto3" json:"PK,omitempty"`             // 字节切片类型的PK字段
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegistACRequest) Reset() {
	*x = RegistACRequest{}
	mi := &file_client_ac_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegistACRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistACRequest) ProtoMessage() {}

func (x *RegistACRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_ac_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistACRequest.ProtoReflect.Descriptor instead.
func (*RegistACRequest) Descriptor() ([]byte, []int) {
	return file_client_ac_proto_rawDescGZIP(), []int{2}
}

func (x *RegistACRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *RegistACRequest) GetPK() []byte {
	if x != nil {
		return x.PK
	}
	return nil
}

// 审计方对客户端注册请求的回复
type RegistACResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`   //回复信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegistACResponse) Reset() {
	*x = RegistACResponse{}
	mi := &file_client_ac_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegistACResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistACResponse) ProtoMessage() {}

func (x *RegistACResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_ac_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistACResponse.ProtoReflect.Descriptor instead.
func (*RegistACResponse) Descriptor() ([]byte, []int) {
	return file_client_ac_proto_rawDescGZIP(), []int{3}
}

func (x *RegistACResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *RegistACResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 客户端发起的存储请求
type StorageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StorageRequest) Reset() {
	*x = StorageRequest{}
	mi := &file_client_ac_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageRequest) ProtoMessage() {}

func (x *StorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_ac_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageRequest.ProtoReflect.Descriptor instead.
func (*StorageRequest) Descriptor() ([]byte, []int) {
	return file_client_ac_proto_rawDescGZIP(), []int{4}
}

func (x *StorageRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *StorageRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

// 审计方对存储请求的回复
type StorageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`                   //待存储的文件名
	SnsForDs      []string               `protobuf:"bytes,2,rep,name=sns_for_ds,json=snsForDs,proto3" json:"sns_for_ds,omitempty"` //用于存储数据分片的存储节点id，下标对应分片的序号
	SnsForPs      []string               `protobuf:"bytes,3,rep,name=sns_for_ps,json=snsForPs,proto3" json:"sns_for_ps,omitempty"` //用于存储校验分片的存储节点id，下标对应分片的序号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StorageResponse) Reset() {
	*x = StorageResponse{}
	mi := &file_client_ac_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageResponse) ProtoMessage() {}

func (x *StorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_ac_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageResponse.ProtoReflect.Descriptor instead.
func (*StorageResponse) Descriptor() ([]byte, []int) {
	return file_client_ac_proto_rawDescGZIP(), []int{5}
}

func (x *StorageResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorageResponse) GetSnsForDs() []string {
	if x != nil {
		return x.SnsForDs
	}
	return nil
}

func (x *StorageResponse) GetSnsForPs() []string {
	if x != nil {
		return x.SnsForPs
	}
	return nil
}

// 客户端发起的写元信息请求
type PFCRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`                                                                               //客户端ID
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`                                                                               //文件名
	Versions      map[string]int32       `protobuf:"bytes,3,rep,name=versions,proto3" json:"versions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`    //各分片对应的版本号
	Timestamps    map[string]string      `protobuf:"bytes,4,rep,name=timestamps,proto3" json:"timestamps,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` //各分片对应的时间戳
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PFCRequest) Reset() {
	*x = PFCRequest{}
	mi := &file_client_ac_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PFCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PFCRequest) ProtoMessage() {}

func (x *PFCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_ac_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PFCRequest.ProtoReflect.Descriptor instead.
func (*PFCRequest) Descriptor() ([]byte, []int) {
	return file_client_ac_proto_rawDescGZIP(), []int{6}
}

func (x *PFCRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *PFCRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *PFCRequest) GetVersions() map[string]int32 {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *PFCRequest) GetTimestamps() map[string]string {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

// 审计方对写元信息请求的回复
type PFCResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`   //附带信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PFCResponse) Reset() {
	*x = PFCResponse{}
	mi := &file_client_ac_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PFCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PFCResponse) ProtoMessage() {}

func (x *PFCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_ac_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PFCResponse.ProtoReflect.Descriptor instead.
func (*PFCResponse) Descriptor() ([]byte, []int) {
	return file_client_ac_proto_rawDescGZIP(), []int{7}
}

func (x *PFCResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *PFCResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 客户端发起的获取文件请求
type GFACRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //请求的文件名
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GFACRequest) Reset() {
	*x = GFACRequest{}
	mi := &file_client_ac_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GFACRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GFACRequest) ProtoMessage() {}

func (x *GFACRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_ac_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GFACRequest.ProtoReflect.Descriptor instead.
func (*GFACRequest) Descriptor() ([]byte, []int) {
	return file_client_ac_proto_rawDescGZIP(), []int{8}
}

func (x *GFACRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *GFACRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

// 审计方对获取文件请求的回复
type GFACResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`                                                                     //请求的文件名
	Snsds         map[string]string      `protobuf:"bytes,2,rep,name=snsds,proto3" json:"snsds,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` //数据分片所在的存储节点id，key:dsno,value:snid
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GFACResponse) Reset() {
	*x = GFACResponse{}
	mi := &file_client_ac_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GFACResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GFACResponse) ProtoMessage() {}

func (x *GFACResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_ac_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GFACResponse.ProtoReflect.Descriptor instead.
func (*GFACResponse) Descriptor() ([]byte, []int) {
	return file_client_ac_proto_rawDescGZIP(), []int{9}
}

func (x *GFACResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *GFACResponse) GetSnsds() map[string]string {
	if x != nil {
		return x.Snsds
	}
	return nil
}

// 客户端发起的获取分片错误仲裁请求
type GDSERequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`                                                                           //客户端ID
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`                                                                           //请求的文件名
	Errdssn       map[string]string      `protobuf:"bytes,3,rep,name=errdssn,proto3" json:"errdssn,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`   //发生错误的存储节点id,key:dsno,value:snid
	Blacksns      map[string]string      `protobuf:"bytes,4,rep,name=blacksns,proto3" json:"blacksns,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` //存储节点黑名单,key:snid,value:h-黑,b-白
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GDSERequest) Reset() {
	*x = GDSERequest{}
	mi := &file_client_ac_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GDSERequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GDSERequest) ProtoMessage() {}

func (x *GDSERequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_ac_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GDSERequest.ProtoReflect.Descriptor instead.
func (*GDSERequest) Descriptor() ([]byte, []int) {
	return file_client_ac_proto_rawDescGZIP(), []int{10}
}

func (x *GDSERequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *GDSERequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *GDSERequest) GetErrdssn() map[string]string {
	if x != nil {
		return x.Errdssn
	}
	return nil
}

func (x *GDSERequest) GetBlacksns() map[string]string {
	if x != nil {
		return x.Blacksns
	}
	return nil
}

// 审计方对获取分片错误仲裁请求的回复
type GDSEResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`                                                                     //请求的文件名
	Snsds         map[string]string      `protobuf:"bytes,2,rep,name=snsds,proto3" json:"snsds,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` //校验分片所在的存储节点id，key:dsno,value:snid
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GDSEResponse) Reset() {
	*x = GDSEResponse{}
	mi := &file_client_ac_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GDSEResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GDSEResponse) ProtoMessage() {}

func (x *GDSEResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_ac_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GDSEResponse.ProtoReflect.Descriptor instead.
func (*GDSEResponse) Descriptor() ([]byte, []int) {
	return file_client_ac_proto_rawDescGZIP(), []int{11}
}

func (x *GDSEResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *GDSEResponse) GetSnsds() map[string]string {
	if x != nil {
		return x.Snsds
	}
	return nil
}

// 客户端发起的获取分片所在存储节点的请求
type GDSSNRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`  //客户端ID
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`  //请求的文件名
	Dsno          string                 `protobuf:"bytes,3,opt,name=dsno,proto3" json:"dsno,omitempty"`          //请求的分片序号
	Isupdate      bool                   `protobuf:"varint,4,opt,name=isupdate,proto3" json:"isupdate,omitempty"` //后续是否更新
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GDSSNRequest) Reset() {
	*x = GDSSNRequest{}
	mi := &file_client_ac_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GDSSNRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GDSSNRequest) ProtoMessage() {}

func (x *GDSSNRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_ac_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GDSSNRequest.ProtoReflect.Descriptor instead.
func (*GDSSNRequest) Descriptor() ([]byte, []int) {
	return file_client_ac_proto_rawDescGZIP(), []int{12}
}

func (x *GDSSNRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *GDSSNRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *GDSSNRequest) GetDsno() string {
	if x != nil {
		return x.Dsno
	}
	return ""
}

func (x *GDSSNRequest) GetIsupdate() bool {
	if x != nil {
		return x.Isupdate
	}
	return false
}

// 审计方对获取分片所在存储节点请求的回复
type GDSSNResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`                                                                     //请求的文件名
	Snsds         map[string]string      `protobuf:"bytes,2,rep,name=snsds,proto3" json:"snsds,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` //请求分片所在的存储节点id，key:dsno,value:snid（分片可能包含dsnum个子分片）
	Snsps         map[string]string      `protobuf:"bytes,3,rep,name=snsps,proto3" json:"snsps,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` //校验分片所在的存储节点id，key:dsno,value:snid
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GDSSNResponse) Reset() {
	*x = GDSSNResponse{}
	mi := &file_client_ac_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GDSSNResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GDSSNResponse) ProtoMessage() {}

func (x *GDSSNResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_ac_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GDSSNResponse.ProtoReflect.Descriptor instead.
func (*GDSSNResponse) Descriptor() ([]byte, []int) {
	return file_client_ac_proto_rawDescGZIP(), []int{13}
}

func (x *GDSSNResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *GDSSNResponse) GetSnsds() map[string]string {
	if x != nil {
		return x.Snsds
	}
	return nil
}

func (x *GDSSNResponse) GetSnsps() map[string]string {
	if x != nil {
		return x.Snsps
	}
	return nil
}

// 客户端发起的数据分片元信息更新请求
type UDSCRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`                                                                               //客户端ID
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`                                                                               //文件名
	Dsnos         []string               `protobuf:"bytes,3,rep,name=dsnos,proto3" json:"dsnos,omitempty"`                                                                                     //所有分片序号，包括数据分片和校验分片
	Versions      map[string]int32       `protobuf:"bytes,4,rep,name=versions,proto3" json:"versions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`    //各分片对应的版本号
	Timestamps    map[string]string      `protobuf:"bytes,5,rep,name=timestamps,proto3" json:"timestamps,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` //各分片对应的时间戳
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UDSCRequest) Reset() {
	*x = UDSCRequest{}
	mi := &file_client_ac_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UDSCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UDSCRequest) ProtoMessage() {}

func (x *UDSCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_ac_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UDSCRequest.ProtoReflect.Descriptor instead.
func (*UDSCRequest) Descriptor() ([]byte, []int) {
	return file_client_ac_proto_rawDescGZIP(), []int{14}
}

func (x *UDSCRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *UDSCRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *UDSCRequest) GetDsnos() []string {
	if x != nil {
		return x.Dsnos
	}
	return nil
}

func (x *UDSCRequest) GetVersions() map[string]int32 {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *UDSCRequest) GetTimestamps() map[string]string {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

// 审计方对数据分片元信息更新请求的回复
type UDSCResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`                                                                         //待存储的文件名
	Dssnmap       map[string]string      `protobuf:"bytes,2,rep,name=dssnmap,proto3" json:"dssnmap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` //已完成元信息更新的分片列表,key:dsno,value:snid
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`                                                                           //附带信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UDSCResponse) Reset() {
	*x = UDSCResponse{}
	mi := &file_client_ac_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UDSCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UDSCResponse) ProtoMessage() {}

func (x *UDSCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_ac_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UDSCResponse.ProtoReflect.Descriptor instead.
func (*UDSCResponse) Descriptor() ([]byte, []int) {
	return file_client_ac_proto_rawDescGZIP(), []int{15}
}

func (x *UDSCResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *UDSCResponse) GetDssnmap() map[string]string {
	if x != nil {
		return x.Dssnmap
	}
	return nil
}

func (x *UDSCResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_client_ac_proto protoreflect.FileDescriptor

const file_client_ac_proto_rawDesc = "" +
	"\n" +
	"\x0fclient_ac.proto\x12\x05proto\"*\n" +
	"\fGetPGRequest\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\"5\n" +
	"\rGetPGResponse\x12\x16\n" +
	"\x06params\x18\x01 \x01(\tR\x06params\x12\f\n" +
	"\x01g\x18\x02 \x01(\fR\x01g\"=\n" +
	"\x0fRegistACRequest\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\x12\x0e\n" +
	"\x02PK\x18\x02 \x01(\fR\x02PK\"H\n" +
	"\x10RegistACResponse\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"H\n" +
	"\x0eStorageRequest\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\"i\n" +
	"\x0fStorageResponse\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x1c\n" +
	"\n" +
	"sns_for_ds\x18\x02 \x03(\tR\bsnsForDs\x12\x1c\n" +
	"\n" +
	"sns_for_ps\x18\x03 \x03(\tR\bsnsForPs\"\xc0\x02\n" +
	"\n" +
	"PFCRequest\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12;\n" +
	"\bversions\x18\x03 \x03(\v2\x1f.proto.PFCRequest.VersionsEntryR\bversions\x12A\n" +
	"\n" +
	"timestamps\x18\x04 \x03(\v2!.proto.PFCRequest.TimestampsEntryR\n" +
	"timestamps\x1a;\n" +
	"\rVersionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a=\n" +
	"\x0fTimestampsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"C\n" +
	"\vPFCResponse\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"E\n" +
	"\vGFACRequest\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\"\x9a\x01\n" +
	"\fGFACResponse\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x124\n" +
	"\x05snsds\x18\x02 \x03(\v2\x1e.proto.GFACResponse.SnsdsEntryR\x05snsds\x1a8\n" +
	"\n" +
	"SnsdsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb7\x02\n" +
	"\vGDSERequest\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x129\n" +
	"\aerrdssn\x18\x03 \x03(\v2\x1f.proto.GDSERequest.ErrdssnEntryR\aerrdssn\x12<\n" +
	"\bblacksns\x18\x04 \x03(\v2 .proto.GDSERequest.BlacksnsEntryR\bblacksns\x1a:\n" +
	"\fErrdssnEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a;\n" +
	"\rBlacksnsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x9a\x01\n" +
	"\fGDSEResponse\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x124\n" +
	"\x05snsds\x18\x02 \x03(\v2\x1e.proto.GDSEResponse.SnsdsEntryR\x05snsds\x1a8\n" +
	"\n" +
	"SnsdsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"v\n" +
	"\fGDSSNRequest\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12\x12\n" +
	"\x04dsno\x18\x03 \x01(\tR\x04dsno\x12\x1a\n" +
	"\bisupdate\x18\x04 \x01(\bR\bisupdate\"\x8d\x02\n" +
	"\rGDSSNResponse\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x125\n" +
	"\x05snsds\x18\x02 \x03(\v2\x1f.proto.GDSSNResponse.SnsdsEntryR\x05snsds\x125\n" +
	"\x05snsps\x18\x03 \x03(\v2\x1f.proto.GDSSNResponse.SnspsEntryR\x05snsps\x1a8\n" +
	"\n" +
	"SnsdsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a8\n" +
	"\n" +
	"SnspsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xd9\x02\n" +
	"\vUDSCRequest\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12\x14\n" +
	"\x05dsnos\x18\x03 \x03(\tR\x05dsnos\x12<\n" +
	"\bversions\x18\x04 \x03(\v2 .proto.UDSCRequest.VersionsEntryR\bversions\x12B\n" +
	"\n" +
	"timestamps\x18\x05 \x03(\v2\".proto.UDSCRequest.TimestampsEntryR\n" +
	"timestamps\x1a;\n" +
	"\rVersionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a=\n" +
	"\x0fTimestampsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xbc\x01\n" +
	"\fUDSCResponse\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12:\n" +
	"\adssnmap\x18\x02 \x03(\v2 .proto.UDSCResponse.DssnmapEntryR\adssnmap\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x1a:\n" +
	"\fDssnmapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x012\xda\x03\n" +
	"\tACService\x127\n" +
	"\n" +
	"GetParamsG\x12\x13.proto.GetPGRequest\x1a\x14.proto.GetPGResponse\x12=\n" +
	"\n" +
	"RegisterAC\x12\x16.proto.RegistACRequest\x1a\x17.proto.RegistACResponse\x12:\n" +
	"\tSelectSNs\x12\x15.proto.StorageRequest\x1a\x16.proto.StorageResponse\x126\n" +
	"\rPutFileCommit\x12\x11.proto.PFCRequest\x1a\x12.proto.PFCResponse\x125\n" +
	"\n" +
	"GetFileSNs\x12\x12.proto.GFACRequest\x1a\x13.proto.GFACResponse\x129\n" +
	"\x0eGetDSErrReport\x12\x12.proto.GDSERequest\x1a\x13.proto.GDSEResponse\x124\n" +
	"\aGetDSSn\x12\x13.proto.GDSSNRequest\x1a\x14.proto.GDSSNResponse\x129\n" +
	"\x0eUpdateDSCommit\x12\x12.proto.UDSCRequest\x1a\x13.proto.UDSCResponseB\x04Z\x02./b\x06proto3"

var (
	file_client_ac_proto_rawDescOnce sync.Once
	file_client_ac_proto_rawDescData []byte
)

func file_client_ac_proto_rawDescGZIP() []byte {
	file_client_ac_proto_rawDescOnce.Do(func() {
		file_client_ac_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_client_ac_proto_rawDesc), len(file_client_ac_proto_rawDesc)))
	})
	return file_client_ac_proto_rawDescData
}

var file_client_ac_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_client_ac_proto_goTypes = []any{
	(*GetPGRequest)(nil),     // 0: proto.GetPGRequest
	(*GetPGResponse)(nil),    // 1: proto.GetPGResponse
	(*RegistACRequest)(nil),  // 2: proto.RegistACRequest
	(*RegistACResponse)(nil), // 3: proto.RegistACResponse
	(*StorageRequest)(nil),   // 4: proto.StorageRequest
	(*StorageResponse)(nil),  // 5: proto.StorageResponse
	(*PFCRequest)(nil),       // 6: proto.PFCRequest
	(*PFCResponse)(nil),      // 7: proto.PFCResponse
	(*GFACRequest)(nil),      // 8: proto.GFACRequest
	(*GFACResponse)(nil),     // 9: proto.GFACResponse
	(*GDSERequest)(nil),      // 10: proto.GDSERequest
	(*GDSEResponse)(nil),     // 11: proto.GDSEResponse
	(*GDSSNRequest)(nil),     // 12: proto.GDSSNRequest
	(*GDSSNResponse)(nil),    // 13: proto.GDSSNResponse
	(*UDSCRequest)(nil),      // 14: proto.UDSCRequest
	(*UDSCResponse)(nil),     // 15: proto.UDSCResponse
	nil,                      // 16: proto.PFCRequest.VersionsEntry
	nil,                      // 17: proto.PFCRequest.TimestampsEntry
	nil,                      // 18: proto.GFACResponse.SnsdsEntry
	nil,                      // 19: proto.GDSERequest.ErrdssnEntry
	nil,                      // 20: proto.GDSERequest.BlacksnsEntry
	nil,                      // 21: proto.GDSEResponse.SnsdsEntry
	nil,                      // 22: proto.GDSSNResponse.SnsdsEntry
	nil,                      // 23: proto.GDSSNResponse.SnspsEntry
	nil,                      // 24: proto.UDSCRequest.VersionsEntry
	nil,                      // 25: proto.UDSCRequest.TimestampsEntry
	nil,                      // 26: proto.UDSCResponse.DssnmapEntry
}
var file_client_ac_proto_depIdxs = []int32{
	16, // 0: proto.PFCRequest.versions:type_name -> proto.PFCRequest.VersionsEntry
	17, // 1: proto.PFCRequest.timestamps:type_name -> proto.PFCRequest.TimestampsEntry
	18, // 2: proto.GFACResponse.snsds:type_name -> proto.GFACResponse.SnsdsEntry
	19, // 3: proto.GDSERequest.errdssn:type_name -> proto.GDSERequest.ErrdssnEntry
	20, // 4: proto.GDSERequest.blacksns:type_name -> proto.GDSERequest.BlacksnsEntry
	21, // 5: proto.GDSEResponse.snsds:type_name -> proto.GDSEResponse.SnsdsEntry
	22, // 6: proto.GDSSNResponse.snsds:type_name -> proto.GDSSNResponse.SnsdsEntry
	23, // 7: proto.GDSSNResponse.snsps:type_name -> proto.GDSSNResponse.SnspsEntry
	24, // 8: proto.UDSCRequest.versions:type_name -> proto.UDSCRequest.VersionsEntry
	25, // 9: proto.UDSCRequest.timestamps:type_name -> proto.UDSCRequest.TimestampsEntry
	26, // 10: proto.UDSCResponse.dssnmap:type_name -> proto.UDSCResponse.DssnmapEntry
	0,  // 11: proto.ACService.GetParamsG:input_type -> proto.GetPGRequest
	2,  // 12: proto.ACService.RegisterAC:input_type -> proto.RegistACRequest
	4,  // 13: proto.ACService.SelectSNs:input_type -> proto.StorageRequest
	6,  // 14: proto.ACService.PutFileCommit:input_type -> proto.PFCRequest
	8,  // 15: proto.ACService.GetFileSNs:input_type -> proto.GFACRequest
	10, // 16: proto.ACService.GetDSErrReport:input_type -> proto.GDSERequest
	12, // 17: proto.ACService.GetDSSn:input_type -> proto.GDSSNRequest
	14, // 18: proto.ACService.UpdateDSCommit:input_type -> proto.UDSCRequest
	1,  // 19: proto.ACService.GetParamsG:output_type -> proto.GetPGResponse
	3,  // 20: proto.ACService.RegisterAC:output_type -> proto.RegistACResponse
	5,  // 21: proto.ACService.SelectSNs:output_type -> proto.StorageResponse
	7,  // 22: proto.ACService.PutFileCommit:output_type -> proto.PFCResponse
	9,  // 23: proto.ACService.GetFileSNs:output_type -> proto.GFACResponse
	11, // 24: proto.ACService.GetDSErrReport:output_type -> proto.GDSEResponse
	13, // 25: proto.ACService.GetDSSn:output_type -> proto.GDSSNResponse
	15, // 26: proto.ACService.UpdateDSCommit:output_type -> proto.UDSCResponse
	19, // [19:27] is the sub-list for method output_type
	11, // [11:19] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_client_ac_proto_init() }
func file_client_ac_proto_init() {
	if File_client_ac_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_client_ac_proto_rawDesc), len(file_client_ac_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_client_ac_proto_goTypes,
		DependencyIndexes: file_client_ac_proto_depIdxs,
		MessageInfos:      file_client_ac_proto_msgTypes,
	}.Build()
	File_client_ac_proto = out.File
	file_client_ac_proto_goTypes = nil
	file_client_ac_proto_depIdxs = nil
}

syntax = "proto3";

package proto;

option go_package = "./";

service StorjSNService {
    rpc StorjPutFile(StorjPutFRequest) returns (StorjPutFResponse);
    rpc StorjGetFile(StorjGetFRequest) returns (StorjGetFResponse);
    rpc StorjUpdateFile(StorjUpdFRequest) returns (StorjUpdFResponse);
}

message Int32ArraySN {
    repeated int32 values = 1;
}

//客户端发起的向存储节点放置数据分片的请求
message StorjPutFRequest {
    string clientId = 1;   //客户端ID
    string filename = 2;   //待存储的文件名
    int32 repno = 3;   //文件副本号
    int32 version = 4;  //文件版本号
    repeated Int32ArraySN dataShards = 5; //序列化后的数据分片
    repeated bytes merkle_leaves = 6;   //所有叶子节点
}

//存储节点对请求的回复
message StorjPutFResponse {
    string filename = 1;  //待存储的文件名
    int32 repno = 2;   //文件副本号
    bytes root = 3;   //存储节点计算得到的根哈希
    string message = 4;  //是否已通过验证并存储等信息
}

//客户端发起的向存储节点获取数据分片的请求
message StorjGetFRequest {
    string clientId = 1;   //客户端ID
    string filename = 2;   //待存储的文件名
    string rep = 3;    //请求的副本号
    int32 dsnum = 4;  //数据分片的数量
}

//存储节点对请求的回复
message StorjGetFResponse {
    string filename = 1;  //文件名
    int32 version = 2;    //文件版本号
    repeated Int32ArraySN dataShards = 3; //数据分片
    repeated bytes merkle_leaves = 4; //校验分片对应的叶节点
}

//客户端发起的向存储节点更新数据分片的请求
message StorjUpdFRequest {
    string clientId = 1;   //客户端ID
    string filename = 2;   //待更新的文件名
    int32 rep = 3;        //待更新的文件副本号
    repeated Int32ArraySN dataShards = 4; //序列化后的数据分片
    repeated bytes merkle_leaves = 5;   //所有叶子节点
}

//存储节点对请求的回复
message StorjUpdFResponse {
    string filename = 1;  //待存储的文件名
    int32 repno = 2;   //文件副本号
    bytes root = 3;   //存储节点计算得到的根哈希
    string message = 4;  //是否已通过验证并存储等信息
}
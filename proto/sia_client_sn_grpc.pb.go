// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: sia_client_sn.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SiaSNServiceClient is the client API for SiaSNService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SiaSNServiceClient interface {
	SiaPutFileDS(ctx context.Context, in *SiaPutFRequest, opts ...grpc.CallOption) (*SiaPutFResponse, error)
	SiaGetFileDS(ctx context.Context, in *SiaGetFRequest, opts ...grpc.CallOption) (*SiaGetFResponse, error)
	SiaUpdateFileDS(ctx context.Context, in *SiaUpdDSRequest, opts ...grpc.CallOption) (*SiaUpdDSResponse, error)
	SiaGetSNStorageCost(ctx context.Context, in *SiaGSNSCRequest, opts ...grpc.CallOption) (*SiaGSNSCResponse, error)
}

type siaSNServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSiaSNServiceClient(cc grpc.ClientConnInterface) SiaSNServiceClient {
	return &siaSNServiceClient{cc}
}

func (c *siaSNServiceClient) SiaPutFileDS(ctx context.Context, in *SiaPutFRequest, opts ...grpc.CallOption) (*SiaPutFResponse, error) {
	out := new(SiaPutFResponse)
	err := c.cc.Invoke(ctx, "/proto.SiaSNService/SiaPutFileDS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siaSNServiceClient) SiaGetFileDS(ctx context.Context, in *SiaGetFRequest, opts ...grpc.CallOption) (*SiaGetFResponse, error) {
	out := new(SiaGetFResponse)
	err := c.cc.Invoke(ctx, "/proto.SiaSNService/SiaGetFileDS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siaSNServiceClient) SiaUpdateFileDS(ctx context.Context, in *SiaUpdDSRequest, opts ...grpc.CallOption) (*SiaUpdDSResponse, error) {
	out := new(SiaUpdDSResponse)
	err := c.cc.Invoke(ctx, "/proto.SiaSNService/SiaUpdateFileDS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siaSNServiceClient) SiaGetSNStorageCost(ctx context.Context, in *SiaGSNSCRequest, opts ...grpc.CallOption) (*SiaGSNSCResponse, error) {
	out := new(SiaGSNSCResponse)
	err := c.cc.Invoke(ctx, "/proto.SiaSNService/SiaGetSNStorageCost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SiaSNServiceServer is the server API for SiaSNService service.
// All implementations must embed UnimplementedSiaSNServiceServer
// for forward compatibility
type SiaSNServiceServer interface {
	SiaPutFileDS(context.Context, *SiaPutFRequest) (*SiaPutFResponse, error)
	SiaGetFileDS(context.Context, *SiaGetFRequest) (*SiaGetFResponse, error)
	SiaUpdateFileDS(context.Context, *SiaUpdDSRequest) (*SiaUpdDSResponse, error)
	SiaGetSNStorageCost(context.Context, *SiaGSNSCRequest) (*SiaGSNSCResponse, error)
	mustEmbedUnimplementedSiaSNServiceServer()
}

// UnimplementedSiaSNServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSiaSNServiceServer struct {
}

func (UnimplementedSiaSNServiceServer) SiaPutFileDS(context.Context, *SiaPutFRequest) (*SiaPutFResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SiaPutFileDS not implemented")
}
func (UnimplementedSiaSNServiceServer) SiaGetFileDS(context.Context, *SiaGetFRequest) (*SiaGetFResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SiaGetFileDS not implemented")
}
func (UnimplementedSiaSNServiceServer) SiaUpdateFileDS(context.Context, *SiaUpdDSRequest) (*SiaUpdDSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SiaUpdateFileDS not implemented")
}
func (UnimplementedSiaSNServiceServer) SiaGetSNStorageCost(context.Context, *SiaGSNSCRequest) (*SiaGSNSCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SiaGetSNStorageCost not implemented")
}
func (UnimplementedSiaSNServiceServer) mustEmbedUnimplementedSiaSNServiceServer() {}

// UnsafeSiaSNServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SiaSNServiceServer will
// result in compilation errors.
type UnsafeSiaSNServiceServer interface {
	mustEmbedUnimplementedSiaSNServiceServer()
}

func RegisterSiaSNServiceServer(s grpc.ServiceRegistrar, srv SiaSNServiceServer) {
	s.RegisterService(&SiaSNService_ServiceDesc, srv)
}

func _SiaSNService_SiaPutFileDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiaPutFRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiaSNServiceServer).SiaPutFileDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SiaSNService/SiaPutFileDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiaSNServiceServer).SiaPutFileDS(ctx, req.(*SiaPutFRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiaSNService_SiaGetFileDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiaGetFRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiaSNServiceServer).SiaGetFileDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SiaSNService/SiaGetFileDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiaSNServiceServer).SiaGetFileDS(ctx, req.(*SiaGetFRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiaSNService_SiaUpdateFileDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiaUpdDSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiaSNServiceServer).SiaUpdateFileDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SiaSNService/SiaUpdateFileDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiaSNServiceServer).SiaUpdateFileDS(ctx, req.(*SiaUpdDSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiaSNService_SiaGetSNStorageCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiaGSNSCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiaSNServiceServer).SiaGetSNStorageCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SiaSNService/SiaGetSNStorageCost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiaSNServiceServer).SiaGetSNStorageCost(ctx, req.(*SiaGSNSCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SiaSNService_ServiceDesc is the grpc.ServiceDesc for SiaSNService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SiaSNService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SiaSNService",
	HandlerType: (*SiaSNServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SiaPutFileDS",
			Handler:    _SiaSNService_SiaPutFileDS_Handler,
		},
		{
			MethodName: "SiaGetFileDS",
			Handler:    _SiaSNService_SiaGetFileDS_Handler,
		},
		{
			MethodName: "SiaUpdateFileDS",
			Handler:    _SiaSNService_SiaUpdateFileDS_Handler,
		},
		{
			MethodName: "SiaGetSNStorageCost",
			Handler:    _SiaSNService_SiaGetSNStorageCost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sia_client_sn.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: sia_client_sn.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SiaSNService_SiaPutFile_FullMethodName    = "/proto.SiaSNService/SiaPutFile"
	SiaSNService_SiaGetFile_FullMethodName    = "/proto.SiaSNService/SiaGetFile"
	SiaSNService_SiaUpdateFile_FullMethodName = "/proto.SiaSNService/SiaUpdateFile"
)

// SiaSNServiceClient is the client API for SiaSNService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SiaSNServiceClient interface {
	SiaPutFile(ctx context.Context, in *SiaPutFRequest, opts ...grpc.CallOption) (*SiaPutFResponse, error)
	SiaGetFile(ctx context.Context, in *SiaGetFRequest, opts ...grpc.CallOption) (*SiaGetFResponse, error)
	SiaUpdateFile(ctx context.Context, in *SiaUpdFRequest, opts ...grpc.CallOption) (*SiaUpdFResponse, error)
}

type siaSNServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSiaSNServiceClient(cc grpc.ClientConnInterface) SiaSNServiceClient {
	return &siaSNServiceClient{cc}
}

func (c *siaSNServiceClient) SiaPutFile(ctx context.Context, in *SiaPutFRequest, opts ...grpc.CallOption) (*SiaPutFResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SiaPutFResponse)
	err := c.cc.Invoke(ctx, SiaSNService_SiaPutFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siaSNServiceClient) SiaGetFile(ctx context.Context, in *SiaGetFRequest, opts ...grpc.CallOption) (*SiaGetFResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SiaGetFResponse)
	err := c.cc.Invoke(ctx, SiaSNService_SiaGetFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siaSNServiceClient) SiaUpdateFile(ctx context.Context, in *SiaUpdFRequest, opts ...grpc.CallOption) (*SiaUpdFResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SiaUpdFResponse)
	err := c.cc.Invoke(ctx, SiaSNService_SiaUpdateFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SiaSNServiceServer is the server API for SiaSNService service.
// All implementations must embed UnimplementedSiaSNServiceServer
// for forward compatibility.
type SiaSNServiceServer interface {
	SiaPutFile(context.Context, *SiaPutFRequest) (*SiaPutFResponse, error)
	SiaGetFile(context.Context, *SiaGetFRequest) (*SiaGetFResponse, error)
	SiaUpdateFile(context.Context, *SiaUpdFRequest) (*SiaUpdFResponse, error)
	mustEmbedUnimplementedSiaSNServiceServer()
}

// UnimplementedSiaSNServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSiaSNServiceServer struct{}

func (UnimplementedSiaSNServiceServer) SiaPutFile(context.Context, *SiaPutFRequest) (*SiaPutFResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SiaPutFile not implemented")
}
func (UnimplementedSiaSNServiceServer) SiaGetFile(context.Context, *SiaGetFRequest) (*SiaGetFResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SiaGetFile not implemented")
}
func (UnimplementedSiaSNServiceServer) SiaUpdateFile(context.Context, *SiaUpdFRequest) (*SiaUpdFResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SiaUpdateFile not implemented")
}
func (UnimplementedSiaSNServiceServer) mustEmbedUnimplementedSiaSNServiceServer() {}
func (UnimplementedSiaSNServiceServer) testEmbeddedByValue()                      {}

// UnsafeSiaSNServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SiaSNServiceServer will
// result in compilation errors.
type UnsafeSiaSNServiceServer interface {
	mustEmbedUnimplementedSiaSNServiceServer()
}

func RegisterSiaSNServiceServer(s grpc.ServiceRegistrar, srv SiaSNServiceServer) {
	// If the following call pancis, it indicates UnimplementedSiaSNServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SiaSNService_ServiceDesc, srv)
}

func _SiaSNService_SiaPutFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiaPutFRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiaSNServiceServer).SiaPutFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiaSNService_SiaPutFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiaSNServiceServer).SiaPutFile(ctx, req.(*SiaPutFRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiaSNService_SiaGetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiaGetFRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiaSNServiceServer).SiaGetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiaSNService_SiaGetFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiaSNServiceServer).SiaGetFile(ctx, req.(*SiaGetFRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiaSNService_SiaUpdateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiaUpdFRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiaSNServiceServer).SiaUpdateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiaSNService_SiaUpdateFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiaSNServiceServer).SiaUpdateFile(ctx, req.(*SiaUpdFRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SiaSNService_ServiceDesc is the grpc.ServiceDesc for SiaSNService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SiaSNService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SiaSNService",
	HandlerType: (*SiaSNServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SiaPutFile",
			Handler:    _SiaSNService_SiaPutFile_Handler,
		},
		{
			MethodName: "SiaGetFile",
			Handler:    _SiaSNService_SiaGetFile_Handler,
		},
		{
			MethodName: "SiaUpdateFile",
			Handler:    _SiaSNService_SiaUpdateFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sia_client_sn.proto",
}

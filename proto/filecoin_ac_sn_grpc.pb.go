// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: filecoin_ac_sn.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FilecoinSNACServiceClient is the client API for FilecoinSNACService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilecoinSNACServiceClient interface {
	FilecoinPutFileNotice(ctx context.Context, in *FilecoinClientStorageRequest, opts ...grpc.CallOption) (*FilecoinClientStorageResponse, error)
	FilecoinUpdateFileNotice(ctx context.Context, in *FilecoinClientUFRequest, opts ...grpc.CallOption) (*FilecoinClientUFResponse, error)
	FilecoinPreAuditSN(ctx context.Context, in *FilecoinPASNRequest, opts ...grpc.CallOption) (*FilecoinPASNResponse, error)
	FilecoinGetPosSN(ctx context.Context, in *FilecoinGAPSNRequest, opts ...grpc.CallOption) (*FilecoinGAPSNResponse, error)
}

type filecoinSNACServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFilecoinSNACServiceClient(cc grpc.ClientConnInterface) FilecoinSNACServiceClient {
	return &filecoinSNACServiceClient{cc}
}

func (c *filecoinSNACServiceClient) FilecoinPutFileNotice(ctx context.Context, in *FilecoinClientStorageRequest, opts ...grpc.CallOption) (*FilecoinClientStorageResponse, error) {
	out := new(FilecoinClientStorageResponse)
	err := c.cc.Invoke(ctx, "/proto.FilecoinSNACService/FilecoinPutFileNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecoinSNACServiceClient) FilecoinUpdateFileNotice(ctx context.Context, in *FilecoinClientUFRequest, opts ...grpc.CallOption) (*FilecoinClientUFResponse, error) {
	out := new(FilecoinClientUFResponse)
	err := c.cc.Invoke(ctx, "/proto.FilecoinSNACService/FilecoinUpdateFileNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecoinSNACServiceClient) FilecoinPreAuditSN(ctx context.Context, in *FilecoinPASNRequest, opts ...grpc.CallOption) (*FilecoinPASNResponse, error) {
	out := new(FilecoinPASNResponse)
	err := c.cc.Invoke(ctx, "/proto.FilecoinSNACService/FilecoinPreAuditSN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filecoinSNACServiceClient) FilecoinGetPosSN(ctx context.Context, in *FilecoinGAPSNRequest, opts ...grpc.CallOption) (*FilecoinGAPSNResponse, error) {
	out := new(FilecoinGAPSNResponse)
	err := c.cc.Invoke(ctx, "/proto.FilecoinSNACService/FilecoinGetPosSN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilecoinSNACServiceServer is the server API for FilecoinSNACService service.
// All implementations must embed UnimplementedFilecoinSNACServiceServer
// for forward compatibility
type FilecoinSNACServiceServer interface {
	FilecoinPutFileNotice(context.Context, *FilecoinClientStorageRequest) (*FilecoinClientStorageResponse, error)
	FilecoinUpdateFileNotice(context.Context, *FilecoinClientUFRequest) (*FilecoinClientUFResponse, error)
	FilecoinPreAuditSN(context.Context, *FilecoinPASNRequest) (*FilecoinPASNResponse, error)
	FilecoinGetPosSN(context.Context, *FilecoinGAPSNRequest) (*FilecoinGAPSNResponse, error)
	mustEmbedUnimplementedFilecoinSNACServiceServer()
}

// UnimplementedFilecoinSNACServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFilecoinSNACServiceServer struct {
}

func (UnimplementedFilecoinSNACServiceServer) FilecoinPutFileNotice(context.Context, *FilecoinClientStorageRequest) (*FilecoinClientStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilecoinPutFileNotice not implemented")
}
func (UnimplementedFilecoinSNACServiceServer) FilecoinUpdateFileNotice(context.Context, *FilecoinClientUFRequest) (*FilecoinClientUFResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilecoinUpdateFileNotice not implemented")
}
func (UnimplementedFilecoinSNACServiceServer) FilecoinPreAuditSN(context.Context, *FilecoinPASNRequest) (*FilecoinPASNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilecoinPreAuditSN not implemented")
}
func (UnimplementedFilecoinSNACServiceServer) FilecoinGetPosSN(context.Context, *FilecoinGAPSNRequest) (*FilecoinGAPSNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilecoinGetPosSN not implemented")
}
func (UnimplementedFilecoinSNACServiceServer) mustEmbedUnimplementedFilecoinSNACServiceServer() {}

// UnsafeFilecoinSNACServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilecoinSNACServiceServer will
// result in compilation errors.
type UnsafeFilecoinSNACServiceServer interface {
	mustEmbedUnimplementedFilecoinSNACServiceServer()
}

func RegisterFilecoinSNACServiceServer(s grpc.ServiceRegistrar, srv FilecoinSNACServiceServer) {
	s.RegisterService(&FilecoinSNACService_ServiceDesc, srv)
}

func _FilecoinSNACService_FilecoinPutFileNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilecoinClientStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecoinSNACServiceServer).FilecoinPutFileNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilecoinSNACService/FilecoinPutFileNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecoinSNACServiceServer).FilecoinPutFileNotice(ctx, req.(*FilecoinClientStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilecoinSNACService_FilecoinUpdateFileNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilecoinClientUFRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecoinSNACServiceServer).FilecoinUpdateFileNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilecoinSNACService/FilecoinUpdateFileNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecoinSNACServiceServer).FilecoinUpdateFileNotice(ctx, req.(*FilecoinClientUFRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilecoinSNACService_FilecoinPreAuditSN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilecoinPASNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecoinSNACServiceServer).FilecoinPreAuditSN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilecoinSNACService/FilecoinPreAuditSN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecoinSNACServiceServer).FilecoinPreAuditSN(ctx, req.(*FilecoinPASNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilecoinSNACService_FilecoinGetPosSN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilecoinGAPSNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilecoinSNACServiceServer).FilecoinGetPosSN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.FilecoinSNACService/FilecoinGetPosSN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilecoinSNACServiceServer).FilecoinGetPosSN(ctx, req.(*FilecoinGAPSNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FilecoinSNACService_ServiceDesc is the grpc.ServiceDesc for FilecoinSNACService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilecoinSNACService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FilecoinSNACService",
	HandlerType: (*FilecoinSNACServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FilecoinPutFileNotice",
			Handler:    _FilecoinSNACService_FilecoinPutFileNotice_Handler,
		},
		{
			MethodName: "FilecoinUpdateFileNotice",
			Handler:    _FilecoinSNACService_FilecoinUpdateFileNotice_Handler,
		},
		{
			MethodName: "FilecoinPreAuditSN",
			Handler:    _FilecoinSNACService_FilecoinPreAuditSN_Handler,
		},
		{
			MethodName: "FilecoinGetPosSN",
			Handler:    _FilecoinSNACService_FilecoinGetPosSN_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "filecoin_ac_sn.proto",
}

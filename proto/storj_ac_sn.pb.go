// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v5.26.1
// source: storj_ac_sn.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 客户端发起的存储请求
type StorjClientStorageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Repno    int32  `protobuf:"varint,3,opt,name=repno,proto3" json:"repno,omitempty"`      //文件副本号
	Version  int32  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`  //文件版本号
}

func (x *StorjClientStorageRequest) Reset() {
	*x = StorjClientStorageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_ac_sn_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjClientStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjClientStorageRequest) ProtoMessage() {}

func (x *StorjClientStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storj_ac_sn_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjClientStorageRequest.ProtoReflect.Descriptor instead.
func (*StorjClientStorageRequest) Descriptor() ([]byte, []int) {
	return file_storj_ac_sn_proto_rawDescGZIP(), []int{0}
}

func (x *StorjClientStorageRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *StorjClientStorageRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjClientStorageRequest) GetRepno() int32 {
	if x != nil {
		return x.Repno
	}
	return 0
}

func (x *StorjClientStorageRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// 存储节点对存储请求的回复
type StorjClientStorageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Repno    int32  `protobuf:"varint,3,opt,name=repno,proto3" json:"repno,omitempty"`      //文件副本号
	Root     []byte `protobuf:"bytes,4,opt,name=root,proto3" json:"root,omitempty"`         //文件根哈希
	Snid     string `protobuf:"bytes,5,opt,name=snid,proto3" json:"snid,omitempty"`         //存储节点id
	Message  string `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`   //附加信息
}

func (x *StorjClientStorageResponse) Reset() {
	*x = StorjClientStorageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_ac_sn_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjClientStorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjClientStorageResponse) ProtoMessage() {}

func (x *StorjClientStorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storj_ac_sn_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjClientStorageResponse.ProtoReflect.Descriptor instead.
func (*StorjClientStorageResponse) Descriptor() ([]byte, []int) {
	return file_storj_ac_sn_proto_rawDescGZIP(), []int{1}
}

func (x *StorjClientStorageResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *StorjClientStorageResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjClientStorageResponse) GetRepno() int32 {
	if x != nil {
		return x.Repno
	}
	return 0
}

func (x *StorjClientStorageResponse) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *StorjClientStorageResponse) GetSnid() string {
	if x != nil {
		return x.Snid
	}
	return ""
}

func (x *StorjClientStorageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 客户端发起的更新数据分片请求
type StorjClientUFRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Rep      int32  `protobuf:"varint,3,opt,name=rep,proto3" json:"rep,omitempty"`          //待更新的文件副本号
	Version  int32  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`  //待更新的文件版本号
}

func (x *StorjClientUFRequest) Reset() {
	*x = StorjClientUFRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_ac_sn_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjClientUFRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjClientUFRequest) ProtoMessage() {}

func (x *StorjClientUFRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storj_ac_sn_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjClientUFRequest.ProtoReflect.Descriptor instead.
func (*StorjClientUFRequest) Descriptor() ([]byte, []int) {
	return file_storj_ac_sn_proto_rawDescGZIP(), []int{2}
}

func (x *StorjClientUFRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *StorjClientUFRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjClientUFRequest) GetRep() int32 {
	if x != nil {
		return x.Rep
	}
	return 0
}

func (x *StorjClientUFRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// 存储节点对更新数据分片请求的回复
type StorjClientUFResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Repno    int32  `protobuf:"varint,3,opt,name=repno,proto3" json:"repno,omitempty"`      //文件副本号
	Root     []byte `protobuf:"bytes,4,opt,name=root,proto3" json:"root,omitempty"`         //文件新的根哈希
	Snid     string `protobuf:"bytes,5,opt,name=snid,proto3" json:"snid,omitempty"`         //存储节点id
	Message  string `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`   //附加信息
}

func (x *StorjClientUFResponse) Reset() {
	*x = StorjClientUFResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_ac_sn_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjClientUFResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjClientUFResponse) ProtoMessage() {}

func (x *StorjClientUFResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storj_ac_sn_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjClientUFResponse.ProtoReflect.Descriptor instead.
func (*StorjClientUFResponse) Descriptor() ([]byte, []int) {
	return file_storj_ac_sn_proto_rawDescGZIP(), []int{3}
}

func (x *StorjClientUFResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *StorjClientUFResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjClientUFResponse) GetRepno() int32 {
	if x != nil {
		return x.Repno
	}
	return 0
}

func (x *StorjClientUFResponse) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *StorjClientUFResponse) GetSnid() string {
	if x != nil {
		return x.Snid
	}
	return ""
}

func (x *StorjClientUFResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 审计方发起的预审计请求
type StorjPASNRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auditno   string           `protobuf:"bytes,1,opt,name=auditno,proto3" json:"auditno,omitempty"`                                                                                          //审计代号:audit1,audit2...
	Snid      string           `protobuf:"bytes,2,opt,name=snid,proto3" json:"snid,omitempty"`                                                                                                //请求的存储节点id
	Cidfnis   []string         `protobuf:"bytes,3,rep,name=cidfnis,proto3" json:"cidfnis,omitempty"`                                                                                          //挑战的文件副本clientId-filename-i
	Cidfniv   map[string]int32 `protobuf:"bytes,4,rep,name=cidfniv,proto3" json:"cidfniv,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //挑战的文件副本的版本，key:cid-fn-i,value:版本号
	Totalrpcs int32            `protobuf:"varint,5,opt,name=totalrpcs,proto3" json:"totalrpcs,omitempty"`                                                                                     //这组rpc的总数
	Currpcno  int32            `protobuf:"varint,6,opt,name=currpcno,proto3" json:"currpcno,omitempty"`                                                                                       //当前RPC的id
}

func (x *StorjPASNRequest) Reset() {
	*x = StorjPASNRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_ac_sn_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjPASNRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjPASNRequest) ProtoMessage() {}

func (x *StorjPASNRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storj_ac_sn_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjPASNRequest.ProtoReflect.Descriptor instead.
func (*StorjPASNRequest) Descriptor() ([]byte, []int) {
	return file_storj_ac_sn_proto_rawDescGZIP(), []int{4}
}

func (x *StorjPASNRequest) GetAuditno() string {
	if x != nil {
		return x.Auditno
	}
	return ""
}

func (x *StorjPASNRequest) GetSnid() string {
	if x != nil {
		return x.Snid
	}
	return ""
}

func (x *StorjPASNRequest) GetCidfnis() []string {
	if x != nil {
		return x.Cidfnis
	}
	return nil
}

func (x *StorjPASNRequest) GetCidfniv() map[string]int32 {
	if x != nil {
		return x.Cidfniv
	}
	return nil
}

func (x *StorjPASNRequest) GetTotalrpcs() int32 {
	if x != nil {
		return x.Totalrpcs
	}
	return 0
}

func (x *StorjPASNRequest) GetCurrpcno() int32 {
	if x != nil {
		return x.Currpcno
	}
	return 0
}

// 存储节点对审计方预审计请求的回复
type StorjPASNResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Isready   bool             `protobuf:"varint,1,opt,name=isready,proto3" json:"isready,omitempty"`                                                                                           //是否准备好审计，即可以预留快照
	Fversion  map[string]int32 `protobuf:"bytes,2,rep,name=fversion,proto3" json:"fversion,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //如果不能预留，告知审计方哪些文件的版本已过时，否则为空
	Totalrpcs int32            `protobuf:"varint,3,opt,name=totalrpcs,proto3" json:"totalrpcs,omitempty"`                                                                                       //这组rpc的总数
	Currpcno  int32            `protobuf:"varint,4,opt,name=currpcno,proto3" json:"currpcno,omitempty"`                                                                                         //当前RPC的id
}

func (x *StorjPASNResponse) Reset() {
	*x = StorjPASNResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_ac_sn_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjPASNResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjPASNResponse) ProtoMessage() {}

func (x *StorjPASNResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storj_ac_sn_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjPASNResponse.ProtoReflect.Descriptor instead.
func (*StorjPASNResponse) Descriptor() ([]byte, []int) {
	return file_storj_ac_sn_proto_rawDescGZIP(), []int{5}
}

func (x *StorjPASNResponse) GetIsready() bool {
	if x != nil {
		return x.Isready
	}
	return false
}

func (x *StorjPASNResponse) GetFversion() map[string]int32 {
	if x != nil {
		return x.Fversion
	}
	return nil
}

func (x *StorjPASNResponse) GetTotalrpcs() int32 {
	if x != nil {
		return x.Totalrpcs
	}
	return 0
}

func (x *StorjPASNResponse) GetCurrpcno() int32 {
	if x != nil {
		return x.Currpcno
	}
	return 0
}

type Int32Array struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []int32 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *Int32Array) Reset() {
	*x = Int32Array{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_ac_sn_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int32Array) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32Array) ProtoMessage() {}

func (x *Int32Array) ProtoReflect() protoreflect.Message {
	mi := &file_storj_ac_sn_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32Array.ProtoReflect.Descriptor instead.
func (*Int32Array) Descriptor() ([]byte, []int) {
	return file_storj_ac_sn_proto_rawDescGZIP(), []int{6}
}

func (x *Int32Array) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// 获取存储节点上所有存储分片的聚合存储证明的请求
type StorjGAPSNRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auditno     string                 `protobuf:"bytes,1,opt,name=auditno,proto3" json:"auditno,omitempty"`                                                                                                 //审计代号
	Cidfnirands map[string]*Int32Array `protobuf:"bytes,2,rep,name=cidfnirands,proto3" json:"cidfnirands,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //挑战的文件副本对应的随机数组
	Totalrpcs   int32                  `protobuf:"varint,3,opt,name=totalrpcs,proto3" json:"totalrpcs,omitempty"`                                                                                            //这组rpc的总数
	Currpcno    int32                  `protobuf:"varint,4,opt,name=currpcno,proto3" json:"currpcno,omitempty"`                                                                                              //当前RPC的id
}

func (x *StorjGAPSNRequest) Reset() {
	*x = StorjGAPSNRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_ac_sn_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjGAPSNRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjGAPSNRequest) ProtoMessage() {}

func (x *StorjGAPSNRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storj_ac_sn_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjGAPSNRequest.ProtoReflect.Descriptor instead.
func (*StorjGAPSNRequest) Descriptor() ([]byte, []int) {
	return file_storj_ac_sn_proto_rawDescGZIP(), []int{7}
}

func (x *StorjGAPSNRequest) GetAuditno() string {
	if x != nil {
		return x.Auditno
	}
	return ""
}

func (x *StorjGAPSNRequest) GetCidfnirands() map[string]*Int32Array {
	if x != nil {
		return x.Cidfnirands
	}
	return nil
}

func (x *StorjGAPSNRequest) GetTotalrpcs() int32 {
	if x != nil {
		return x.Totalrpcs
	}
	return 0
}

func (x *StorjGAPSNRequest) GetCurrpcno() int32 {
	if x != nil {
		return x.Currpcno
	}
	return 0
}

type BytesArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values [][]byte `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *BytesArray) Reset() {
	*x = BytesArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_ac_sn_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BytesArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesArray) ProtoMessage() {}

func (x *BytesArray) ProtoReflect() protoreflect.Message {
	mi := &file_storj_ac_sn_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesArray.ProtoReflect.Descriptor instead.
func (*BytesArray) Descriptor() ([]byte, []int) {
	return file_storj_ac_sn_proto_rawDescGZIP(), []int{8}
}

func (x *BytesArray) GetValues() [][]byte {
	if x != nil {
		return x.Values
	}
	return nil
}

// 存储节点对所有存储分片的聚合存储证明请求的回复
type StorjGAPSNResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preleafs  map[string]*BytesArray `protobuf:"bytes,1,rep,name=preleafs,proto3" json:"preleafs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //每个文件副本对应的preleafs
	Totalrpcs int32                  `protobuf:"varint,2,opt,name=totalrpcs,proto3" json:"totalrpcs,omitempty"`                                                                                      //这组rpc的总数
	Currpcno  int32                  `protobuf:"varint,3,opt,name=currpcno,proto3" json:"currpcno,omitempty"`                                                                                        //当前RPC的id
}

func (x *StorjGAPSNResponse) Reset() {
	*x = StorjGAPSNResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_ac_sn_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjGAPSNResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjGAPSNResponse) ProtoMessage() {}

func (x *StorjGAPSNResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storj_ac_sn_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjGAPSNResponse.ProtoReflect.Descriptor instead.
func (*StorjGAPSNResponse) Descriptor() ([]byte, []int) {
	return file_storj_ac_sn_proto_rawDescGZIP(), []int{9}
}

func (x *StorjGAPSNResponse) GetPreleafs() map[string]*BytesArray {
	if x != nil {
		return x.Preleafs
	}
	return nil
}

func (x *StorjGAPSNResponse) GetTotalrpcs() int32 {
	if x != nil {
		return x.Totalrpcs
	}
	return 0
}

func (x *StorjGAPSNResponse) GetCurrpcno() int32 {
	if x != nil {
		return x.Currpcno
	}
	return 0
}

var File_storj_ac_sn_proto protoreflect.FileDescriptor

var file_storj_ac_sn_proto_rawDesc = []byte{
	0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x6a, 0x5f, 0x61, 0x63, 0x5f, 0x73, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x01, 0x0a, 0x19, 0x53,
	0x74, 0x6f, 0x72, 0x6a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x72, 0x65, 0x70, 0x6e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xac, 0x01, 0x0a, 0x1a, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6e, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6e, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x72, 0x6f, 0x6f,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6e, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x6e, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x7a, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x46,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa7, 0x01, 0x0a, 0x15,
	0x53, 0x74, 0x6f, 0x72, 0x6a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x46, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x65, 0x70, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x65,
	0x70, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6e, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6e, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x90, 0x02, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x50,
	0x41, 0x53, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x6e, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x69, 0x64, 0x66,
	0x6e, 0x69, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x69, 0x64, 0x66, 0x6e,
	0x69, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x69, 0x64, 0x66, 0x6e, 0x69, 0x76, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x6a, 0x50, 0x41, 0x53, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x69, 0x64,
	0x66, 0x6e, 0x69, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x69, 0x64, 0x66, 0x6e,
	0x69, 0x76, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x72, 0x70, 0x63, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x72, 0x70, 0x63, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x70, 0x63, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x70, 0x63, 0x6e, 0x6f, 0x1a, 0x3a, 0x0a, 0x0c,
	0x43, 0x69, 0x64, 0x66, 0x6e, 0x69, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe8, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x6f,
	0x72, 0x6a, 0x50, 0x41, 0x53, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x73, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x42, 0x0a, 0x08, 0x66, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x50, 0x41, 0x53, 0x4e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x66, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x72, 0x70, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x72, 0x70, 0x63, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x70, 0x63, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x70, 0x63, 0x6e, 0x6f, 0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x24, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x87, 0x02, 0x0a, 0x11, 0x53, 0x74,
	0x6f, 0x72, 0x6a, 0x47, 0x41, 0x50, 0x53, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x75, 0x64, 0x69, 0x74, 0x6e, 0x6f, 0x12, 0x4b, 0x0a, 0x0b, 0x63, 0x69, 0x64,
	0x66, 0x6e, 0x69, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x47, 0x41, 0x50, 0x53,
	0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x69, 0x64, 0x66, 0x6e, 0x69, 0x72,
	0x61, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x69, 0x64, 0x66, 0x6e,
	0x69, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x72,
	0x70, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x72, 0x70, 0x63, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x70, 0x63, 0x6e, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x70, 0x63, 0x6e, 0x6f,
	0x1a, 0x51, 0x0a, 0x10, 0x43, 0x69, 0x64, 0x66, 0x6e, 0x69, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x24, 0x0a, 0x0a, 0x42, 0x79, 0x74, 0x65, 0x73, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xe3, 0x01, 0x0a, 0x12, 0x53, 0x74,
	0x6f, 0x72, 0x6a, 0x47, 0x41, 0x50, 0x53, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a,
	0x47, 0x41, 0x50, 0x53, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x66, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x70, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x66, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x72, 0x70,
	0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x72,
	0x70, 0x63, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x70, 0x63, 0x6e, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x70, 0x63, 0x6e, 0x6f, 0x1a,
	0x4e, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x66, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32,
	0xcd, 0x02, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x53, 0x4e, 0x41, 0x43, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x50, 0x75, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x52, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x46, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x6a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x46, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x50, 0x72, 0x65, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x53, 0x4e, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x6a, 0x50, 0x41, 0x53, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x50, 0x41, 0x53,
	0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x53, 0x74, 0x6f,
	0x72, 0x6a, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x53, 0x4e, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x47, 0x41, 0x50, 0x53, 0x4e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x6a, 0x47, 0x41, 0x50, 0x53, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_storj_ac_sn_proto_rawDescOnce sync.Once
	file_storj_ac_sn_proto_rawDescData = file_storj_ac_sn_proto_rawDesc
)

func file_storj_ac_sn_proto_rawDescGZIP() []byte {
	file_storj_ac_sn_proto_rawDescOnce.Do(func() {
		file_storj_ac_sn_proto_rawDescData = protoimpl.X.CompressGZIP(file_storj_ac_sn_proto_rawDescData)
	})
	return file_storj_ac_sn_proto_rawDescData
}

var file_storj_ac_sn_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_storj_ac_sn_proto_goTypes = []interface{}{
	(*StorjClientStorageRequest)(nil),  // 0: proto.StorjClientStorageRequest
	(*StorjClientStorageResponse)(nil), // 1: proto.StorjClientStorageResponse
	(*StorjClientUFRequest)(nil),       // 2: proto.StorjClientUFRequest
	(*StorjClientUFResponse)(nil),      // 3: proto.StorjClientUFResponse
	(*StorjPASNRequest)(nil),           // 4: proto.StorjPASNRequest
	(*StorjPASNResponse)(nil),          // 5: proto.StorjPASNResponse
	(*Int32Array)(nil),                 // 6: proto.Int32Array
	(*StorjGAPSNRequest)(nil),          // 7: proto.StorjGAPSNRequest
	(*BytesArray)(nil),                 // 8: proto.BytesArray
	(*StorjGAPSNResponse)(nil),         // 9: proto.StorjGAPSNResponse
	nil,                                // 10: proto.StorjPASNRequest.CidfnivEntry
	nil,                                // 11: proto.StorjPASNResponse.FversionEntry
	nil,                                // 12: proto.StorjGAPSNRequest.CidfnirandsEntry
	nil,                                // 13: proto.StorjGAPSNResponse.PreleafsEntry
}
var file_storj_ac_sn_proto_depIdxs = []int32{
	10, // 0: proto.StorjPASNRequest.cidfniv:type_name -> proto.StorjPASNRequest.CidfnivEntry
	11, // 1: proto.StorjPASNResponse.fversion:type_name -> proto.StorjPASNResponse.FversionEntry
	12, // 2: proto.StorjGAPSNRequest.cidfnirands:type_name -> proto.StorjGAPSNRequest.CidfnirandsEntry
	13, // 3: proto.StorjGAPSNResponse.preleafs:type_name -> proto.StorjGAPSNResponse.PreleafsEntry
	6,  // 4: proto.StorjGAPSNRequest.CidfnirandsEntry.value:type_name -> proto.Int32Array
	8,  // 5: proto.StorjGAPSNResponse.PreleafsEntry.value:type_name -> proto.BytesArray
	0,  // 6: proto.StorjSNACService.StorjPutFileNotice:input_type -> proto.StorjClientStorageRequest
	2,  // 7: proto.StorjSNACService.StorjUpdateFileNotice:input_type -> proto.StorjClientUFRequest
	4,  // 8: proto.StorjSNACService.StorjPreAuditSN:input_type -> proto.StorjPASNRequest
	7,  // 9: proto.StorjSNACService.StorjGetPosSN:input_type -> proto.StorjGAPSNRequest
	1,  // 10: proto.StorjSNACService.StorjPutFileNotice:output_type -> proto.StorjClientStorageResponse
	3,  // 11: proto.StorjSNACService.StorjUpdateFileNotice:output_type -> proto.StorjClientUFResponse
	5,  // 12: proto.StorjSNACService.StorjPreAuditSN:output_type -> proto.StorjPASNResponse
	9,  // 13: proto.StorjSNACService.StorjGetPosSN:output_type -> proto.StorjGAPSNResponse
	10, // [10:14] is the sub-list for method output_type
	6,  // [6:10] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_storj_ac_sn_proto_init() }
func file_storj_ac_sn_proto_init() {
	if File_storj_ac_sn_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_storj_ac_sn_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjClientStorageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_ac_sn_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjClientStorageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_ac_sn_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjClientUFRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_ac_sn_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjClientUFResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_ac_sn_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjPASNRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_ac_sn_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjPASNResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_ac_sn_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int32Array); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_ac_sn_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjGAPSNRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_ac_sn_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BytesArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_ac_sn_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjGAPSNResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_storj_ac_sn_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_storj_ac_sn_proto_goTypes,
		DependencyIndexes: file_storj_ac_sn_proto_depIdxs,
		MessageInfos:      file_storj_ac_sn_proto_msgTypes,
	}.Build()
	File_storj_ac_sn_proto = out.File
	file_storj_ac_sn_proto_rawDesc = nil
	file_storj_ac_sn_proto_goTypes = nil
	file_storj_ac_sn_proto_depIdxs = nil
}

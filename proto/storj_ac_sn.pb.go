// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v5.26.1
// source: storj_ac_sn.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 客户端发起的存储请求
type StorjClientStorageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Repno    int32  `protobuf:"varint,3,opt,name=repno,proto3" json:"repno,omitempty"`      //文件副本号
}

func (x *StorjClientStorageRequest) Reset() {
	*x = StorjClientStorageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_ac_sn_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjClientStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjClientStorageRequest) ProtoMessage() {}

func (x *StorjClientStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storj_ac_sn_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjClientStorageRequest.ProtoReflect.Descriptor instead.
func (*StorjClientStorageRequest) Descriptor() ([]byte, []int) {
	return file_storj_ac_sn_proto_rawDescGZIP(), []int{0}
}

func (x *StorjClientStorageRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *StorjClientStorageRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjClientStorageRequest) GetRepno() int32 {
	if x != nil {
		return x.Repno
	}
	return 0
}

// 存储节点对存储请求的回复
type StorjClientStorageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Repno    int32  `protobuf:"varint,3,opt,name=repno,proto3" json:"repno,omitempty"`      //文件副本号
	Root     []byte `protobuf:"bytes,4,opt,name=root,proto3" json:"root,omitempty"`         //文件根哈希
	Snid     string `protobuf:"bytes,5,opt,name=snid,proto3" json:"snid,omitempty"`         //存储节点id
	Message  string `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`   //附加信息
}

func (x *StorjClientStorageResponse) Reset() {
	*x = StorjClientStorageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_ac_sn_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjClientStorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjClientStorageResponse) ProtoMessage() {}

func (x *StorjClientStorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storj_ac_sn_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjClientStorageResponse.ProtoReflect.Descriptor instead.
func (*StorjClientStorageResponse) Descriptor() ([]byte, []int) {
	return file_storj_ac_sn_proto_rawDescGZIP(), []int{1}
}

func (x *StorjClientStorageResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *StorjClientStorageResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjClientStorageResponse) GetRepno() int32 {
	if x != nil {
		return x.Repno
	}
	return 0
}

func (x *StorjClientStorageResponse) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *StorjClientStorageResponse) GetSnid() string {
	if x != nil {
		return x.Snid
	}
	return ""
}

func (x *StorjClientStorageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 客户端发起的更新数据分片请求
type StorjClientUpdDSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Dsno     string `protobuf:"bytes,3,opt,name=dsno,proto3" json:"dsno,omitempty"`         //该存储节点待更新的分片号
}

func (x *StorjClientUpdDSRequest) Reset() {
	*x = StorjClientUpdDSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_ac_sn_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjClientUpdDSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjClientUpdDSRequest) ProtoMessage() {}

func (x *StorjClientUpdDSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storj_ac_sn_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjClientUpdDSRequest.ProtoReflect.Descriptor instead.
func (*StorjClientUpdDSRequest) Descriptor() ([]byte, []int) {
	return file_storj_ac_sn_proto_rawDescGZIP(), []int{2}
}

func (x *StorjClientUpdDSRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *StorjClientUpdDSRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjClientUpdDSRequest) GetDsno() string {
	if x != nil {
		return x.Dsno
	}
	return ""
}

// 存储节点对更新数据分片请求的回复
type StorjClientUpdDSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId  string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`   //客户端ID
	Filename  string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`   //已更新的文件名
	Dsno      string `protobuf:"bytes,3,opt,name=dsno,proto3" json:"dsno,omitempty"`           //该存储节点已更新的分片号
	Version   int32  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`    //分片更新后的版本号
	Timestamp string `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"` //分片更新后的时间戳
	Message   string `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`     //附加信息
}

func (x *StorjClientUpdDSResponse) Reset() {
	*x = StorjClientUpdDSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_ac_sn_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjClientUpdDSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjClientUpdDSResponse) ProtoMessage() {}

func (x *StorjClientUpdDSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storj_ac_sn_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjClientUpdDSResponse.ProtoReflect.Descriptor instead.
func (*StorjClientUpdDSResponse) Descriptor() ([]byte, []int) {
	return file_storj_ac_sn_proto_rawDescGZIP(), []int{3}
}

func (x *StorjClientUpdDSResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *StorjClientUpdDSResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StorjClientUpdDSResponse) GetDsno() string {
	if x != nil {
		return x.Dsno
	}
	return ""
}

func (x *StorjClientUpdDSResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *StorjClientUpdDSResponse) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *StorjClientUpdDSResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 审计方发起的预审计请求
type StorjPASNRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auditno   string           `protobuf:"bytes,1,opt,name=auditno,proto3" json:"auditno,omitempty"`                                                                                              //审计代号:audit1,audit2...
	Snid      string           `protobuf:"bytes,2,opt,name=snid,proto3" json:"snid,omitempty"`                                                                                                    //请求的存储节点id
	Dsversion map[string]int32 `protobuf:"bytes,3,rep,name=dsversion,proto3" json:"dsversion,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //挑战的分片及其版本，key:clientId-filename-dsno,value:版本号
}

func (x *StorjPASNRequest) Reset() {
	*x = StorjPASNRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_ac_sn_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjPASNRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjPASNRequest) ProtoMessage() {}

func (x *StorjPASNRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storj_ac_sn_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjPASNRequest.ProtoReflect.Descriptor instead.
func (*StorjPASNRequest) Descriptor() ([]byte, []int) {
	return file_storj_ac_sn_proto_rawDescGZIP(), []int{4}
}

func (x *StorjPASNRequest) GetAuditno() string {
	if x != nil {
		return x.Auditno
	}
	return ""
}

func (x *StorjPASNRequest) GetSnid() string {
	if x != nil {
		return x.Snid
	}
	return ""
}

func (x *StorjPASNRequest) GetDsversion() map[string]int32 {
	if x != nil {
		return x.Dsversion
	}
	return nil
}

// 存储节点对审计方预审计请求的回复
type StorjPASNResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Isready   bool             `protobuf:"varint,1,opt,name=isready,proto3" json:"isready,omitempty"`                                                                                             //是否准备好审计，即可以预留快照
	Dsversion map[string]int32 `protobuf:"bytes,2,rep,name=dsversion,proto3" json:"dsversion,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //如果不能预留，告知审计方哪些分片的版本已过时，否则为空
}

func (x *StorjPASNResponse) Reset() {
	*x = StorjPASNResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storj_ac_sn_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorjPASNResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorjPASNResponse) ProtoMessage() {}

func (x *StorjPASNResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storj_ac_sn_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorjPASNResponse.ProtoReflect.Descriptor instead.
func (*StorjPASNResponse) Descriptor() ([]byte, []int) {
	return file_storj_ac_sn_proto_rawDescGZIP(), []int{5}
}

func (x *StorjPASNResponse) GetIsready() bool {
	if x != nil {
		return x.Isready
	}
	return false
}

func (x *StorjPASNResponse) GetDsversion() map[string]int32 {
	if x != nil {
		return x.Dsversion
	}
	return nil
}

var File_storj_ac_sn_proto protoreflect.FileDescriptor

var file_storj_ac_sn_proto_rawDesc = []byte{
	0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x6a, 0x5f, 0x61, 0x63, 0x5f, 0x73, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x69, 0x0a, 0x19, 0x53, 0x74,
	0x6f, 0x72, 0x6a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x72, 0x65, 0x70, 0x6e, 0x6f, 0x22, 0xac, 0x01, 0x0a, 0x1a, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x65, 0x70, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x65, 0x70,
	0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6e, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6e, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x65, 0x0a, 0x17, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x44, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x73, 0x6e, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x73, 0x6e, 0x6f, 0x22, 0xb8, 0x01, 0x0a, 0x18,
	0x53, 0x74, 0x6f, 0x72, 0x6a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x44, 0x53,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x73, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x73, 0x6e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x6a,
	0x50, 0x41, 0x53, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6e, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x64, 0x73, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x50, 0x41, 0x53, 0x4e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x64, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a,
	0x3c, 0x0a, 0x0e, 0x44, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb2, 0x01,
	0x0a, 0x11, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x50, 0x41, 0x53, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x45, 0x0a,
	0x09, 0x64, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x50, 0x41,
	0x53, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x73, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x64, 0x73, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x3c, 0x0a, 0x0e, 0x44, 0x73, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x32, 0x92, 0x02, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x53, 0x4e, 0x41, 0x43,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x72, 0x6a,
	0x50, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5d, 0x0a, 0x1a, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x44, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x44, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x50, 0x72, 0x65, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x53, 0x4e, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x6a, 0x50, 0x41, 0x53, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6a, 0x50, 0x41, 0x53, 0x4e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_storj_ac_sn_proto_rawDescOnce sync.Once
	file_storj_ac_sn_proto_rawDescData = file_storj_ac_sn_proto_rawDesc
)

func file_storj_ac_sn_proto_rawDescGZIP() []byte {
	file_storj_ac_sn_proto_rawDescOnce.Do(func() {
		file_storj_ac_sn_proto_rawDescData = protoimpl.X.CompressGZIP(file_storj_ac_sn_proto_rawDescData)
	})
	return file_storj_ac_sn_proto_rawDescData
}

var file_storj_ac_sn_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_storj_ac_sn_proto_goTypes = []interface{}{
	(*StorjClientStorageRequest)(nil),  // 0: proto.StorjClientStorageRequest
	(*StorjClientStorageResponse)(nil), // 1: proto.StorjClientStorageResponse
	(*StorjClientUpdDSRequest)(nil),    // 2: proto.StorjClientUpdDSRequest
	(*StorjClientUpdDSResponse)(nil),   // 3: proto.StorjClientUpdDSResponse
	(*StorjPASNRequest)(nil),           // 4: proto.StorjPASNRequest
	(*StorjPASNResponse)(nil),          // 5: proto.StorjPASNResponse
	nil,                                // 6: proto.StorjPASNRequest.DsversionEntry
	nil,                                // 7: proto.StorjPASNResponse.DsversionEntry
}
var file_storj_ac_sn_proto_depIdxs = []int32{
	6, // 0: proto.StorjPASNRequest.dsversion:type_name -> proto.StorjPASNRequest.DsversionEntry
	7, // 1: proto.StorjPASNResponse.dsversion:type_name -> proto.StorjPASNResponse.DsversionEntry
	0, // 2: proto.StorjSNACService.StorjPutFileNotice:input_type -> proto.StorjClientStorageRequest
	2, // 3: proto.StorjSNACService.StorjUpdateDataShardNotice:input_type -> proto.StorjClientUpdDSRequest
	4, // 4: proto.StorjSNACService.StorjPreAuditSN:input_type -> proto.StorjPASNRequest
	1, // 5: proto.StorjSNACService.StorjPutFileNotice:output_type -> proto.StorjClientStorageResponse
	3, // 6: proto.StorjSNACService.StorjUpdateDataShardNotice:output_type -> proto.StorjClientUpdDSResponse
	5, // 7: proto.StorjSNACService.StorjPreAuditSN:output_type -> proto.StorjPASNResponse
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_storj_ac_sn_proto_init() }
func file_storj_ac_sn_proto_init() {
	if File_storj_ac_sn_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_storj_ac_sn_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjClientStorageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_ac_sn_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjClientStorageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_ac_sn_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjClientUpdDSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_ac_sn_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjClientUpdDSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_ac_sn_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjPASNRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storj_ac_sn_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorjPASNResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_storj_ac_sn_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_storj_ac_sn_proto_goTypes,
		DependencyIndexes: file_storj_ac_sn_proto_depIdxs,
		MessageInfos:      file_storj_ac_sn_proto_msgTypes,
	}.Build()
	File_storj_ac_sn_proto = out.File
	file_storj_ac_sn_proto_rawDesc = nil
	file_storj_ac_sn_proto_goTypes = nil
	file_storj_ac_sn_proto_depIdxs = nil
}

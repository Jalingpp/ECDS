// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: client_sn.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SNServiceClient is the client API for SNService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SNServiceClient interface {
	ClientRegisterSN(ctx context.Context, in *CRegistSNRequest, opts ...grpc.CallOption) (*CRegistSNResponse, error)
	PutDataShard(ctx context.Context, in *PutDSRequest, opts ...grpc.CallOption) (*PutDSResponse, error)
	GetDataShard(ctx context.Context, in *GetDSRequest, opts ...grpc.CallOption) (*GetDSResponse, error)
	UpdateDataShards(ctx context.Context, in *UpdDSsRequest, opts ...grpc.CallOption) (*UpdDSsResponse, error)
	PutIncParityShards(ctx context.Context, in *PutIPSRequest, opts ...grpc.CallOption) (*PutIPSResponse, error)
	GetSNStorageCost(ctx context.Context, in *GSNSCRequest, opts ...grpc.CallOption) (*GSNSCResponse, error)
}

type sNServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSNServiceClient(cc grpc.ClientConnInterface) SNServiceClient {
	return &sNServiceClient{cc}
}

func (c *sNServiceClient) ClientRegisterSN(ctx context.Context, in *CRegistSNRequest, opts ...grpc.CallOption) (*CRegistSNResponse, error) {
	out := new(CRegistSNResponse)
	err := c.cc.Invoke(ctx, "/proto.SNService/ClientRegisterSN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sNServiceClient) PutDataShard(ctx context.Context, in *PutDSRequest, opts ...grpc.CallOption) (*PutDSResponse, error) {
	out := new(PutDSResponse)
	err := c.cc.Invoke(ctx, "/proto.SNService/PutDataShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sNServiceClient) GetDataShard(ctx context.Context, in *GetDSRequest, opts ...grpc.CallOption) (*GetDSResponse, error) {
	out := new(GetDSResponse)
	err := c.cc.Invoke(ctx, "/proto.SNService/GetDataShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sNServiceClient) UpdateDataShards(ctx context.Context, in *UpdDSsRequest, opts ...grpc.CallOption) (*UpdDSsResponse, error) {
	out := new(UpdDSsResponse)
	err := c.cc.Invoke(ctx, "/proto.SNService/UpdateDataShards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sNServiceClient) PutIncParityShards(ctx context.Context, in *PutIPSRequest, opts ...grpc.CallOption) (*PutIPSResponse, error) {
	out := new(PutIPSResponse)
	err := c.cc.Invoke(ctx, "/proto.SNService/PutIncParityShards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sNServiceClient) GetSNStorageCost(ctx context.Context, in *GSNSCRequest, opts ...grpc.CallOption) (*GSNSCResponse, error) {
	out := new(GSNSCResponse)
	err := c.cc.Invoke(ctx, "/proto.SNService/GetSNStorageCost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SNServiceServer is the server API for SNService service.
// All implementations must embed UnimplementedSNServiceServer
// for forward compatibility
type SNServiceServer interface {
	ClientRegisterSN(context.Context, *CRegistSNRequest) (*CRegistSNResponse, error)
	PutDataShard(context.Context, *PutDSRequest) (*PutDSResponse, error)
	GetDataShard(context.Context, *GetDSRequest) (*GetDSResponse, error)
	UpdateDataShards(context.Context, *UpdDSsRequest) (*UpdDSsResponse, error)
	PutIncParityShards(context.Context, *PutIPSRequest) (*PutIPSResponse, error)
	GetSNStorageCost(context.Context, *GSNSCRequest) (*GSNSCResponse, error)
	mustEmbedUnimplementedSNServiceServer()
}

// UnimplementedSNServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSNServiceServer struct {
}

func (UnimplementedSNServiceServer) ClientRegisterSN(context.Context, *CRegistSNRequest) (*CRegistSNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientRegisterSN not implemented")
}
func (UnimplementedSNServiceServer) PutDataShard(context.Context, *PutDSRequest) (*PutDSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutDataShard not implemented")
}
func (UnimplementedSNServiceServer) GetDataShard(context.Context, *GetDSRequest) (*GetDSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataShard not implemented")
}
func (UnimplementedSNServiceServer) UpdateDataShards(context.Context, *UpdDSsRequest) (*UpdDSsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataShards not implemented")
}
func (UnimplementedSNServiceServer) PutIncParityShards(context.Context, *PutIPSRequest) (*PutIPSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutIncParityShards not implemented")
}
func (UnimplementedSNServiceServer) GetSNStorageCost(context.Context, *GSNSCRequest) (*GSNSCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSNStorageCost not implemented")
}
func (UnimplementedSNServiceServer) mustEmbedUnimplementedSNServiceServer() {}

// UnsafeSNServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SNServiceServer will
// result in compilation errors.
type UnsafeSNServiceServer interface {
	mustEmbedUnimplementedSNServiceServer()
}

func RegisterSNServiceServer(s grpc.ServiceRegistrar, srv SNServiceServer) {
	s.RegisterService(&SNService_ServiceDesc, srv)
}

func _SNService_ClientRegisterSN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CRegistSNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SNServiceServer).ClientRegisterSN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SNService/ClientRegisterSN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SNServiceServer).ClientRegisterSN(ctx, req.(*CRegistSNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SNService_PutDataShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutDSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SNServiceServer).PutDataShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SNService/PutDataShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SNServiceServer).PutDataShard(ctx, req.(*PutDSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SNService_GetDataShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SNServiceServer).GetDataShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SNService/GetDataShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SNServiceServer).GetDataShard(ctx, req.(*GetDSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SNService_UpdateDataShards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdDSsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SNServiceServer).UpdateDataShards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SNService/UpdateDataShards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SNServiceServer).UpdateDataShards(ctx, req.(*UpdDSsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SNService_PutIncParityShards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutIPSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SNServiceServer).PutIncParityShards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SNService/PutIncParityShards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SNServiceServer).PutIncParityShards(ctx, req.(*PutIPSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SNService_GetSNStorageCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GSNSCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SNServiceServer).GetSNStorageCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SNService/GetSNStorageCost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SNServiceServer).GetSNStorageCost(ctx, req.(*GSNSCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SNService_ServiceDesc is the grpc.ServiceDesc for SNService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SNService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SNService",
	HandlerType: (*SNServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientRegisterSN",
			Handler:    _SNService_ClientRegisterSN_Handler,
		},
		{
			MethodName: "PutDataShard",
			Handler:    _SNService_PutDataShard_Handler,
		},
		{
			MethodName: "GetDataShard",
			Handler:    _SNService_GetDataShard_Handler,
		},
		{
			MethodName: "UpdateDataShards",
			Handler:    _SNService_UpdateDataShards_Handler,
		},
		{
			MethodName: "PutIncParityShards",
			Handler:    _SNService_PutIncParityShards_Handler,
		},
		{
			MethodName: "GetSNStorageCost",
			Handler:    _SNService_GetSNStorageCost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client_sn.proto",
}

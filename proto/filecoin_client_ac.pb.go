// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.26.1
// source: filecoin_client_ac.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 客户端发起的存储请求
type FilecoinStorageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Version       int32                  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`  //待存储的文件版本号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilecoinStorageRequest) Reset() {
	*x = FilecoinStorageRequest{}
	mi := &file_filecoin_client_ac_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilecoinStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilecoinStorageRequest) ProtoMessage() {}

func (x *FilecoinStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_client_ac_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilecoinStorageRequest.ProtoReflect.Descriptor instead.
func (*FilecoinStorageRequest) Descriptor() ([]byte, []int) {
	return file_filecoin_client_ac_proto_rawDescGZIP(), []int{0}
}

func (x *FilecoinStorageRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *FilecoinStorageRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FilecoinStorageRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// 审计方对存储请求的回复
type FilecoinStorageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`                   //待存储的文件名
	SnsForFd      []string               `protobuf:"bytes,2,rep,name=sns_for_fd,json=snsForFd,proto3" json:"sns_for_fd,omitempty"` //用于存储文件副本的存储节点id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilecoinStorageResponse) Reset() {
	*x = FilecoinStorageResponse{}
	mi := &file_filecoin_client_ac_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilecoinStorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilecoinStorageResponse) ProtoMessage() {}

func (x *FilecoinStorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_client_ac_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilecoinStorageResponse.ProtoReflect.Descriptor instead.
func (*FilecoinStorageResponse) Descriptor() ([]byte, []int) {
	return file_filecoin_client_ac_proto_rawDescGZIP(), []int{1}
}

func (x *FilecoinStorageResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FilecoinStorageResponse) GetSnsForFd() []string {
	if x != nil {
		return x.SnsForFd
	}
	return nil
}

type Int32ArrayACFilecoin struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []int32                `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Int32ArrayACFilecoin) Reset() {
	*x = Int32ArrayACFilecoin{}
	mi := &file_filecoin_client_ac_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Int32ArrayACFilecoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32ArrayACFilecoin) ProtoMessage() {}

func (x *Int32ArrayACFilecoin) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_client_ac_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32ArrayACFilecoin.ProtoReflect.Descriptor instead.
func (*Int32ArrayACFilecoin) Descriptor() ([]byte, []int) {
	return file_filecoin_client_ac_proto_rawDescGZIP(), []int{2}
}

func (x *Int32ArrayACFilecoin) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// 客户端发起的写元信息请求
type FilecoinPFCRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //文件名
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilecoinPFCRequest) Reset() {
	*x = FilecoinPFCRequest{}
	mi := &file_filecoin_client_ac_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilecoinPFCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilecoinPFCRequest) ProtoMessage() {}

func (x *FilecoinPFCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_client_ac_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilecoinPFCRequest.ProtoReflect.Descriptor instead.
func (*FilecoinPFCRequest) Descriptor() ([]byte, []int) {
	return file_filecoin_client_ac_proto_rawDescGZIP(), []int{3}
}

func (x *FilecoinPFCRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *FilecoinPFCRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

// 审计方对写元信息请求的回复
type FilecoinPFCResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`   //附带信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilecoinPFCResponse) Reset() {
	*x = FilecoinPFCResponse{}
	mi := &file_filecoin_client_ac_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilecoinPFCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilecoinPFCResponse) ProtoMessage() {}

func (x *FilecoinPFCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_client_ac_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilecoinPFCResponse.ProtoReflect.Descriptor instead.
func (*FilecoinPFCResponse) Descriptor() ([]byte, []int) {
	return file_filecoin_client_ac_proto_rawDescGZIP(), []int{4}
}

func (x *FilecoinPFCResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FilecoinPFCResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 客户端发起的获取文件请求
type FilecoinGFACRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //请求的文件名
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilecoinGFACRequest) Reset() {
	*x = FilecoinGFACRequest{}
	mi := &file_filecoin_client_ac_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilecoinGFACRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilecoinGFACRequest) ProtoMessage() {}

func (x *FilecoinGFACRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_client_ac_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilecoinGFACRequest.ProtoReflect.Descriptor instead.
func (*FilecoinGFACRequest) Descriptor() ([]byte, []int) {
	return file_filecoin_client_ac_proto_rawDescGZIP(), []int{5}
}

func (x *FilecoinGFACRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *FilecoinGFACRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

// 审计方对获取文件请求的回复
type FilecoinGFACResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`                                                                     //请求的文件名
	Version       int32                  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`                                                                      //文件版本号
	Snsds         map[string]string      `protobuf:"bytes,3,rep,name=snsds,proto3" json:"snsds,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` //数据副本所在的存储节点id，key:client-filename-i,value:snid
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilecoinGFACResponse) Reset() {
	*x = FilecoinGFACResponse{}
	mi := &file_filecoin_client_ac_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilecoinGFACResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilecoinGFACResponse) ProtoMessage() {}

func (x *FilecoinGFACResponse) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_client_ac_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilecoinGFACResponse.ProtoReflect.Descriptor instead.
func (*FilecoinGFACResponse) Descriptor() ([]byte, []int) {
	return file_filecoin_client_ac_proto_rawDescGZIP(), []int{6}
}

func (x *FilecoinGFACResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FilecoinGFACResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *FilecoinGFACResponse) GetSnsds() map[string]string {
	if x != nil {
		return x.Snsds
	}
	return nil
}

// 客户端发起的文件数据更新请求
type FilecoinUFRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //文件名
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilecoinUFRequest) Reset() {
	*x = FilecoinUFRequest{}
	mi := &file_filecoin_client_ac_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilecoinUFRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilecoinUFRequest) ProtoMessage() {}

func (x *FilecoinUFRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_client_ac_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilecoinUFRequest.ProtoReflect.Descriptor instead.
func (*FilecoinUFRequest) Descriptor() ([]byte, []int) {
	return file_filecoin_client_ac_proto_rawDescGZIP(), []int{7}
}

func (x *FilecoinUFRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *FilecoinUFRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

// 审计方对数据分片元信息更新请求的回复
type FilecoinUFResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`                                                                     //待更新的文件名
	Version       int32                  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`                                                                      //当前文件版本号
	Snsds         map[string]string      `protobuf:"bytes,3,rep,name=snsds,proto3" json:"snsds,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` //数据分片所在的存储节点id，key:cid-filename-i,value:snid
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilecoinUFResponse) Reset() {
	*x = FilecoinUFResponse{}
	mi := &file_filecoin_client_ac_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilecoinUFResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilecoinUFResponse) ProtoMessage() {}

func (x *FilecoinUFResponse) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_client_ac_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilecoinUFResponse.ProtoReflect.Descriptor instead.
func (*FilecoinUFResponse) Descriptor() ([]byte, []int) {
	return file_filecoin_client_ac_proto_rawDescGZIP(), []int{8}
}

func (x *FilecoinUFResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FilecoinUFResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *FilecoinUFResponse) GetSnsds() map[string]string {
	if x != nil {
		return x.Snsds
	}
	return nil
}

// 客户端发起的数据分片元信息更新请求
type FilecoinUFCRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`      //客户端ID
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`      //文件名
	Newversion    int32                  `protobuf:"varint,3,opt,name=newversion,proto3" json:"newversion,omitempty"` //新版本号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilecoinUFCRequest) Reset() {
	*x = FilecoinUFCRequest{}
	mi := &file_filecoin_client_ac_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilecoinUFCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilecoinUFCRequest) ProtoMessage() {}

func (x *FilecoinUFCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_client_ac_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilecoinUFCRequest.ProtoReflect.Descriptor instead.
func (*FilecoinUFCRequest) Descriptor() ([]byte, []int) {
	return file_filecoin_client_ac_proto_rawDescGZIP(), []int{9}
}

func (x *FilecoinUFCRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *FilecoinUFCRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FilecoinUFCRequest) GetNewversion() int32 {
	if x != nil {
		return x.Newversion
	}
	return 0
}

// 审计方对数据分片元信息更新请求的回复
type FilecoinUFCResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`   //附带信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilecoinUFCResponse) Reset() {
	*x = FilecoinUFCResponse{}
	mi := &file_filecoin_client_ac_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilecoinUFCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilecoinUFCResponse) ProtoMessage() {}

func (x *FilecoinUFCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_client_ac_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilecoinUFCResponse.ProtoReflect.Descriptor instead.
func (*FilecoinUFCResponse) Descriptor() ([]byte, []int) {
	return file_filecoin_client_ac_proto_rawDescGZIP(), []int{10}
}

func (x *FilecoinUFCResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FilecoinUFCResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_filecoin_client_ac_proto protoreflect.FileDescriptor

const file_filecoin_client_ac_proto_rawDesc = "" +
	"\n" +
	"\x18filecoin_client_ac.proto\x12\x05proto\"j\n" +
	"\x16FilecoinStorageRequest\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12\x18\n" +
	"\aversion\x18\x03 \x01(\x05R\aversion\"S\n" +
	"\x17FilecoinStorageResponse\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x1c\n" +
	"\n" +
	"sns_for_fd\x18\x02 \x03(\tR\bsnsForFd\".\n" +
	"\x14Int32ArrayACFilecoin\x12\x16\n" +
	"\x06values\x18\x01 \x03(\x05R\x06values\"L\n" +
	"\x12FilecoinPFCRequest\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\"K\n" +
	"\x13FilecoinPFCResponse\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"M\n" +
	"\x13FilecoinGFACRequest\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\"\xc4\x01\n" +
	"\x14FilecoinGFACResponse\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x18\n" +
	"\aversion\x18\x02 \x01(\x05R\aversion\x12<\n" +
	"\x05snsds\x18\x03 \x03(\v2&.proto.FilecoinGFACResponse.SnsdsEntryR\x05snsds\x1a8\n" +
	"\n" +
	"SnsdsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"K\n" +
	"\x11FilecoinUFRequest\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\"\xc0\x01\n" +
	"\x12FilecoinUFResponse\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x18\n" +
	"\aversion\x18\x02 \x01(\x05R\aversion\x12:\n" +
	"\x05snsds\x18\x03 \x03(\v2$.proto.FilecoinUFResponse.SnsdsEntryR\x05snsds\x1a8\n" +
	"\n" +
	"SnsdsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"l\n" +
	"\x12FilecoinUFCRequest\x12\x1a\n" +
	"\bclientId\x18\x01 \x01(\tR\bclientId\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12\x1e\n" +
	"\n" +
	"newversion\x18\x03 \x01(\x05R\n" +
	"newversion\"K\n" +
	"\x13FilecoinUFCResponse\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage2\xa7\x03\n" +
	"\x11FilecoinACService\x12R\n" +
	"\x11FilecoinSelectSNs\x12\x1d.proto.FilecoinStorageRequest\x1a\x1e.proto.FilecoinStorageResponse\x12N\n" +
	"\x15FilecoinPutFileCommit\x12\x19.proto.FilecoinPFCRequest\x1a\x1a.proto.FilecoinPFCResponse\x12M\n" +
	"\x12FilecoinGetFileSNs\x12\x1a.proto.FilecoinGFACRequest\x1a\x1b.proto.FilecoinGFACResponse\x12L\n" +
	"\x15FilecoinUpdateFileReq\x12\x18.proto.FilecoinUFRequest\x1a\x19.proto.FilecoinUFResponse\x12Q\n" +
	"\x18FilecoinUpdateFileCommit\x12\x19.proto.FilecoinUFCRequest\x1a\x1a.proto.FilecoinUFCResponseB\x04Z\x02./b\x06proto3"

var (
	file_filecoin_client_ac_proto_rawDescOnce sync.Once
	file_filecoin_client_ac_proto_rawDescData []byte
)

func file_filecoin_client_ac_proto_rawDescGZIP() []byte {
	file_filecoin_client_ac_proto_rawDescOnce.Do(func() {
		file_filecoin_client_ac_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_filecoin_client_ac_proto_rawDesc), len(file_filecoin_client_ac_proto_rawDesc)))
	})
	return file_filecoin_client_ac_proto_rawDescData
}

var file_filecoin_client_ac_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_filecoin_client_ac_proto_goTypes = []any{
	(*FilecoinStorageRequest)(nil),  // 0: proto.FilecoinStorageRequest
	(*FilecoinStorageResponse)(nil), // 1: proto.FilecoinStorageResponse
	(*Int32ArrayACFilecoin)(nil),    // 2: proto.Int32ArrayACFilecoin
	(*FilecoinPFCRequest)(nil),      // 3: proto.FilecoinPFCRequest
	(*FilecoinPFCResponse)(nil),     // 4: proto.FilecoinPFCResponse
	(*FilecoinGFACRequest)(nil),     // 5: proto.FilecoinGFACRequest
	(*FilecoinGFACResponse)(nil),    // 6: proto.FilecoinGFACResponse
	(*FilecoinUFRequest)(nil),       // 7: proto.FilecoinUFRequest
	(*FilecoinUFResponse)(nil),      // 8: proto.FilecoinUFResponse
	(*FilecoinUFCRequest)(nil),      // 9: proto.FilecoinUFCRequest
	(*FilecoinUFCResponse)(nil),     // 10: proto.FilecoinUFCResponse
	nil,                             // 11: proto.FilecoinGFACResponse.SnsdsEntry
	nil,                             // 12: proto.FilecoinUFResponse.SnsdsEntry
}
var file_filecoin_client_ac_proto_depIdxs = []int32{
	11, // 0: proto.FilecoinGFACResponse.snsds:type_name -> proto.FilecoinGFACResponse.SnsdsEntry
	12, // 1: proto.FilecoinUFResponse.snsds:type_name -> proto.FilecoinUFResponse.SnsdsEntry
	0,  // 2: proto.FilecoinACService.FilecoinSelectSNs:input_type -> proto.FilecoinStorageRequest
	3,  // 3: proto.FilecoinACService.FilecoinPutFileCommit:input_type -> proto.FilecoinPFCRequest
	5,  // 4: proto.FilecoinACService.FilecoinGetFileSNs:input_type -> proto.FilecoinGFACRequest
	7,  // 5: proto.FilecoinACService.FilecoinUpdateFileReq:input_type -> proto.FilecoinUFRequest
	9,  // 6: proto.FilecoinACService.FilecoinUpdateFileCommit:input_type -> proto.FilecoinUFCRequest
	1,  // 7: proto.FilecoinACService.FilecoinSelectSNs:output_type -> proto.FilecoinStorageResponse
	4,  // 8: proto.FilecoinACService.FilecoinPutFileCommit:output_type -> proto.FilecoinPFCResponse
	6,  // 9: proto.FilecoinACService.FilecoinGetFileSNs:output_type -> proto.FilecoinGFACResponse
	8,  // 10: proto.FilecoinACService.FilecoinUpdateFileReq:output_type -> proto.FilecoinUFResponse
	10, // 11: proto.FilecoinACService.FilecoinUpdateFileCommit:output_type -> proto.FilecoinUFCResponse
	7,  // [7:12] is the sub-list for method output_type
	2,  // [2:7] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_filecoin_client_ac_proto_init() }
func file_filecoin_client_ac_proto_init() {
	if File_filecoin_client_ac_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_filecoin_client_ac_proto_rawDesc), len(file_filecoin_client_ac_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_filecoin_client_ac_proto_goTypes,
		DependencyIndexes: file_filecoin_client_ac_proto_depIdxs,
		MessageInfos:      file_filecoin_client_ac_proto_msgTypes,
	}.Build()
	File_filecoin_client_ac_proto = out.File
	file_filecoin_client_ac_proto_goTypes = nil
	file_filecoin_client_ac_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.26.1
// source: filecoin_client_ac.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 客户端发起的存储请求
type FilecoinStorageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Version  int32  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`  //待存储的文件版本号
}

func (x *FilecoinStorageRequest) Reset() {
	*x = FilecoinStorageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecoin_client_ac_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilecoinStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilecoinStorageRequest) ProtoMessage() {}

func (x *FilecoinStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_client_ac_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilecoinStorageRequest.ProtoReflect.Descriptor instead.
func (*FilecoinStorageRequest) Descriptor() ([]byte, []int) {
	return file_filecoin_client_ac_proto_rawDescGZIP(), []int{0}
}

func (x *FilecoinStorageRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *FilecoinStorageRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FilecoinStorageRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// 审计方对存储请求的回复
type FilecoinStorageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string   `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`                   //待存储的文件名
	SnsForFd []string `protobuf:"bytes,2,rep,name=sns_for_fd,json=snsForFd,proto3" json:"sns_for_fd,omitempty"` //用于存储文件副本的存储节点id
}

func (x *FilecoinStorageResponse) Reset() {
	*x = FilecoinStorageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecoin_client_ac_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilecoinStorageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilecoinStorageResponse) ProtoMessage() {}

func (x *FilecoinStorageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_client_ac_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilecoinStorageResponse.ProtoReflect.Descriptor instead.
func (*FilecoinStorageResponse) Descriptor() ([]byte, []int) {
	return file_filecoin_client_ac_proto_rawDescGZIP(), []int{1}
}

func (x *FilecoinStorageResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FilecoinStorageResponse) GetSnsForFd() []string {
	if x != nil {
		return x.SnsForFd
	}
	return nil
}

type Int32ArrayACFilecoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []int32 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *Int32ArrayACFilecoin) Reset() {
	*x = Int32ArrayACFilecoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecoin_client_ac_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int32ArrayACFilecoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32ArrayACFilecoin) ProtoMessage() {}

func (x *Int32ArrayACFilecoin) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_client_ac_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32ArrayACFilecoin.ProtoReflect.Descriptor instead.
func (*Int32ArrayACFilecoin) Descriptor() ([]byte, []int) {
	return file_filecoin_client_ac_proto_rawDescGZIP(), []int{2}
}

func (x *Int32ArrayACFilecoin) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// 客户端发起的写元信息请求
type FilecoinPFCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string                           `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`                                                                                       //客户端ID
	Filename string                           `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`                                                                                       //文件名
	Randmap  map[string]*Int32ArrayACFilecoin `protobuf:"bytes,3,rep,name=randmap,proto3" json:"randmap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //各副本对应的随机数集
	Rootmap  map[string][]byte                `protobuf:"bytes,4,rep,name=rootmap,proto3" json:"rootmap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //各副本对应的默克尔树根哈希
}

func (x *FilecoinPFCRequest) Reset() {
	*x = FilecoinPFCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecoin_client_ac_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilecoinPFCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilecoinPFCRequest) ProtoMessage() {}

func (x *FilecoinPFCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_client_ac_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilecoinPFCRequest.ProtoReflect.Descriptor instead.
func (*FilecoinPFCRequest) Descriptor() ([]byte, []int) {
	return file_filecoin_client_ac_proto_rawDescGZIP(), []int{3}
}

func (x *FilecoinPFCRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *FilecoinPFCRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FilecoinPFCRequest) GetRandmap() map[string]*Int32ArrayACFilecoin {
	if x != nil {
		return x.Randmap
	}
	return nil
}

func (x *FilecoinPFCRequest) GetRootmap() map[string][]byte {
	if x != nil {
		return x.Rootmap
	}
	return nil
}

// 审计方对写元信息请求的回复
type FilecoinPFCResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Message  string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`   //附带信息
}

func (x *FilecoinPFCResponse) Reset() {
	*x = FilecoinPFCResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecoin_client_ac_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilecoinPFCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilecoinPFCResponse) ProtoMessage() {}

func (x *FilecoinPFCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_client_ac_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilecoinPFCResponse.ProtoReflect.Descriptor instead.
func (*FilecoinPFCResponse) Descriptor() ([]byte, []int) {
	return file_filecoin_client_ac_proto_rawDescGZIP(), []int{4}
}

func (x *FilecoinPFCResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FilecoinPFCResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 客户端发起的获取文件请求
type FilecoinGFACRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //请求的文件名
}

func (x *FilecoinGFACRequest) Reset() {
	*x = FilecoinGFACRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecoin_client_ac_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilecoinGFACRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilecoinGFACRequest) ProtoMessage() {}

func (x *FilecoinGFACRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_client_ac_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilecoinGFACRequest.ProtoReflect.Descriptor instead.
func (*FilecoinGFACRequest) Descriptor() ([]byte, []int) {
	return file_filecoin_client_ac_proto_rawDescGZIP(), []int{5}
}

func (x *FilecoinGFACRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *FilecoinGFACRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

// 审计方对获取文件请求的回复
type FilecoinGFACResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string            `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`                                                                                   //请求的文件名
	Version  int32             `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`                                                                                    //文件版本号
	Snsds    map[string]string `protobuf:"bytes,3,rep,name=snsds,proto3" json:"snsds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //数据分片所在的存储节点id，key:filename-i,value:snid
}

func (x *FilecoinGFACResponse) Reset() {
	*x = FilecoinGFACResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecoin_client_ac_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilecoinGFACResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilecoinGFACResponse) ProtoMessage() {}

func (x *FilecoinGFACResponse) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_client_ac_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilecoinGFACResponse.ProtoReflect.Descriptor instead.
func (*FilecoinGFACResponse) Descriptor() ([]byte, []int) {
	return file_filecoin_client_ac_proto_rawDescGZIP(), []int{6}
}

func (x *FilecoinGFACResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FilecoinGFACResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *FilecoinGFACResponse) GetSnsds() map[string]string {
	if x != nil {
		return x.Snsds
	}
	return nil
}

// 客户端发起的获取文件请求
type FilecoinGRRRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //请求的文件名
	Rep      string `protobuf:"bytes,3,opt,name=rep,proto3" json:"rep,omitempty"`           //请求的文件副本号
}

func (x *FilecoinGRRRequest) Reset() {
	*x = FilecoinGRRRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecoin_client_ac_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilecoinGRRRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilecoinGRRRequest) ProtoMessage() {}

func (x *FilecoinGRRRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_client_ac_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilecoinGRRRequest.ProtoReflect.Descriptor instead.
func (*FilecoinGRRRequest) Descriptor() ([]byte, []int) {
	return file_filecoin_client_ac_proto_rawDescGZIP(), []int{7}
}

func (x *FilecoinGRRRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *FilecoinGRRRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FilecoinGRRRequest) GetRep() string {
	if x != nil {
		return x.Rep
	}
	return ""
}

// 审计方对获取文件请求的回复
type FilecoinGRRResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rands *Int32ArrayACFilecoin `protobuf:"bytes,1,opt,name=rands,proto3" json:"rands,omitempty"` //请求的副本对应的随机数集
	Root  []byte                `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`   //请求的副本对应的默克尔树根
}

func (x *FilecoinGRRResponse) Reset() {
	*x = FilecoinGRRResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecoin_client_ac_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilecoinGRRResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilecoinGRRResponse) ProtoMessage() {}

func (x *FilecoinGRRResponse) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_client_ac_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilecoinGRRResponse.ProtoReflect.Descriptor instead.
func (*FilecoinGRRResponse) Descriptor() ([]byte, []int) {
	return file_filecoin_client_ac_proto_rawDescGZIP(), []int{8}
}

func (x *FilecoinGRRResponse) GetRands() *Int32ArrayACFilecoin {
	if x != nil {
		return x.Rands
	}
	return nil
}

func (x *FilecoinGRRResponse) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

// 客户端发起的文件数据更新请求
type FilecoinUFRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` //客户端ID
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` //文件名
	Version  int32  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`  //文件版本号
}

func (x *FilecoinUFRequest) Reset() {
	*x = FilecoinUFRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecoin_client_ac_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilecoinUFRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilecoinUFRequest) ProtoMessage() {}

func (x *FilecoinUFRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_client_ac_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilecoinUFRequest.ProtoReflect.Descriptor instead.
func (*FilecoinUFRequest) Descriptor() ([]byte, []int) {
	return file_filecoin_client_ac_proto_rawDescGZIP(), []int{9}
}

func (x *FilecoinUFRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *FilecoinUFRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FilecoinUFRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// 审计方对数据分片元信息更新请求的回复
type FilecoinUFResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string            `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`                                                                                   //待更新的文件名
	Snsds    map[string]string `protobuf:"bytes,2,rep,name=snsds,proto3" json:"snsds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //数据分片所在的存储节点id，key:filename-i,value:snid
}

func (x *FilecoinUFResponse) Reset() {
	*x = FilecoinUFResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecoin_client_ac_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilecoinUFResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilecoinUFResponse) ProtoMessage() {}

func (x *FilecoinUFResponse) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_client_ac_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilecoinUFResponse.ProtoReflect.Descriptor instead.
func (*FilecoinUFResponse) Descriptor() ([]byte, []int) {
	return file_filecoin_client_ac_proto_rawDescGZIP(), []int{10}
}

func (x *FilecoinUFResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FilecoinUFResponse) GetSnsds() map[string]string {
	if x != nil {
		return x.Snsds
	}
	return nil
}

// 客户端发起的数据分片元信息更新请求
type FilecoinUFCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string                           `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`                                                                                       //客户端ID
	Filename string                           `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`                                                                                       //文件名
	Randmap  map[string]*Int32ArrayACFilecoin `protobuf:"bytes,3,rep,name=randmap,proto3" json:"randmap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //各副本对应的随机数集
	Rootmap  map[string][]byte                `protobuf:"bytes,4,rep,name=rootmap,proto3" json:"rootmap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //各副本对应的默克尔树根哈希
}

func (x *FilecoinUFCRequest) Reset() {
	*x = FilecoinUFCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecoin_client_ac_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilecoinUFCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilecoinUFCRequest) ProtoMessage() {}

func (x *FilecoinUFCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_client_ac_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilecoinUFCRequest.ProtoReflect.Descriptor instead.
func (*FilecoinUFCRequest) Descriptor() ([]byte, []int) {
	return file_filecoin_client_ac_proto_rawDescGZIP(), []int{11}
}

func (x *FilecoinUFCRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *FilecoinUFCRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FilecoinUFCRequest) GetRandmap() map[string]*Int32ArrayACFilecoin {
	if x != nil {
		return x.Randmap
	}
	return nil
}

func (x *FilecoinUFCRequest) GetRootmap() map[string][]byte {
	if x != nil {
		return x.Rootmap
	}
	return nil
}

// 审计方对数据分片元信息更新请求的回复
type FilecoinUFCResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"` //待存储的文件名
	Message  string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`   //附带信息
}

func (x *FilecoinUFCResponse) Reset() {
	*x = FilecoinUFCResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filecoin_client_ac_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilecoinUFCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilecoinUFCResponse) ProtoMessage() {}

func (x *FilecoinUFCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_filecoin_client_ac_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilecoinUFCResponse.ProtoReflect.Descriptor instead.
func (*FilecoinUFCResponse) Descriptor() ([]byte, []int) {
	return file_filecoin_client_ac_proto_rawDescGZIP(), []int{12}
}

func (x *FilecoinUFCResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FilecoinUFCResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_filecoin_client_ac_proto protoreflect.FileDescriptor

var file_filecoin_client_ac_proto_rawDesc = []byte{
	0x0a, 0x18, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x6a, 0x0a, 0x16, 0x46, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x53, 0x0a,
	0x17, 0x46, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x6e, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x66, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6e, 0x73, 0x46, 0x6f, 0x72,
	0x46, 0x64, 0x22, 0x2e, 0x0a, 0x14, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x41, 0x43, 0x46, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0xe5, 0x02, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x50,
	0x46, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x40, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x63,
	0x6f, 0x69, 0x6e, 0x50, 0x46, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x61,
	0x6e, 0x64, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x64,
	0x6d, 0x61, 0x70, 0x12, 0x40, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x63, 0x6f, 0x69, 0x6e, 0x50, 0x46, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x6f, 0x6f, 0x74, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x6f,
	0x6f, 0x74, 0x6d, 0x61, 0x70, 0x1a, 0x57, 0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x43, 0x46, 0x69, 0x6c, 0x65, 0x63,
	0x6f, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a,
	0x0a, 0x0c, 0x52, 0x6f, 0x6f, 0x74, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4b, 0x0a, 0x13, 0x46, 0x69,
	0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x50, 0x46, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4d, 0x0a, 0x13, 0x46, 0x69, 0x6c, 0x65, 0x63,
	0x6f, 0x69, 0x6e, 0x47, 0x46, 0x41, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x6c, 0x65, 0x63,
	0x6f, 0x69, 0x6e, 0x47, 0x46, 0x41, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x6e, 0x73, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x63, 0x6f, 0x69, 0x6e, 0x47, 0x46, 0x41, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x6e, 0x73, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x73, 0x6e,
	0x73, 0x64, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x53, 0x6e, 0x73, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5e, 0x0a,
	0x12, 0x46, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x47, 0x52, 0x52, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x70, 0x22, 0x5c, 0x0a,
	0x13, 0x46, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x47, 0x52, 0x52, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x43, 0x46, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x22, 0x65, 0x0a, 0x11, 0x46,
	0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x55, 0x46, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xa6, 0x01, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x55,
	0x46, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x6e, 0x73, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x63, 0x6f, 0x69, 0x6e, 0x55, 0x46, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x6e, 0x73, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x73, 0x6e, 0x73, 0x64,
	0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x53, 0x6e, 0x73, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe5, 0x02, 0x0a, 0x12,
	0x46, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x55, 0x46, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x72, 0x61,
	0x6e, 0x64, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x55, 0x46, 0x43, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x70, 0x12, 0x40, 0x0a, 0x07,
	0x72, 0x6f, 0x6f, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x55, 0x46,
	0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x6d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x6d, 0x61, 0x70, 0x1a, 0x57,
	0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x41, 0x43, 0x46, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x52, 0x6f, 0x6f, 0x74, 0x6d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x4b, 0x0a, 0x13, 0x46, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x55,
	0x46, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0xf5, 0x03, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x41, 0x43, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x63, 0x6f,
	0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x4e, 0x73, 0x12, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x46, 0x69,
	0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x50, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x63, 0x6f, 0x69, 0x6e, 0x50, 0x46, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x50,
	0x46, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x46, 0x69,
	0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x4e, 0x73,
	0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69,
	0x6e, 0x47, 0x46, 0x41, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x47, 0x46, 0x41,
	0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x46, 0x69, 0x6c,
	0x65, 0x63, 0x6f, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x52, 0x6f, 0x6f, 0x74,
	0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69,
	0x6e, 0x47, 0x52, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x47, 0x52, 0x52, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x15, 0x46, 0x69, 0x6c, 0x65, 0x63,
	0x6f, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69,
	0x6e, 0x55, 0x46, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x55, 0x46, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x18, 0x46, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x63, 0x6f,
	0x69, 0x6e, 0x55, 0x46, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x55, 0x46, 0x43,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_filecoin_client_ac_proto_rawDescOnce sync.Once
	file_filecoin_client_ac_proto_rawDescData = file_filecoin_client_ac_proto_rawDesc
)

func file_filecoin_client_ac_proto_rawDescGZIP() []byte {
	file_filecoin_client_ac_proto_rawDescOnce.Do(func() {
		file_filecoin_client_ac_proto_rawDescData = protoimpl.X.CompressGZIP(file_filecoin_client_ac_proto_rawDescData)
	})
	return file_filecoin_client_ac_proto_rawDescData
}

var file_filecoin_client_ac_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_filecoin_client_ac_proto_goTypes = []any{
	(*FilecoinStorageRequest)(nil),  // 0: proto.FilecoinStorageRequest
	(*FilecoinStorageResponse)(nil), // 1: proto.FilecoinStorageResponse
	(*Int32ArrayACFilecoin)(nil),    // 2: proto.Int32ArrayACFilecoin
	(*FilecoinPFCRequest)(nil),      // 3: proto.FilecoinPFCRequest
	(*FilecoinPFCResponse)(nil),     // 4: proto.FilecoinPFCResponse
	(*FilecoinGFACRequest)(nil),     // 5: proto.FilecoinGFACRequest
	(*FilecoinGFACResponse)(nil),    // 6: proto.FilecoinGFACResponse
	(*FilecoinGRRRequest)(nil),      // 7: proto.FilecoinGRRRequest
	(*FilecoinGRRResponse)(nil),     // 8: proto.FilecoinGRRResponse
	(*FilecoinUFRequest)(nil),       // 9: proto.FilecoinUFRequest
	(*FilecoinUFResponse)(nil),      // 10: proto.FilecoinUFResponse
	(*FilecoinUFCRequest)(nil),      // 11: proto.FilecoinUFCRequest
	(*FilecoinUFCResponse)(nil),     // 12: proto.FilecoinUFCResponse
	nil,                             // 13: proto.FilecoinPFCRequest.RandmapEntry
	nil,                             // 14: proto.FilecoinPFCRequest.RootmapEntry
	nil,                             // 15: proto.FilecoinGFACResponse.SnsdsEntry
	nil,                             // 16: proto.FilecoinUFResponse.SnsdsEntry
	nil,                             // 17: proto.FilecoinUFCRequest.RandmapEntry
	nil,                             // 18: proto.FilecoinUFCRequest.RootmapEntry
}
var file_filecoin_client_ac_proto_depIdxs = []int32{
	13, // 0: proto.FilecoinPFCRequest.randmap:type_name -> proto.FilecoinPFCRequest.RandmapEntry
	14, // 1: proto.FilecoinPFCRequest.rootmap:type_name -> proto.FilecoinPFCRequest.RootmapEntry
	15, // 2: proto.FilecoinGFACResponse.snsds:type_name -> proto.FilecoinGFACResponse.SnsdsEntry
	2,  // 3: proto.FilecoinGRRResponse.rands:type_name -> proto.Int32ArrayACFilecoin
	16, // 4: proto.FilecoinUFResponse.snsds:type_name -> proto.FilecoinUFResponse.SnsdsEntry
	17, // 5: proto.FilecoinUFCRequest.randmap:type_name -> proto.FilecoinUFCRequest.RandmapEntry
	18, // 6: proto.FilecoinUFCRequest.rootmap:type_name -> proto.FilecoinUFCRequest.RootmapEntry
	2,  // 7: proto.FilecoinPFCRequest.RandmapEntry.value:type_name -> proto.Int32ArrayACFilecoin
	2,  // 8: proto.FilecoinUFCRequest.RandmapEntry.value:type_name -> proto.Int32ArrayACFilecoin
	0,  // 9: proto.FilecoinACService.FilecoinSelectSNs:input_type -> proto.FilecoinStorageRequest
	3,  // 10: proto.FilecoinACService.FilecoinPutFileCommit:input_type -> proto.FilecoinPFCRequest
	5,  // 11: proto.FilecoinACService.FilecoinGetFileSNs:input_type -> proto.FilecoinGFACRequest
	7,  // 12: proto.FilecoinACService.FilecoinGetRandRoot:input_type -> proto.FilecoinGRRRequest
	9,  // 13: proto.FilecoinACService.FilecoinUpdateFileReq:input_type -> proto.FilecoinUFRequest
	11, // 14: proto.FilecoinACService.FilecoinUpdateFileCommit:input_type -> proto.FilecoinUFCRequest
	1,  // 15: proto.FilecoinACService.FilecoinSelectSNs:output_type -> proto.FilecoinStorageResponse
	4,  // 16: proto.FilecoinACService.FilecoinPutFileCommit:output_type -> proto.FilecoinPFCResponse
	6,  // 17: proto.FilecoinACService.FilecoinGetFileSNs:output_type -> proto.FilecoinGFACResponse
	8,  // 18: proto.FilecoinACService.FilecoinGetRandRoot:output_type -> proto.FilecoinGRRResponse
	10, // 19: proto.FilecoinACService.FilecoinUpdateFileReq:output_type -> proto.FilecoinUFResponse
	12, // 20: proto.FilecoinACService.FilecoinUpdateFileCommit:output_type -> proto.FilecoinUFCResponse
	15, // [15:21] is the sub-list for method output_type
	9,  // [9:15] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_filecoin_client_ac_proto_init() }
func file_filecoin_client_ac_proto_init() {
	if File_filecoin_client_ac_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_filecoin_client_ac_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*FilecoinStorageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecoin_client_ac_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*FilecoinStorageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecoin_client_ac_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Int32ArrayACFilecoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecoin_client_ac_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*FilecoinPFCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecoin_client_ac_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*FilecoinPFCResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecoin_client_ac_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*FilecoinGFACRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecoin_client_ac_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*FilecoinGFACResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecoin_client_ac_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*FilecoinGRRRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecoin_client_ac_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*FilecoinGRRResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecoin_client_ac_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*FilecoinUFRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecoin_client_ac_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*FilecoinUFResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecoin_client_ac_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*FilecoinUFCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filecoin_client_ac_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*FilecoinUFCResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_filecoin_client_ac_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_filecoin_client_ac_proto_goTypes,
		DependencyIndexes: file_filecoin_client_ac_proto_depIdxs,
		MessageInfos:      file_filecoin_client_ac_proto_msgTypes,
	}.Build()
	File_filecoin_client_ac_proto = out.File
	file_filecoin_client_ac_proto_rawDesc = nil
	file_filecoin_client_ac_proto_goTypes = nil
	file_filecoin_client_ac_proto_depIdxs = nil
}

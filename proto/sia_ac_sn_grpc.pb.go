// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: sia_ac_sn.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SiaSNACService_SiaPutFileNotice_FullMethodName         = "/proto.SiaSNACService/SiaPutFileNotice"
	SiaSNACService_SiaUpdateDataShardNotice_FullMethodName = "/proto.SiaSNACService/SiaUpdateDataShardNotice"
	SiaSNACService_SiaPreAuditSN_FullMethodName            = "/proto.SiaSNACService/SiaPreAuditSN"
	SiaSNACService_SiaGetPosSN_FullMethodName              = "/proto.SiaSNACService/SiaGetPosSN"
)

// SiaSNACServiceClient is the client API for SiaSNACService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 存储节点为服务器，审计方为客户端
type SiaSNACServiceClient interface {
	SiaPutFileNotice(ctx context.Context, in *SiaClientStorageRequest, opts ...grpc.CallOption) (*SiaClientStorageResponse, error)
	SiaUpdateDataShardNotice(ctx context.Context, in *SiaClientUpdDSRequest, opts ...grpc.CallOption) (*SiaClientUpdDSResponse, error)
	SiaPreAuditSN(ctx context.Context, in *SiaPASNRequest, opts ...grpc.CallOption) (*SiaPASNResponse, error)
	SiaGetPosSN(ctx context.Context, in *SiaGAPSNRequest, opts ...grpc.CallOption) (*SiaGAPSNResponse, error)
}

type siaSNACServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSiaSNACServiceClient(cc grpc.ClientConnInterface) SiaSNACServiceClient {
	return &siaSNACServiceClient{cc}
}

func (c *siaSNACServiceClient) SiaPutFileNotice(ctx context.Context, in *SiaClientStorageRequest, opts ...grpc.CallOption) (*SiaClientStorageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SiaClientStorageResponse)
	err := c.cc.Invoke(ctx, SiaSNACService_SiaPutFileNotice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siaSNACServiceClient) SiaUpdateDataShardNotice(ctx context.Context, in *SiaClientUpdDSRequest, opts ...grpc.CallOption) (*SiaClientUpdDSResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SiaClientUpdDSResponse)
	err := c.cc.Invoke(ctx, SiaSNACService_SiaUpdateDataShardNotice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siaSNACServiceClient) SiaPreAuditSN(ctx context.Context, in *SiaPASNRequest, opts ...grpc.CallOption) (*SiaPASNResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SiaPASNResponse)
	err := c.cc.Invoke(ctx, SiaSNACService_SiaPreAuditSN_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siaSNACServiceClient) SiaGetPosSN(ctx context.Context, in *SiaGAPSNRequest, opts ...grpc.CallOption) (*SiaGAPSNResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SiaGAPSNResponse)
	err := c.cc.Invoke(ctx, SiaSNACService_SiaGetPosSN_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SiaSNACServiceServer is the server API for SiaSNACService service.
// All implementations must embed UnimplementedSiaSNACServiceServer
// for forward compatibility.
//
// 存储节点为服务器，审计方为客户端
type SiaSNACServiceServer interface {
	SiaPutFileNotice(context.Context, *SiaClientStorageRequest) (*SiaClientStorageResponse, error)
	SiaUpdateDataShardNotice(context.Context, *SiaClientUpdDSRequest) (*SiaClientUpdDSResponse, error)
	SiaPreAuditSN(context.Context, *SiaPASNRequest) (*SiaPASNResponse, error)
	SiaGetPosSN(context.Context, *SiaGAPSNRequest) (*SiaGAPSNResponse, error)
	mustEmbedUnimplementedSiaSNACServiceServer()
}

// UnimplementedSiaSNACServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSiaSNACServiceServer struct{}

func (UnimplementedSiaSNACServiceServer) SiaPutFileNotice(context.Context, *SiaClientStorageRequest) (*SiaClientStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SiaPutFileNotice not implemented")
}
func (UnimplementedSiaSNACServiceServer) SiaUpdateDataShardNotice(context.Context, *SiaClientUpdDSRequest) (*SiaClientUpdDSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SiaUpdateDataShardNotice not implemented")
}
func (UnimplementedSiaSNACServiceServer) SiaPreAuditSN(context.Context, *SiaPASNRequest) (*SiaPASNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SiaPreAuditSN not implemented")
}
func (UnimplementedSiaSNACServiceServer) SiaGetPosSN(context.Context, *SiaGAPSNRequest) (*SiaGAPSNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SiaGetPosSN not implemented")
}
func (UnimplementedSiaSNACServiceServer) mustEmbedUnimplementedSiaSNACServiceServer() {}
func (UnimplementedSiaSNACServiceServer) testEmbeddedByValue()                        {}

// UnsafeSiaSNACServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SiaSNACServiceServer will
// result in compilation errors.
type UnsafeSiaSNACServiceServer interface {
	mustEmbedUnimplementedSiaSNACServiceServer()
}

func RegisterSiaSNACServiceServer(s grpc.ServiceRegistrar, srv SiaSNACServiceServer) {
	// If the following call pancis, it indicates UnimplementedSiaSNACServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SiaSNACService_ServiceDesc, srv)
}

func _SiaSNACService_SiaPutFileNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiaClientStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiaSNACServiceServer).SiaPutFileNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiaSNACService_SiaPutFileNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiaSNACServiceServer).SiaPutFileNotice(ctx, req.(*SiaClientStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiaSNACService_SiaUpdateDataShardNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiaClientUpdDSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiaSNACServiceServer).SiaUpdateDataShardNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiaSNACService_SiaUpdateDataShardNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiaSNACServiceServer).SiaUpdateDataShardNotice(ctx, req.(*SiaClientUpdDSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiaSNACService_SiaPreAuditSN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiaPASNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiaSNACServiceServer).SiaPreAuditSN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiaSNACService_SiaPreAuditSN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiaSNACServiceServer).SiaPreAuditSN(ctx, req.(*SiaPASNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiaSNACService_SiaGetPosSN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiaGAPSNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiaSNACServiceServer).SiaGetPosSN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiaSNACService_SiaGetPosSN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiaSNACServiceServer).SiaGetPosSN(ctx, req.(*SiaGAPSNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SiaSNACService_ServiceDesc is the grpc.ServiceDesc for SiaSNACService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SiaSNACService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SiaSNACService",
	HandlerType: (*SiaSNACServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SiaPutFileNotice",
			Handler:    _SiaSNACService_SiaPutFileNotice_Handler,
		},
		{
			MethodName: "SiaUpdateDataShardNotice",
			Handler:    _SiaSNACService_SiaUpdateDataShardNotice_Handler,
		},
		{
			MethodName: "SiaPreAuditSN",
			Handler:    _SiaSNACService_SiaPreAuditSN_Handler,
		},
		{
			MethodName: "SiaGetPosSN",
			Handler:    _SiaSNACService_SiaGetPosSN_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sia_ac_sn.proto",
}
